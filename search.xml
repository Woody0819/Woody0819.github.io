<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>双均线策略制定</title>
    <url>/2021/05/25/test_2/</url>
    <content><![CDATA[<h1 id="需求：双均线策略制定"><a href="#需求：双均线策略制定" class="headerlink" title="需求：双均线策略制定"></a>需求：双均线策略制定</h1><ul>
<li>使用tushare包获取某股票的历史行情数据  </li>
<li>计算该股票历史数据的5日均线和60日均线  <ul>
<li>什么是均线：  <ul>
<li>对于每一个交易日，都可以计算出前N天的移动平均值，然后把这些移动平均值连起来，成为一条线，就叫做N日移动平均线。移动平均线常用线有5天、10天、30天、60天、120天和240天的指标。  </li>
<li>5天和10天的是短线操作的参照指标，称作日均线指标；  </li>
<li>30天和60天的是中期均线指标，称作季均线指标；  </li>
<li>120天和240天的是长期均线指标，称作年均线指标。  </li>
</ul>
</li>
<li>均线计算方法：MA=(C1+C2+C3+…+Cn)/N    C:某日收盘价；N:移动平均周期（天数）</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tushare <span class="keyword">as</span> ts</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">df = ts.get_k_data(code=&#x27;600519&#x27;,start=&#x27;2015-01-01&#x27;)</span></span><br><span class="line"><span class="string">df.to_csv(&#x27;moutai.csv&#x27;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;moutai.csv&#x27;</span>).drop(labels=<span class="string">&#x27;Unnamed: 0&#x27;</span>,axis=<span class="number">1</span>)</span><br><span class="line">df[<span class="string">&#x27;date&#x27;</span>] = pd.to_datetime(df[<span class="string">&#x27;date&#x27;</span>])</span><br><span class="line">df.set_index(<span class="string">&#x27;date&#x27;</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>open</th>
      <th>close</th>
      <th>high</th>
      <th>low</th>
      <th>volume</th>
      <th>code</th>
    </tr>
    <tr>
      <th>date</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2015-01-05</th>
      <td>161.056</td>
      <td>172.013</td>
      <td>173.474</td>
      <td>160.266</td>
      <td>94515.0</td>
      <td>600519</td>
    </tr>
    <tr>
      <th>2015-01-06</th>
      <td>169.872</td>
      <td>168.029</td>
      <td>172.047</td>
      <td>166.492</td>
      <td>55020.0</td>
      <td>600519</td>
    </tr>
    <tr>
      <th>2015-01-07</th>
      <td>166.509</td>
      <td>163.876</td>
      <td>169.448</td>
      <td>161.370</td>
      <td>54797.0</td>
      <td>600519</td>
    </tr>
    <tr>
      <th>2015-01-08</th>
      <td>164.776</td>
      <td>162.874</td>
      <td>165.218</td>
      <td>161.498</td>
      <td>40525.0</td>
      <td>600519</td>
    </tr>
    <tr>
      <th>2015-01-09</th>
      <td>161.719</td>
      <td>161.642</td>
      <td>166.280</td>
      <td>161.472</td>
      <td>53982.0</td>
      <td>600519</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ma5 = df[<span class="string">&#x27;close&#x27;</span>].rolling(<span class="number">5</span>).mean()   <span class="comment"># rolling滑动窗口尺寸为5</span></span><br><span class="line">ma10 = df[<span class="string">&#x27;close&#x27;</span>].rolling(<span class="number">10</span>).mean()</span><br><span class="line">ma30 = df[<span class="string">&#x27;close&#x27;</span>].rolling(<span class="number">30</span>).mean()</span><br><span class="line">ma60 = df[<span class="string">&#x27;close&#x27;</span>].rolling(<span class="number">60</span>).mean()</span><br><span class="line">ma120 = df[<span class="string">&#x27;close&#x27;</span>].rolling(<span class="number">120</span>).mean()</span><br><span class="line">ma240 = df[<span class="string">&#x27;close&#x27;</span>].rolling(<span class="number">240</span>).mean()</span><br><span class="line">%matplotlib inline</span><br><span class="line">plt.plot(ma5[<span class="number">110</span>:<span class="number">330</span>])</span><br><span class="line">plt.plot(ma30[<span class="number">110</span>:<span class="number">330</span>])</span><br></pre></td></tr></table></figure>




<pre><code>[&lt;matplotlib.lines.Line2D at 0x2a1aa5f9eb8&gt;]
</code></pre>
<p><img src="https://thumbnail0.baidupcs.com/thumbnail/dad4d65d9gbf6ee378dd480db68a984b?fid=856262239-250528-356325444449588&rt=pr&sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-1zVHHRKFF1ut0+sdY/SKKuoF/kU=&expires=8h&chkbd=0&chkv=0&dp-logid=80819459903429552&dp-callid=0&time=1622613600&size=c10000_u10000&quality=90&vuk=856262239&ft=image"></p>
<ul>
<li>分析输出所有金叉日期和死叉日期  <ul>
<li>股票分析技术中的金叉和死叉，可以简单解释为：  <ul>
<li>1.分析指标中的两根线，一根为短时间内的指标线，另一根为较长时间的指标线。  </li>
<li>2.如果短时间的指标线方向拐头向上，并且穿过了较长时间的指标线，这种状态叫“金叉”；  </li>
<li>3.如果短时间的指标线方向拐头向下，并且穿过了较长时间的指标线，这种状态叫“死叉”；  </li>
<li>4.一般情况下，出现金叉后，操作趋向买入；死叉则趋向卖出。当然，金叉和死叉只是分析指标之一，要和其他很多指标配合使用，才能增加操作的准确性。<br>参考讲解：<a href="https://www.bilibili.com/video/BV1Z64y1S7y3?p=15">https://www.bilibili.com/video/BV1Z64y1S7y3?p=15</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ma5 = ma5[<span class="number">30</span>:]</span><br><span class="line">ma30 = ma30[<span class="number">30</span>:]</span><br><span class="line">df = df[<span class="number">30</span>:]</span><br><span class="line">s1 = ma5 &lt; ma30</span><br><span class="line">s2 = ma5 &gt; ma30</span><br><span class="line">death_ex = s1 &amp; s2.shift(<span class="number">1</span>) <span class="comment"># 判定死叉条件</span></span><br><span class="line">death_date = df.loc[death_ex].index   <span class="comment"># death_ex为Boolean型，用作索引直接提取True的对应行数据，再取行索引号即死叉对应日期</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;死叉日期：&#x27;</span>, death_date)</span><br><span class="line">golden_ex = ~(s1|s2.shift(<span class="number">1</span>))</span><br><span class="line">golden_date = df.loc[golden_ex].index</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;金叉日期：&#x27;</span>, golden_date)</span><br></pre></td></tr></table></figure>

<pre><code>死叉日期： DatetimeIndex([&#39;2015-06-17&#39;, &#39;2015-07-17&#39;, &#39;2015-09-28&#39;, &#39;2015-11-26&#39;,
               &#39;2015-12-10&#39;, &#39;2016-01-05&#39;, &#39;2016-08-05&#39;, &#39;2016-08-18&#39;,
               &#39;2016-11-21&#39;, &#39;2017-07-06&#39;, &#39;2017-09-08&#39;, &#39;2017-11-29&#39;,
               &#39;2018-02-05&#39;, &#39;2018-03-27&#39;, &#39;2018-06-28&#39;, &#39;2018-07-23&#39;,
               &#39;2018-07-31&#39;, &#39;2018-10-15&#39;, &#39;2018-12-25&#39;, &#39;2019-05-10&#39;,
               &#39;2019-07-19&#39;, &#39;2019-11-28&#39;, &#39;2020-01-03&#39;, &#39;2020-02-28&#39;,
               &#39;2020-03-18&#39;, &#39;2020-08-10&#39;, &#39;2020-09-21&#39;, &#39;2020-10-27&#39;,
               &#39;2021-03-01&#39;, &#39;2021-04-15&#39;],
              dtype=&#39;datetime64[ns]&#39;, name=&#39;date&#39;, freq=None)
金叉日期： DatetimeIndex([&#39;2015-02-16&#39;, &#39;2015-07-15&#39;, &#39;2015-09-16&#39;, &#39;2015-10-09&#39;,
               &#39;2015-12-03&#39;, &#39;2015-12-21&#39;, &#39;2016-02-22&#39;, &#39;2016-08-11&#39;,
               &#39;2016-10-13&#39;, &#39;2016-11-25&#39;, &#39;2017-07-24&#39;, &#39;2017-09-18&#39;,
               &#39;2017-12-15&#39;, &#39;2018-03-16&#39;, &#39;2018-05-09&#39;, &#39;2018-07-18&#39;,
               &#39;2018-07-25&#39;, &#39;2018-09-20&#39;, &#39;2018-12-04&#39;, &#39;2019-01-03&#39;,
               &#39;2019-06-14&#39;, &#39;2019-08-13&#39;, &#39;2020-01-02&#39;, &#39;2020-02-19&#39;,
               &#39;2020-03-03&#39;, &#39;2020-04-02&#39;, &#39;2020-08-19&#39;, &#39;2020-10-14&#39;,
               &#39;2020-11-05&#39;, &#39;2021-04-02&#39;, &#39;2021-04-16&#39;],
              dtype=&#39;datetime64[ns]&#39;, name=&#39;date&#39;, freq=None)
</code></pre>
<ul>
<li>如果从2017年1月1日开始，初始资金为10W元，金叉尽量买入，死叉全部卖出，则迄今为止炒股收益率如何？  <ul>
<li>1.买卖股票的单价使用开盘价  </li>
<li>2.买卖股票的时机  </li>
<li>3.最终手里会有剩余的股票没有卖出去（如果最有一次是金叉即买入没有卖出则出现剩余，需估量其价值，剩余股票单价使用最后一天的收盘价计算）</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l1 = pd.Series(<span class="number">1</span>,index=golden_date)    <span class="comment"># 1作为金叉标识</span></span><br><span class="line">l2 = pd.Series(<span class="number">0</span>,index=death_date) <span class="comment"># 0作为死叉标识</span></span><br><span class="line">l = l1.append(l2)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br></pre></td></tr></table></figure>

<pre><code>date
2015-02-16    1
2015-07-15    1
2015-09-16    1
2015-10-09    1
2015-12-03    1
             ..
2020-08-10    0
2020-09-21    0
2020-10-27    0
2021-03-01    0
2021-04-15    0
Length: 61, dtype: int64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = l.sort_index()  <span class="comment"># 根据日期排序即出现金叉死叉交错</span></span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line">l = l[<span class="string">&#x27;2017&#x27;</span>:<span class="string">&#x27;2021&#x27;</span>]    <span class="comment"># 根据需求切出2017年至今的金叉死叉</span></span><br><span class="line"><span class="built_in">print</span>(l)</span><br></pre></td></tr></table></figure>

<pre><code>date
2015-02-16    1
2015-06-17    0
2015-07-15    1
2015-07-17    0
2015-09-16    1
             ..
2020-11-05    1
2021-03-01    0
2021-04-02    1
2021-04-15    0
2021-04-16    1
Length: 61, dtype: int64
date
2017-07-06    0
2017-07-24    1
2017-09-08    0
2017-09-18    1
2017-11-29    0
2017-12-15    1
2018-02-05    0
2018-03-16    1
2018-03-27    0
2018-05-09    1
2018-06-28    0
2018-07-18    1
2018-07-23    0
2018-07-25    1
2018-07-31    0
2018-09-20    1
2018-10-15    0
2018-12-04    1
2018-12-25    0
2019-01-03    1
2019-05-10    0
2019-06-14    1
2019-07-19    0
2019-08-13    1
2019-11-28    0
2020-01-02    1
2020-01-03    0
2020-02-19    1
2020-02-28    0
2020-03-03    1
2020-03-18    0
2020-04-02    1
2020-08-10    0
2020-08-19    1
2020-09-21    0
2020-10-14    1
2020-10-27    0
2020-11-05    1
2021-03-01    0
2021-04-02    1
2021-04-15    0
2021-04-16    1
dtype: int64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">first_money = <span class="number">100000</span>    <span class="comment"># 本金不变</span></span><br><span class="line">money = first_money <span class="comment"># 可变，买股票花的钱和卖股票赚的钱都在该变量中操作</span></span><br><span class="line">hold = <span class="number">0</span>    <span class="comment"># 持有股票的数量（股数：100股=1手）</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(l)): </span><br><span class="line">    <span class="keyword">if</span> l[i] == <span class="number">1</span>:  <span class="comment"># 金叉时间，基于10W单价尽多买入</span></span><br><span class="line">        time = l.index[i]   <span class="comment"># 获取金叉时间</span></span><br><span class="line">        p = df.loc[time][<span class="string">&#x27;open&#x27;</span>]    <span class="comment"># 取出该时间对应的开盘价，即当前单价</span></span><br><span class="line">        hand_count = money // (p*<span class="number">100</span>)   <span class="comment"># 10W能买入多少手</span></span><br><span class="line">        hold = hand_count * <span class="number">100</span> <span class="comment"># 股数</span></span><br><span class="line">        money -= (hold*p)   <span class="comment"># 将买股票的钱从money中减去</span></span><br><span class="line">    <span class="keyword">else</span>:   <span class="comment"># 死叉时间，将买入的股票卖出去</span></span><br><span class="line">        death_time = l.index[i]</span><br><span class="line">        p_death = df.loc[death_time][<span class="string">&#x27;open&#x27;</span>]    <span class="comment"># 卖股票的单价</span></span><br><span class="line">        money += (p_death * hold)   <span class="comment"># 卖股票的收入加进money中</span></span><br><span class="line">        hold = <span class="number">0</span>    <span class="comment"># 股票卖出后，注意hold要清空</span></span><br><span class="line"><span class="comment"># 判定最后一次是金叉还是死叉可以判断l[i]最后一位是1还是0，但也可以使用hold判断，hold=0则最后一次为死叉反之金叉。</span></span><br><span class="line">last_money = hold * df[<span class="string">&#x27;close&#x27;</span>][-<span class="number">1</span>] <span class="comment"># 剩余股票的价值，若为金叉有剩余价值若为死叉该值为0，不用再进行判断直接加上即可。</span></span><br><span class="line"><span class="comment"># 总收益</span></span><br><span class="line">final_money = money + last_money - first_money</span><br><span class="line"><span class="built_in">print</span>(final_money)</span><br></pre></td></tr></table></figure>

<pre><code>198082.0
</code></pre>
<ul>
<li>金融量化实用平台：聚宽joinQuant</li>
</ul>
]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>股票分析</title>
    <url>/2021/05/25/test_1/</url>
    <content><![CDATA[<h1 id="需求：股票分析"><a href="#需求：股票分析" class="headerlink" title="需求：股票分析"></a>需求：股票分析</h1><p>1.使用tushare包获取某股票的历史行情数据<br>2.输出该股票所有收盘比开盘上涨3%以上的日期<br>3.输出该股票所有开盘比前日收盘跌幅超2%的日期<br>4.假如从2017年1月1日开始，每月第一个交易日买入1手股票，每年最后一个交易日卖出所有股票，迄今为止收益如何？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tushare <span class="keyword">as</span> ts</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = ts.get_k_data(code=<span class="string">&#x27;600519&#x27;</span>,start=<span class="string">&#x27;2015-01-01&#x27;</span>)</span><br><span class="line">df.to_csv(<span class="string">&#x27;moutai.csv&#x27;</span>)</span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;moutai.csv&#x27;</span>)</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure>

<pre><code>本接口即将停止更新，请尽快使用Pro版接口：https://waditu.com/document/2
</code></pre>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Unnamed: 0</th>
      <th>date</th>
      <th>open</th>
      <th>close</th>
      <th>high</th>
      <th>low</th>
      <th>volume</th>
      <th>code</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0</td>
      <td>2015-01-05</td>
      <td>161.056</td>
      <td>172.013</td>
      <td>173.474</td>
      <td>160.266</td>
      <td>94515.0</td>
      <td>600519</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>2015-01-06</td>
      <td>169.872</td>
      <td>168.029</td>
      <td>172.047</td>
      <td>166.492</td>
      <td>55020.0</td>
      <td>600519</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2</td>
      <td>2015-01-07</td>
      <td>166.509</td>
      <td>163.876</td>
      <td>169.448</td>
      <td>161.370</td>
      <td>54797.0</td>
      <td>600519</td>
    </tr>
    <tr>
      <th>3</th>
      <td>3</td>
      <td>2015-01-08</td>
      <td>164.776</td>
      <td>162.874</td>
      <td>165.218</td>
      <td>161.498</td>
      <td>40525.0</td>
      <td>600519</td>
    </tr>
    <tr>
      <th>4</th>
      <td>4</td>
      <td>2015-01-09</td>
      <td>161.719</td>
      <td>161.642</td>
      <td>166.280</td>
      <td>161.472</td>
      <td>53982.0</td>
      <td>600519</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.drop(labels=<span class="string">&#x27;Unnamed: 0&#x27;</span>,axis=<span class="number">1</span>,inplace=<span class="literal">True</span>) <span class="comment"># drop中axis与常规相反,1是垂直方向，0是水平方向</span></span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>date</th>
      <th>open</th>
      <th>close</th>
      <th>high</th>
      <th>low</th>
      <th>volume</th>
      <th>code</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2015-01-05</td>
      <td>161.056</td>
      <td>172.013</td>
      <td>173.474</td>
      <td>160.266</td>
      <td>94515.0</td>
      <td>600519</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2015-01-06</td>
      <td>169.872</td>
      <td>168.029</td>
      <td>172.047</td>
      <td>166.492</td>
      <td>55020.0</td>
      <td>600519</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2015-01-07</td>
      <td>166.509</td>
      <td>163.876</td>
      <td>169.448</td>
      <td>161.370</td>
      <td>54797.0</td>
      <td>600519</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2015-01-08</td>
      <td>164.776</td>
      <td>162.874</td>
      <td>165.218</td>
      <td>161.498</td>
      <td>40525.0</td>
      <td>600519</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2015-01-09</td>
      <td>161.719</td>
      <td>161.642</td>
      <td>166.280</td>
      <td>161.472</td>
      <td>53982.0</td>
      <td>600519</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(df[<span class="string">&#x27;date&#x27;</span>].dtype)</span><br><span class="line">df.info()   <span class="comment"># 查看每一列的数据类型</span></span><br></pre></td></tr></table></figure>

<pre><code>object
&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
RangeIndex: 1536 entries, 0 to 1535
Data columns (total 7 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   date    1536 non-null   object 
 1   open    1536 non-null   float64
 2   close   1536 non-null   float64
 3   high    1536 non-null   float64
 4   low     1536 non-null   float64
 5   volume  1536 non-null   float64
 6   code    1536 non-null   int64  
dtypes: float64(5), int64(1), object(1)
memory usage: 84.1+ KB
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;date&#x27;</span>] = pd.to_datetime(df[<span class="string">&#x27;date&#x27;</span>]) <span class="comment"># 将日期时间转换为时间序列格式</span></span><br><span class="line">df.info()</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
RangeIndex: 1536 entries, 0 to 1535
Data columns (total 7 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   date    1536 non-null   datetime64[ns]
 1   open    1536 non-null   float64       
 2   close   1536 non-null   float64       
 3   high    1536 non-null   float64       
 4   low     1536 non-null   float64       
 5   volume  1536 non-null   float64       
 6   code    1536 non-null   int64         
dtypes: datetime64[ns](1), float64(5), int64(1)
memory usage: 84.1 KB
</code></pre>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>date</th>
      <th>open</th>
      <th>close</th>
      <th>high</th>
      <th>low</th>
      <th>volume</th>
      <th>code</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2015-01-05</td>
      <td>161.056</td>
      <td>172.013</td>
      <td>173.474</td>
      <td>160.266</td>
      <td>94515.0</td>
      <td>600519</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2015-01-06</td>
      <td>169.872</td>
      <td>168.029</td>
      <td>172.047</td>
      <td>166.492</td>
      <td>55020.0</td>
      <td>600519</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2015-01-07</td>
      <td>166.509</td>
      <td>163.876</td>
      <td>169.448</td>
      <td>161.370</td>
      <td>54797.0</td>
      <td>600519</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2015-01-08</td>
      <td>164.776</td>
      <td>162.874</td>
      <td>165.218</td>
      <td>161.498</td>
      <td>40525.0</td>
      <td>600519</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2015-01-09</td>
      <td>161.719</td>
      <td>161.642</td>
      <td>166.280</td>
      <td>161.472</td>
      <td>53982.0</td>
      <td>600519</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.set_index(<span class="string">&#x27;date&#x27;</span>,inplace=<span class="literal">True</span>)   <span class="comment"># set_index重新设置索引,inplace表示是否作用于源数据</span></span><br><span class="line">df.head()</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure>

<pre><code>                open     close      high       low   volume    code
date                                                               
2015-01-05   161.056   172.013   173.474   160.266  94515.0  600519
2015-01-06   169.872   168.029   172.047   166.492  55020.0  600519
2015-01-07   166.509   163.876   169.448   161.370  54797.0  600519
2015-01-08   164.776   162.874   165.218   161.498  40525.0  600519
2015-01-09   161.719   161.642   166.280   161.472  53982.0  600519
...              ...       ...       ...       ...      ...     ...
2021-04-19  2055.000  2088.000  2098.360  2033.000  31754.0  600519
2021-04-20  2071.100  2094.800  2129.000  2070.000  28290.0  600519
2021-04-21  2076.000  2080.000  2097.800  2065.100  26150.0  600519
2021-04-22  2089.900  2055.500  2099.000  2051.500  26850.0  600519
2021-04-23  2055.970  2108.940  2119.880  2052.500  33463.0  600519

[1536 rows x 6 columns]
</code></pre>
<p>2.输出该股票所有收盘比开盘上涨3%以上的日期<br>（收盘-开盘）/开盘&gt;0.03</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(df[<span class="string">&#x27;close&#x27;</span>]-df[<span class="string">&#x27;open&#x27;</span>])/df[<span class="string">&#x27;open&#x27;</span>]&gt;<span class="number">0.03</span>    <span class="comment"># 返回应为boolean类型</span></span><br><span class="line">df.loc[(df[<span class="string">&#x27;close&#x27;</span>]-df[<span class="string">&#x27;open&#x27;</span>])/df[<span class="string">&#x27;open&#x27;</span>]&gt;<span class="number">0.03</span>]   <span class="comment"># 获取了True所对应的行数据</span></span><br><span class="line">df.loc[(df[<span class="string">&#x27;close&#x27;</span>]-df[<span class="string">&#x27;open&#x27;</span>])/df[<span class="string">&#x27;open&#x27;</span>]&gt;<span class="number">0.03</span>].index  <span class="comment"># 获取对应行的索引</span></span><br></pre></td></tr></table></figure>




<pre><code>DatetimeIndex([&#39;2015-01-05&#39;, &#39;2015-02-09&#39;, &#39;2015-03-09&#39;, &#39;2015-04-16&#39;,
               &#39;2015-04-21&#39;, &#39;2015-05-08&#39;, &#39;2015-05-19&#39;, &#39;2015-05-22&#39;,
               &#39;2015-05-25&#39;, &#39;2015-06-08&#39;, &#39;2015-06-23&#39;, &#39;2015-06-24&#39;,
               &#39;2015-06-30&#39;, &#39;2015-07-08&#39;, &#39;2015-07-09&#39;, &#39;2015-07-10&#39;,
               &#39;2015-08-25&#39;, &#39;2015-08-26&#39;, &#39;2015-08-27&#39;, &#39;2015-08-31&#39;,
               &#39;2015-09-14&#39;, &#39;2015-11-30&#39;, &#39;2015-12-02&#39;, &#39;2015-12-21&#39;,
               &#39;2016-01-14&#39;, &#39;2016-01-19&#39;, &#39;2016-03-04&#39;, &#39;2016-03-15&#39;,
               &#39;2016-03-24&#39;, &#39;2016-04-06&#39;, &#39;2016-05-03&#39;, &#39;2016-05-31&#39;,
               &#39;2016-06-03&#39;, &#39;2016-06-27&#39;, &#39;2016-07-06&#39;, &#39;2016-07-26&#39;,
               &#39;2016-12-06&#39;, &#39;2017-01-04&#39;, &#39;2017-02-20&#39;, &#39;2017-04-25&#39;,
               &#39;2017-08-14&#39;, &#39;2017-10-19&#39;, &#39;2017-10-27&#39;, &#39;2017-11-10&#39;,
               &#39;2017-11-16&#39;, &#39;2017-11-28&#39;, &#39;2017-12-11&#39;, &#39;2017-12-28&#39;,
               &#39;2018-01-09&#39;, &#39;2018-01-31&#39;, &#39;2018-04-19&#39;, &#39;2018-05-07&#39;,
               &#39;2018-05-28&#39;, &#39;2018-06-04&#39;, &#39;2018-06-20&#39;, &#39;2018-08-09&#39;,
               &#39;2018-08-21&#39;, &#39;2018-08-27&#39;, &#39;2018-09-18&#39;, &#39;2018-09-26&#39;,
               &#39;2018-10-19&#39;, &#39;2018-10-31&#39;, &#39;2018-11-13&#39;, &#39;2018-12-28&#39;,
               &#39;2019-01-15&#39;, &#39;2019-02-11&#39;, &#39;2019-03-01&#39;, &#39;2019-03-18&#39;,
               &#39;2019-04-10&#39;, &#39;2019-04-16&#39;, &#39;2019-05-10&#39;, &#39;2019-05-15&#39;,
               &#39;2019-06-11&#39;, &#39;2019-06-20&#39;, &#39;2019-09-12&#39;, &#39;2019-09-18&#39;,
               &#39;2020-02-11&#39;, &#39;2020-03-02&#39;, &#39;2020-03-05&#39;, &#39;2020-03-10&#39;,
               &#39;2020-04-02&#39;, &#39;2020-04-22&#39;, &#39;2020-05-06&#39;, &#39;2020-05-18&#39;,
               &#39;2020-07-02&#39;, &#39;2020-07-06&#39;, &#39;2020-07-07&#39;, &#39;2020-07-13&#39;,
               &#39;2020-12-30&#39;, &#39;2021-01-05&#39;, &#39;2021-01-12&#39;, &#39;2021-01-25&#39;,
               &#39;2021-02-04&#39;, &#39;2021-02-09&#39;, &#39;2021-02-10&#39;, &#39;2021-03-03&#39;,
               &#39;2021-03-05&#39;, &#39;2021-03-11&#39;, &#39;2021-04-02&#39;],
              dtype=&#39;datetime64[ns]&#39;, name=&#39;date&#39;, freq=None)
</code></pre>
<p>3.输出该股票所有开盘比前日收盘跌幅超2%的日期<br>（开盘-前日收盘）/前日收盘&lt;-0.02</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>open</th>
      <th>close</th>
      <th>high</th>
      <th>low</th>
      <th>volume</th>
      <th>code</th>
    </tr>
    <tr>
      <th>date</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2015-01-05</th>
      <td>161.056</td>
      <td>172.013</td>
      <td>173.474</td>
      <td>160.266</td>
      <td>94515.0</td>
      <td>600519</td>
    </tr>
    <tr>
      <th>2015-01-06</th>
      <td>169.872</td>
      <td>168.029</td>
      <td>172.047</td>
      <td>166.492</td>
      <td>55020.0</td>
      <td>600519</td>
    </tr>
    <tr>
      <th>2015-01-07</th>
      <td>166.509</td>
      <td>163.876</td>
      <td>169.448</td>
      <td>161.370</td>
      <td>54797.0</td>
      <td>600519</td>
    </tr>
    <tr>
      <th>2015-01-08</th>
      <td>164.776</td>
      <td>162.874</td>
      <td>165.218</td>
      <td>161.498</td>
      <td>40525.0</td>
      <td>600519</td>
    </tr>
    <tr>
      <th>2015-01-09</th>
      <td>161.719</td>
      <td>161.642</td>
      <td>166.280</td>
      <td>161.472</td>
      <td>53982.0</td>
      <td>600519</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;close&#x27;</span>].shift(<span class="number">1</span>)    <span class="comment"># shift(1)使close整体下移一位,-1为上移；移动后两列相减即可实现开盘-前日收盘</span></span><br><span class="line">df.loc[(df[<span class="string">&#x27;open&#x27;</span>]-df[<span class="string">&#x27;close&#x27;</span>].shift(<span class="number">1</span>))/df[<span class="string">&#x27;close&#x27;</span>].shift(<span class="number">1</span>)&lt;-<span class="number">0.02</span>].index</span><br></pre></td></tr></table></figure>




<pre><code>DatetimeIndex([&#39;2015-01-19&#39;, &#39;2015-05-25&#39;, &#39;2015-07-03&#39;, &#39;2015-07-08&#39;,
               &#39;2015-07-13&#39;, &#39;2015-08-24&#39;, &#39;2015-09-02&#39;, &#39;2015-09-15&#39;,
               &#39;2017-11-17&#39;, &#39;2018-02-06&#39;, &#39;2018-02-09&#39;, &#39;2018-03-23&#39;,
               &#39;2018-03-28&#39;, &#39;2018-07-11&#39;, &#39;2018-10-11&#39;, &#39;2018-10-24&#39;,
               &#39;2018-10-25&#39;, &#39;2018-10-29&#39;, &#39;2018-10-30&#39;, &#39;2019-05-06&#39;,
               &#39;2019-05-08&#39;, &#39;2019-10-16&#39;, &#39;2020-01-02&#39;, &#39;2020-02-03&#39;,
               &#39;2020-03-13&#39;, &#39;2020-03-23&#39;, &#39;2020-10-26&#39;, &#39;2021-02-26&#39;,
               &#39;2021-03-04&#39;],
              dtype=&#39;datetime64[ns]&#39;, name=&#39;date&#39;, freq=None)
</code></pre>
<p>4.假如从2017年1月1日开始，每月第一个交易日买入1手股票，每年最后一个交易日卖出所有股票，迄今为止收益如何？<br>①时间节点拆分：2017-2021<br>②一手股票：100股<br>③买股票：<br>    找出每个月第一个交易日–&gt;每月第一行数据(每年共1200股)<br> 卖股票：<br>    每年最后一个交易日将所有股票全部卖出（特殊情况：该分析进行时，当年买入的股票由于没到该年最后一天所以无法卖出）<br>    最后手中剩余的股票要估量其价值计算到总收益当中<br> 买卖股票的单价：可以开盘价为准</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">new_df = df[<span class="string">&#x27;2017-01&#x27;</span>:<span class="string">&#x27;2021-03&#x27;</span>]    <span class="comment"># 只有在索引为时间序列时才可如此切分（pd.to_datetime()）</span></span><br><span class="line"><span class="built_in">print</span>(new_df)</span><br><span class="line">new_df.resample(<span class="string">&#x27;M&#x27;</span>).first()    <span class="comment"># 根据月份重新取样;取每月的第一行数据;此处索引有问题但数据确为每月第一行</span></span><br><span class="line">df_monthly = new_df.resample(<span class="string">&#x27;M&#x27;</span>).first()</span><br><span class="line">cost = df_monthly[<span class="string">&#x27;open&#x27;</span>].<span class="built_in">sum</span>()*<span class="number">100</span> <span class="comment"># 总花费</span></span><br><span class="line"><span class="built_in">print</span>(cost)</span><br></pre></td></tr></table></figure>

<pre><code>                open     close      high       low   volume    code
date                                                               
2017-01-03   324.689   324.961   327.331   323.261  20763.0  600519
2017-01-04   325.019   341.813   342.066   325.000  65257.0  600519
2017-01-05   339.958   336.792   341.366   335.529  41704.0  600519
2017-01-06   336.694   340.696   349.457   336.170  68095.0  600519
2017-01-09   337.821   338.511   342.755   336.597  35405.0  600519
...              ...       ...       ...       ...      ...     ...
2021-03-25  1970.010  1971.000  1988.880  1946.800  31575.0  600519
2021-03-26  1985.000  2013.000  2022.000  1958.000  50016.0  600519
2021-03-29  2043.200  2034.100  2096.350  2026.150  56992.0  600519
2021-03-30  2040.000  2056.050  2086.000  2035.080  32627.0  600519
2021-03-31  2045.100  2009.000  2046.020  2000.000  37154.0  600519

[1032 rows x 6 columns]
4817018.8
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_yearly = new_df.resample(<span class="string">&#x27;A&#x27;</span>).last()[:-<span class="number">1</span>]   <span class="comment"># 最后2021年一行的数据需要忽略掉</span></span><br><span class="line"><span class="built_in">print</span>(df_yearly)</span><br><span class="line">resv = df_yearly[<span class="string">&#x27;open&#x27;</span>].<span class="built_in">sum</span>()*<span class="number">1200</span> <span class="comment"># 截止2020年末收益</span></span><br><span class="line">resv = <span class="number">300</span>*df[<span class="string">&#x27;close&#x27;</span>][-<span class="number">1</span>] + resv   <span class="comment"># 加上2021年前三个月的收益，该收益以昨日收盘价计价</span></span><br><span class="line">resv = resv-cost</span><br><span class="line"><span class="built_in">print</span>(resv)</span><br></pre></td></tr></table></figure>

<pre><code>                open     close      high       low   volume    code
date                                                               
2017-12-31   707.948   687.725   716.329   681.918  76038.0  600519
2018-12-31   563.300   590.010   596.400   560.000  63678.0  600519
2019-12-31  1183.000  1183.000  1188.000  1176.510  22588.0  600519
2020-12-31  1941.000  1998.000  1998.980  1939.000  38860.0  600519
1089960.7999999998
</code></pre>
]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>处理丢失数据</title>
    <url>/2021/05/25/test_3/</url>
    <content><![CDATA[<h1 id="处理丢失数据"><a href="#处理丢失数据" class="headerlink" title="处理丢失数据"></a>处理丢失数据</h1><p>1、原始数据中会存在缺失值（空值）<br>2、重复值<br>3、异常值  </p>
<ul>
<li>有两种丢失数据  <ul>
<li>None  </li>
<li>np.nan(NAN)</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">两种丢失数据的区别</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="literal">None</span>))   <span class="comment"># None对象类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(np.nan)) <span class="comment"># NAN浮点型</span></span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &#39;NoneType&#39;&gt;
&lt;class &#39;float&#39;&gt;
</code></pre>
<span id="more"></span>

<ul>
<li>为什么在数据分析中需要用到的是浮点类型的空而不是对象类型？  <ul>
<li>数据分析中会经常使用某些形式的运算来处理原始数据，如果原始数据中的空值为NAN形式，则不会干扰或者中断运算，NAN是可以参与运算的；  </li>
<li>None是不可以参与运算的  </li>
</ul>
</li>
<li>在pandas中如果遇到了None形式的空值则pandas会将其强转成NAN的形式。    </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(np.nan+<span class="number">1</span>) <span class="comment"># 输出结果仍为nan</span></span><br><span class="line"><span class="built_in">print</span>(<span class="literal">None</span>+<span class="number">1</span>)   <span class="comment"># 会出现编译错误</span></span><br></pre></td></tr></table></figure>

<pre><code>nan



---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&lt;ipython-input-49-e38e0a464830&gt; in &lt;module&gt;()
      1 print(np.nan+1) # 输出结果仍为nan
----&gt; 2 print(None+1)   # 会出现编译错误


TypeError: unsupported operand type(s) for +: &#39;NoneType&#39; and &#39;int&#39;
</code></pre>
<h1 id="pandas处理空值操作"><a href="#pandas处理空值操作" class="headerlink" title="pandas处理空值操作"></a>pandas处理空值操作</h1><ul>
<li>isnull</li>
<li>notnull</li>
<li>any</li>
<li>all</li>
<li>dropna</li>
<li>fillna</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> DataFrame,Series</span><br><span class="line"><span class="comment"># 创建一组含有空值的数据</span></span><br><span class="line">df = DataFrame(np.random.randint(<span class="number">0</span>,<span class="number">100</span>,size=(<span class="number">8</span>,<span class="number">6</span>)))</span><br><span class="line">df.iloc[<span class="number">2</span>,<span class="number">3</span>] = <span class="literal">None</span></span><br><span class="line">df.iloc[<span class="number">4</span>,<span class="number">4</span>] = np.nan</span><br><span class="line">df.iloc[<span class="number">5</span>,<span class="number">2</span>] = <span class="literal">None</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure>

<pre><code>    0   1     2     3     4   5
0  44  13  76.0  12.0  75.0  27
1   7  67  62.0  46.0  95.0  60
2  88  31   2.0   NaN  18.0  33
3  90   1  61.0  66.0  50.0  69
4  54  78  65.0  31.0   NaN  19
5  97   7   NaN  37.0  26.0  90
6  52  79   2.0  46.0   1.0  21
7   7  58  29.0  87.0   7.0  49
</code></pre>
<ul>
<li>方式1：对空值进行过滤（删除空值所在的行数据）<ul>
<li>isnull, notnull, any, all  <ul>
<li>isnull-&gt;any</li>
<li>notnull-&gt;all</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(df.isnull())</span><br><span class="line"><span class="comment"># 哪些行中存在true</span></span><br><span class="line"><span class="built_in">print</span>(df.isnull().<span class="built_in">any</span>(axis=<span class="number">1</span>)) <span class="comment"># any：用来检测行或列中是否存在True，若存在返回True否则返回False</span></span><br><span class="line"><span class="comment"># 将该Boolean值作为行索引，即可得到存在缺失值的行数据以及相应的行索引</span></span><br><span class="line"><span class="built_in">print</span>(df.loc[df.isnull().<span class="built_in">any</span>(axis=<span class="number">1</span>)])</span><br><span class="line">drop_index = df.loc[df.isnull().<span class="built_in">any</span>(axis=<span class="number">1</span>)].index  <span class="comment"># 将要删除的行索引</span></span><br><span class="line"><span class="built_in">print</span>(df.drop(labels=drop_index,axis=<span class="number">0</span>))</span><br></pre></td></tr></table></figure>

<pre><code>       0      1      2      3      4      5
0  False  False  False  False  False  False
1  False  False  False  False  False  False
2  False  False  False   True  False  False
3  False  False  False  False  False  False
4  False  False  False  False   True  False
5  False  False   True  False  False  False
6  False  False  False  False  False  False
7  False  False  False  False  False  False
0    False
1    False
2     True
3    False
4     True
5     True
6    False
7    False
dtype: bool
    0   1     2     3     4   5
2  88  31   2.0   NaN  18.0  33
4  54  78  65.0  31.0   NaN  19
5  97   7   NaN  37.0  26.0  90
    0   1     2     3     4   5
0  44  13  76.0  12.0  75.0  27
1   7  67  62.0  46.0  95.0  60
3  90   1  61.0  66.0  50.0  69
6  52  79   2.0  46.0   1.0  21
7   7  58  29.0  87.0   7.0  49
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(df.notnull())</span><br><span class="line"><span class="built_in">print</span>(df.notnull().<span class="built_in">all</span>(axis=<span class="number">1</span>)) <span class="comment"># all:用来检测行或列中是否存在False,如果全为True返回True否则返回False</span></span><br><span class="line"><span class="built_in">print</span>(df.loc[df.notnull().<span class="built_in">all</span>(axis=<span class="number">1</span>)]) <span class="comment"># 以True为索引即忽略了含有缺失值的行</span></span><br></pre></td></tr></table></figure>

<pre><code>      0     1      2      3      4     5
0  True  True   True   True   True  True
1  True  True   True   True   True  True
2  True  True   True  False   True  True
3  True  True   True   True   True  True
4  True  True   True   True  False  True
5  True  True  False   True   True  True
6  True  True   True   True   True  True
7  True  True   True   True   True  True
0     True
1     True
2    False
3     True
4    False
5    False
6     True
7     True
dtype: bool
    0   1     2     3     4   5
0  44  13  76.0  12.0  75.0  27
1   7  67  62.0  46.0  95.0  60
3  90   1  61.0  66.0  50.0  69
6  52  79   2.0  46.0   1.0  21
7   7  58  29.0  87.0   7.0  49
</code></pre>
<ul>
<li><p>方式2：</p>
<ul>
<li>dropna:可以直接将缺失的行或者列进行删除</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(df.dropna(axis=<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(df.dropna(axis=<span class="number">1</span>))</span><br></pre></td></tr></table></figure>

<pre><code>    0   1     2     3     4   5
0  44  13  76.0  12.0  75.0  27
1   7  67  62.0  46.0  95.0  60
3  90   1  61.0  66.0  50.0  69
6  52  79   2.0  46.0   1.0  21
7   7  58  29.0  87.0   7.0  49
    0   1   5
0  44  13  27
1   7  67  60
2  88  31  33
3  90   1  69
4  54  78  19
5  97   7  90
6  52  79  21
7   7  58  49
</code></pre>
<ul>
<li>对缺失值进行覆盖<ul>
<li>fillna</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(df.fillna(value=<span class="number">666</span>)) <span class="comment"># 使用设定值覆盖缺失值，但合理性不足意义不大</span></span><br><span class="line"><span class="built_in">print</span>(df.fillna(method=<span class="string">&#x27;ffill&#x27;</span>,axis=<span class="number">1</span>)) <span class="comment"># 一般采用缺失值周围临近的值去覆盖,ffill使用前值覆盖bfill使用后值覆盖，axis选择水平或垂直方向</span></span><br><span class="line"><span class="built_in">print</span>(df.fillna(method=<span class="string">&#x27;bfill&#x27;</span>,axis=<span class="number">0</span>)) <span class="comment"># 使用垂直方向的后值覆盖</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">但无论如何覆盖都不是最合理的，故一般选择删除而不选择覆盖，假如删除的成本太高（删除数据太多），才选择覆盖</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<pre><code>    0   1      2      3      4   5
0  44  13   76.0   12.0   75.0  27
1   7  67   62.0   46.0   95.0  60
2  88  31    2.0  666.0   18.0  33
3  90   1   61.0   66.0   50.0  69
4  54  78   65.0   31.0  666.0  19
5  97   7  666.0   37.0   26.0  90
6  52  79    2.0   46.0    1.0  21
7   7  58   29.0   87.0    7.0  49
      0     1     2     3     4     5
0  44.0  13.0  76.0  12.0  75.0  27.0
1   7.0  67.0  62.0  46.0  95.0  60.0
2  88.0  31.0   2.0   2.0  18.0  33.0
3  90.0   1.0  61.0  66.0  50.0  69.0
4  54.0  78.0  65.0  31.0  31.0  19.0
5  97.0   7.0   7.0  37.0  26.0  90.0
6  52.0  79.0   2.0  46.0   1.0  21.0
7   7.0  58.0  29.0  87.0   7.0  49.0
    0   1     2     3     4   5
0  44  13  76.0  12.0  75.0  27
1   7  67  62.0  46.0  95.0  60
2  88  31   2.0  66.0  18.0  33
3  90   1  61.0  66.0  50.0  69
4  54  78  65.0  31.0  26.0  19
5  97   7   2.0  37.0  26.0  90
6  52  79   2.0  46.0   1.0  21
7   7  58  29.0  87.0   7.0  49





&#39;\n但无论如何覆盖都不是最合理的，故一般选择删除而不选择覆盖，假如删除的成本太高（删除数据太多），才选择覆盖\n&#39;
</code></pre>
<h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><ul>
<li>数据说明：<ul>
<li>数据是一个冷库的温度数据，1-7对应7个温度采集设备，1分钟采集一次。</li>
</ul>
</li>
<li>数据处理目标：<ul>
<li>用1-4对应的4个必须设备，通过建立冷库的温度场关系模型，预估出5-7对应的数据。</li>
<li>最后每个冷库中仅需放置4个设备，取代放置7个设备。</li>
<li>f(1-4) –&gt; y(5-7)</li>
</ul>
</li>
<li>数据处理过程：<ul>
<li>1.原始数据中有丢帧现象，需要做预处理；</li>
<li>2.matplotlib绘图；</li>
<li>3.建立逻辑回归模型。</li>
</ul>
</li>
<li>无标准答案，按个人理解操作即可，请把自己的操作过程以文字形式简单描述。</li>
<li>测试数据为testData.xlsx</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df2 = pd.read_excel(<span class="string">&#x27;testData.xlsx&#x27;</span>,engine=<span class="string">&#x27;openpyxl&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(df2.head())</span><br><span class="line">df2 = df2[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line">df2.head()</span><br></pre></td></tr></table></figure>

<pre><code>                 time  none     1     2     3     4  none1     5     6     7
0 2019-01-27 17:00:00   NaN -24.8 -18.2 -20.8 -18.8    NaN   NaN   NaN   NaN
1 2019-01-27 17:01:00   NaN -23.5 -18.8 -20.5 -19.8    NaN -15.2 -14.5 -16.0
2 2019-01-27 17:02:00   NaN -23.2 -19.2   NaN   NaN    NaN -13.0   NaN -14.0
3 2019-01-27 17:03:00   NaN -22.8 -19.2 -20.0 -20.5    NaN   NaN -12.2  -9.8
4 2019-01-27 17:04:00   NaN -23.2 -18.5 -20.0 -18.8    NaN -10.2 -10.8  -8.8
C:\Users\86156\.conda\envs\DL\lib\site-packages\openpyxl\worksheet\_reader.py:312: UserWarning: Unknown extension is not supported and will be removed
  warn(msg)
</code></pre>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
      <th>4</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>-24.8</td>
      <td>-18.2</td>
      <td>-20.8</td>
      <td>-18.8</td>
    </tr>
    <tr>
      <th>1</th>
      <td>-23.5</td>
      <td>-18.8</td>
      <td>-20.5</td>
      <td>-19.8</td>
    </tr>
    <tr>
      <th>2</th>
      <td>-23.2</td>
      <td>-19.2</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>3</th>
      <td>-22.8</td>
      <td>-19.2</td>
      <td>-20.0</td>
      <td>-20.5</td>
    </tr>
    <tr>
      <th>4</th>
      <td>-23.2</td>
      <td>-18.5</td>
      <td>-20.0</td>
      <td>-18.8</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可将空值对应的行数据删除</span></span><br><span class="line"><span class="built_in">print</span>(df2.dropna(axis=<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(df2.notnull().<span class="built_in">all</span>(axis=<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(df2.loc[df2.notnull().<span class="built_in">all</span>(axis=<span class="number">1</span>)])</span><br></pre></td></tr></table></figure>

<pre><code>         1     2     3     4
0    -24.8 -18.2 -20.8 -18.8
1    -23.5 -18.8 -20.5 -19.8
3    -22.8 -19.2 -20.0 -20.5
4    -23.2 -18.5 -20.0 -18.8
7    -24.8 -18.0 -17.5 -17.2
...    ...   ...   ...   ...
1055 -26.2 -27.2 -28.8 -27.5
1056 -26.8 -27.5 -29.0 -27.8
1057 -27.2 -27.8 -29.0 -28.0
1058 -27.5 -27.0 -29.0 -28.0
1059 -27.0 -27.2 -29.0 -27.8

[982 rows x 4 columns]
0        True
1        True
2       False
3        True
4        True
        ...  
1055     True
1056     True
1057     True
1058     True
1059     True
Length: 1060, dtype: bool
         1     2     3     4
0    -24.8 -18.2 -20.8 -18.8
1    -23.5 -18.8 -20.5 -19.8
3    -22.8 -19.2 -20.0 -20.5
4    -23.2 -18.5 -20.0 -18.8
7    -24.8 -18.0 -17.5 -17.2
...    ...   ...   ...   ...
1055 -26.2 -27.2 -28.8 -27.5
1056 -26.8 -27.5 -29.0 -27.8
1057 -27.2 -27.8 -29.0 -28.0
1058 -27.5 -27.0 -29.0 -28.0
1059 -27.0 -27.2 -29.0 -27.8

[982 rows x 4 columns]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 填充空值</span></span><br><span class="line">data = df2.fillna(method=<span class="string">&#x27;ffill&#x27;</span>,axis=<span class="number">0</span>).fillna(method=<span class="string">&#x27;bfill&#x27;</span>,axis=<span class="number">0</span>)  <span class="comment"># 前部填充一次再候补填充一次确保开头和结尾没有缺失值</span></span><br><span class="line"><span class="built_in">print</span>(data.isnull().<span class="built_in">any</span>(axis=<span class="number">0</span>))    <span class="comment"># 检测下是否填充完整，any检查是否有True，此处4列中均无True故返回False</span></span><br></pre></td></tr></table></figure>

<pre><code>1    False
2    False
3    False
4    False
dtype: bool
</code></pre>
<h1 id="处理重复数据"><a href="#处理重复数据" class="headerlink" title="处理重复数据"></a>处理重复数据</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成一组带有重复数据的数据源</span></span><br><span class="line">df3 = DataFrame(np.random.randint(<span class="number">0</span>,<span class="number">100</span>,size=(<span class="number">8</span>,<span class="number">4</span>)))</span><br><span class="line">df3.iloc[<span class="number">2</span>] = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">df3.iloc[<span class="number">5</span>] = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(df3)</span><br></pre></td></tr></table></figure>

<pre><code>    0   1   2   3
0  77  77  99  27
1  70  38  58  77
2   0   0   0   0
3  93  73  10   8
4  66  45  98  29
5   0   0   0   0
6  14  40  61  81
7  67  10  92  42
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用drop_duplicates</span></span><br><span class="line"><span class="built_in">print</span>(df3.drop_duplicates(keep=<span class="string">&#x27;first&#x27;</span>))    <span class="comment"># keep为保留第几条重复数据，也可使用last保留最后一条</span></span><br><span class="line"><span class="built_in">print</span>(df3.drop_duplicates(keep=<span class="literal">False</span>))    <span class="comment"># keep=False,删除所有重复数据</span></span><br></pre></td></tr></table></figure>

<pre><code>    0   1   2   3
0  77  77  99  27
1  70  38  58  77
2   0   0   0   0
3  93  73  10   8
4  66  45  98  29
6  14  40  61  81
7  67  10  92  42
    0   1   2   3
0  77  77  99  27
1  70  38  58  77
3  93  73  10   8
4  66  45  98  29
6  14  40  61  81
7  67  10  92  42
</code></pre>
<h1 id="处理异常数据"><a href="#处理异常数据" class="headerlink" title="处理异常数据"></a>处理异常数据</h1><ul>
<li>自定义一个1000行3列(A,B,C)取值范围为0-1的数据源，然后将C列中的值大于其两倍标准差的异常值进行清洗</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df4 = DataFrame(np.random.random(size=(<span class="number">1000</span>,<span class="number">3</span>)),columns=[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df4)</span><br><span class="line"><span class="comment"># 判定异常值的条件</span></span><br><span class="line">twice_std = df4[<span class="string">&#x27;C&#x27;</span>].std() * <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(df4[<span class="string">&#x27;C&#x27;</span>] &gt; twice_std)  <span class="comment"># 此时True为异常值</span></span><br><span class="line"><span class="built_in">print</span>(~(df4[<span class="string">&#x27;C&#x27;</span>] &gt; twice_std))   <span class="comment"># 对其取反则False为异常值，使用True作为索引即可保留正常值</span></span><br><span class="line"><span class="built_in">print</span>(df4.loc[~(df4[<span class="string">&#x27;C&#x27;</span>] &gt; twice_std)])</span><br></pre></td></tr></table></figure>

<pre><code>            A         B         C
0    0.215693  0.959250  0.528953
1    0.136710  0.114971  0.941449
2    0.295452  0.295154  0.238188
3    0.187619  0.066753  0.999018
4    0.398977  0.446377  0.432628
..        ...       ...       ...
995  0.908120  0.968931  0.765458
996  0.649668  0.783493  0.058060
997  0.605072  0.751010  0.243683
998  0.304012  0.571452  0.004855
999  0.364485  0.937335  0.601111

[1000 rows x 3 columns]
0      False
1       True
2      False
3       True
4      False
       ...  
995     True
996    False
997    False
998    False
999     True
Name: C, Length: 1000, dtype: bool
0       True
1      False
2       True
3      False
4       True
       ...  
995    False
996     True
997     True
998     True
999    False
Name: C, Length: 1000, dtype: bool
            A         B         C
0    0.215693  0.959250  0.528953
2    0.295452  0.295154  0.238188
4    0.398977  0.446377  0.432628
5    0.402174  0.704057  0.327663
6    0.938079  0.919880  0.308305
..        ...       ...       ...
992  0.693904  0.050679  0.171809
994  0.663767  0.883826  0.119215
996  0.649668  0.783493  0.058060
997  0.605072  0.751010  0.243683
998  0.304012  0.571452  0.004855

[574 rows x 3 columns]
</code></pre>
<hr>
<p>本文提及的数据集下载地址：<br>链接：<a href="https://pan.baidu.com/s/1lhAiSXBw47MK9QdqwA05Lg">https://pan.baidu.com/s/1lhAiSXBw47MK9QdqwA05Lg</a><br>提取码：1111 </p>
<hr>
]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>级联操作</title>
    <url>/2021/05/25/test_4/</url>
    <content><![CDATA[<h1 id="级联操作"><a href="#级联操作" class="headerlink" title="级联操作"></a>级联操作</h1><ul>
<li>pd.concat,pd.append<br>pandas使用pd.concat函数，与np.concatenate函数类似，只是多了一些参数：<br>objs<br>axis<br>keys<br>join=’outer’/‘inner’：表示的是级联方式，outer会将所有的项进行级联（忽略匹配和不匹配），而inner只会将匹配的项级联在一起，不匹配的不级联<br>ignore_index=False</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> DataFrame</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<ul>
<li>匹配级联</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1 = DataFrame(np.random.randint(<span class="number">0</span>,<span class="number">100</span>,size=(<span class="number">5</span>,<span class="number">3</span>)),columns=[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>])</span><br><span class="line">df2 = DataFrame(np.random.randint(<span class="number">0</span>,<span class="number">100</span>,size=(<span class="number">5</span>,<span class="number">3</span>)),columns=[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;C&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"><span class="built_in">print</span>(df2)</span><br></pre></td></tr></table></figure>

<pre><code>    A   B   C
0  79  32  25
1  25  25  37
2  10  83  72
3   0  48   3
4  59  31  86
    A   D   C
0  35  54  59
1   5   7  76
2  76  82  89
3  17  93  46
4  99  56   8
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(pd.concat((df1,df2),axis=<span class="number">1</span>))  <span class="comment"># 横向级联</span></span><br></pre></td></tr></table></figure>

<pre><code>    A   B   C   A   D   C
0  79  32  25  35  54  59
1  25  25  37   5   7  76
2  10  83  72  76  82  89
3   0  48   3  17  93  46
4  59  31  86  99  56   8
</code></pre>
<ul>
<li>不匹配级联<ul>
<li>不匹配级联指的是级联的维度索引不一致。例如纵向级联时列索引不一致，横向级联时行索引不一致</li>
<li>有2中连接方式：<ul>
<li>外连接：补NAN（默认模式），如果想要保留数据的完整性必须使用outer(外连接)</li>
<li>内连接：只连接匹配的项</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(pd.concat((df1,df2),axis=<span class="number">0</span>))  <span class="comment"># 纵向级联，出现不匹配级联</span></span><br><span class="line"><span class="built_in">print</span>(pd.concat((df1,df2),axis=<span class="number">0</span>,join=<span class="string">&#x27;inner&#x27;</span>))</span><br></pre></td></tr></table></figure>

<pre><code>    A     B   C     D
0  79  32.0  25   NaN
1  25  25.0  37   NaN
2  10  83.0  72   NaN
3   0  48.0   3   NaN
4  59  31.0  86   NaN
0  35   NaN  59  54.0
1   5   NaN  76   7.0
2  76   NaN  89  82.0
3  17   NaN  46  93.0
4  99   NaN   8  56.0
    A   C
0  79  25
1  25  37
2  10  72
3   0   3
4  59  86
0  35  59
1   5  76
2  76  89
3  17  46
4  99   8
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df3 = DataFrame(np.random.randint(<span class="number">0</span>,<span class="number">100</span>,size=(<span class="number">5</span>,<span class="number">2</span>)),columns=[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(pd.concat((df1,df3),axis=<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(pd.concat((df1,df3),axis=<span class="number">0</span>))</span><br></pre></td></tr></table></figure>

<ul>
<li>append函数的使用<ul>
<li>默认纵向级联外连接</li>
<li>知道即可，一般不用</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(df1.append(df2))</span><br></pre></td></tr></table></figure>

<pre><code>    A     B   C     D
0  79  32.0  25   NaN
1  25  25.0  37   NaN
2  10  83.0  72   NaN
3   0  48.0   3   NaN
4  59  31.0  86   NaN
0  35   NaN  59  54.0
1   5   NaN  76   7.0
2  76   NaN  89  82.0
3  17   NaN  46  93.0
4  99   NaN   8  56.0
</code></pre>
<h1 id="合并操作"><a href="#合并操作" class="headerlink" title="合并操作"></a>合并操作</h1><ul>
<li>merge与concat的区别在于，merge需要依据某一共同列来进行合并；merge是对数据进行合并，而concat是对表格进行级联</li>
<li>使用pd.merge()合并时，会自动根据两者相同column名称的那一列，作为key来进行合并</li>
<li>注意每一列元素的顺序不要求一致</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一对一合并</span></span><br><span class="line">df1 = DataFrame(&#123;<span class="string">&#x27;employee&#x27;</span>:[<span class="string">&#x27;Bob&#x27;</span>,<span class="string">&#x27;Jake&#x27;</span>,<span class="string">&#x27;Lisa&#x27;</span>],<span class="string">&#x27;group&#x27;</span>:[<span class="string">&#x27;Accounting&#x27;</span>,<span class="string">&#x27;Engineering&#x27;</span>,<span class="string">&#x27;Engineering&#x27;</span>]&#125;)</span><br><span class="line">df2 = DataFrame(&#123;<span class="string">&#x27;employee&#x27;</span>:[<span class="string">&#x27;Lisa&#x27;</span>,<span class="string">&#x27;Bob&#x27;</span>,<span class="string">&#x27;Jake&#x27;</span>],<span class="string">&#x27;hire_date&#x27;</span>:[<span class="number">2004</span>,<span class="number">2008</span>,<span class="number">2012</span>]&#125;)</span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"><span class="built_in">print</span>(df2)</span><br><span class="line"><span class="built_in">print</span>(pd.merge(df1,df2,on=<span class="string">&#x27;employee&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(pd.merge(df1,df2))    <span class="comment"># on也可以不写，默认会将两表中共有的列作为合并条件，此处结果相同</span></span><br></pre></td></tr></table></figure>

<pre><code>  employee        group
0      Bob   Accounting
1     Jake  Engineering
2     Lisa  Engineering
  employee  hire_date
0     Lisa       2004
1      Bob       2008
2     Jake       2012
  employee        group  hire_date
0      Bob   Accounting       2008
1     Jake  Engineering       2012
2     Lisa  Engineering       2004
  employee        group  hire_date
0      Bob   Accounting       2008
1     Jake  Engineering       2012
2     Lisa  Engineering       2004
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一对多合并</span></span><br><span class="line">df3 = DataFrame(&#123;<span class="string">&#x27;employee&#x27;</span>:[<span class="string">&#x27;Lisa&#x27;</span>,<span class="string">&#x27;Jake&#x27;</span>],<span class="string">&#x27;group&#x27;</span>:[<span class="string">&#x27;Accounting&#x27;</span>,<span class="string">&#x27;Engineering&#x27;</span>],<span class="string">&#x27;hire_date&#x27;</span>:[<span class="number">2004</span>,<span class="number">2016</span>]&#125;)</span><br><span class="line">df4 = DataFrame(&#123;<span class="string">&#x27;group&#x27;</span>:[<span class="string">&#x27;Accounting&#x27;</span>,<span class="string">&#x27;Engineering&#x27;</span>,<span class="string">&#x27;Engineering&#x27;</span>],<span class="string">&#x27;supervisor&#x27;</span>:[<span class="string">&#x27;Carly&#x27;</span>,<span class="string">&#x27;Guido&#x27;</span>,<span class="string">&#x27;Steve&#x27;</span>]&#125;)</span><br><span class="line"><span class="built_in">print</span>(df3)</span><br><span class="line"><span class="built_in">print</span>(df4)</span><br><span class="line"><span class="built_in">print</span>(pd.merge(df3,df4))</span><br></pre></td></tr></table></figure>

<pre><code>  employee        group  hire_date
0     Lisa   Accounting       2004
1     Jake  Engineering       2016
         group supervisor
0   Accounting      Carly
1  Engineering      Guido
2  Engineering      Steve
  employee        group  hire_date supervisor
0     Lisa   Accounting       2004      Carly
1     Jake  Engineering       2016      Guido
2     Jake  Engineering       2016      Steve
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 多对多合并</span></span><br><span class="line">df5 = DataFrame(&#123;<span class="string">&#x27;group&#x27;</span>:[<span class="string">&#x27;Engineering&#x27;</span>,<span class="string">&#x27;Engineering&#x27;</span>,<span class="string">&#x27;HR&#x27;</span>],<span class="string">&#x27;supervisor&#x27;</span>:[<span class="string">&#x27;Carly&#x27;</span>,<span class="string">&#x27;Guido&#x27;</span>,<span class="string">&#x27;Steve&#x27;</span>]&#125;)</span><br><span class="line"><span class="built_in">print</span>(df5)</span><br><span class="line"><span class="built_in">print</span>(pd.merge(df1,df5))    <span class="comment"># 默认内连接</span></span><br><span class="line"><span class="built_in">print</span>(pd.merge(df1,df5,how=<span class="string">&#x27;outer&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(pd.merge(df1,df5,how=<span class="string">&#x27;left&#x27;</span>)) <span class="comment"># 保留左连接</span></span><br><span class="line"><span class="built_in">print</span>(pd.merge(df1,df5,how=<span class="string">&#x27;right&#x27;</span>))    <span class="comment"># 保留右连接</span></span><br></pre></td></tr></table></figure>

<pre><code>         group supervisor
0  Engineering      Carly
1  Engineering      Guido
2           HR      Steve
  employee        group supervisor
0     Jake  Engineering      Carly
1     Jake  Engineering      Guido
2     Lisa  Engineering      Carly
3     Lisa  Engineering      Guido
  employee        group supervisor
0      Bob   Accounting        NaN
1     Jake  Engineering      Carly
2     Jake  Engineering      Guido
3     Lisa  Engineering      Carly
4     Lisa  Engineering      Guido
5      NaN           HR      Steve
  employee        group supervisor
0      Bob   Accounting        NaN
1     Jake  Engineering      Carly
2     Jake  Engineering      Guido
3     Lisa  Engineering      Carly
4     Lisa  Engineering      Guido
  employee        group supervisor
0     Jake  Engineering      Carly
1     Lisa  Engineering      Carly
2     Jake  Engineering      Guido
3     Lisa  Engineering      Guido
4      NaN           HR      Steve
</code></pre>
<h2 id="key的规范化"><a href="#key的规范化" class="headerlink" title="key的规范化"></a>key的规范化</h2><ul>
<li>当列冲突时，即有多个列名称相同时需要使用on=来指定哪一个列作为Key,配合suffixes指定冲突列名</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1 = DataFrame(&#123;<span class="string">&#x27;employee&#x27;</span>:[<span class="string">&#x27;Jack&#x27;</span>,<span class="string">&#x27;Summer&#x27;</span>,<span class="string">&#x27;Steve&#x27;</span>],<span class="string">&#x27;group&#x27;</span>:[<span class="string">&#x27;Accounting&#x27;</span>,<span class="string">&#x27;Finance&#x27;</span>,<span class="string">&#x27;Marketing&#x27;</span>]&#125;)</span><br><span class="line">df2 = DataFrame(&#123;<span class="string">&#x27;employee&#x27;</span>:[<span class="string">&#x27;Jack&#x27;</span>,<span class="string">&#x27;Bob&#x27;</span>,<span class="string">&#x27;Jake&#x27;</span>],<span class="string">&#x27;hire_date&#x27;</span>:[<span class="number">2003</span>,<span class="number">2009</span>,<span class="number">2012</span>],<span class="string">&#x27;group&#x27;</span>:[<span class="string">&#x27;Accounting&#x27;</span>,<span class="string">&#x27;Sell&#x27;</span>,<span class="string">&#x27;CEO&#x27;</span>]&#125;)</span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"><span class="built_in">print</span>(df2)</span><br><span class="line"><span class="built_in">print</span>(pd.merge(df1,df2))    <span class="comment"># 不指定合并条件则相同的几项共同作为合并条件</span></span><br><span class="line"><span class="built_in">print</span>(pd.merge(df1,df2,on=<span class="string">&#x27;group&#x27;</span>))</span><br></pre></td></tr></table></figure>

<pre><code>  employee       group
0     Jack  Accounting
1   Summer     Finance
2    Steve   Marketing
  employee  hire_date       group
0     Jack       2003  Accounting
1      Bob       2009        Sell
2     Jake       2012         CEO
  employee       group  hire_date
0     Jack  Accounting       2003
  employee_x       group employee_y  hire_date
0       Jack  Accounting       Jack       2003
</code></pre>
<ul>
<li>当两张表没有可进行连接的列时，可使用left_on和right_on手动指定merge中左右两边的哪一列作为连接的列</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1 = DataFrame(&#123;<span class="string">&#x27;employee&#x27;</span>:[<span class="string">&#x27;Bobs&#x27;</span>,<span class="string">&#x27;Linda&#x27;</span>,<span class="string">&#x27;Bill&#x27;</span>],<span class="string">&#x27;group&#x27;</span>:[<span class="string">&#x27;Accounting&#x27;</span>,<span class="string">&#x27;Product&#x27;</span>,<span class="string">&#x27;Marketing&#x27;</span>],<span class="string">&#x27;hire_date&#x27;</span>:[<span class="number">1998</span>,<span class="number">2017</span>,<span class="number">2018</span>]&#125;)</span><br><span class="line">df5 = DataFrame(&#123;<span class="string">&#x27;name&#x27;</span>:[<span class="string">&#x27;Lisa&#x27;</span>,<span class="string">&#x27;Bobs&#x27;</span>,<span class="string">&#x27;Bill&#x27;</span>],<span class="string">&#x27;hire_dates&#x27;</span>:[<span class="number">1998</span>,<span class="number">2016</span>,<span class="number">2007</span>]&#125;)</span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"><span class="built_in">print</span>(df5)</span><br><span class="line"><span class="comment"># print(pd.merge(df1,df5))  # 此处合并出错，因为没有共同的列，需要指定左右标准</span></span><br><span class="line"><span class="built_in">print</span>(pd.merge(df1,df5,left_on=<span class="string">&#x27;employee&#x27;</span>,right_on=<span class="string">&#x27;name&#x27;</span>))</span><br></pre></td></tr></table></figure>

<pre><code>  employee       group  hire_date
0     Bobs  Accounting       1998
1    Linda     Product       2017
2     Bill   Marketing       2018
   name  hire_dates
0  Lisa        1998
1  Bobs        2016
2  Bill        2007
  employee       group  hire_date  name  hire_dates
0     Bobs  Accounting       1998  Bobs        2016
1     Bill   Marketing       2018  Bill        2007
</code></pre>
]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>绘图 matplotlib</title>
    <url>/2021/05/27/test_8/</url>
    <content><![CDATA[<h2 id="plt-plot-绘制线性图"><a href="#plt-plot-绘制线性图" class="headerlink" title="plt.plot()绘制线性图"></a>plt.plot()绘制线性图</h2><ul>
<li>绘制单条线形图</li>
<li>绘制多条线形图</li>
<li>设置坐标系的比例</li>
<li>设置图例legend()</li>
<li>设置轴的标识</li>
<li>图例保存</li>
<li>曲线的样式和风格</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 绘制单条线形图</span></span><br><span class="line">x = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">y = x + <span class="number">3</span></span><br><span class="line">plt.plot(x,y)</span><br></pre></td></tr></table></figure>

<span id="more"></span>


<pre><code>[&lt;matplotlib.lines.Line2D at 0x1d441b225f8&gt;]
</code></pre>
<p><img src="https://wx3.sinaimg.cn/large/006nxkHvly1gqwv7alh4qj30ac06waa1.jpg"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 绘制多条线形图</span></span><br><span class="line">plt.plot(x,y)</span><br><span class="line">plt.plot(x+<span class="number">1</span>,y-<span class="number">2</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&lt;matplotlib.lines.Line2D at 0x1d4419feb38&gt;]
</code></pre>
<p><img src="https://wx1.sinaimg.cn/large/006nxkHvly1gqwv7aju1rj30a206wdft.jpg"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.plot(x,y,x+<span class="number">1</span>,y-<span class="number">2</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&lt;matplotlib.lines.Line2D at 0x1d441abb2b0&gt;,
 &lt;matplotlib.lines.Line2D at 0x1d441abb3c8&gt;]
</code></pre>
<p><img src="https://wx2.sinaimg.cn/mw1024/006nxkHvly1gqwv7ak3j3j60a206wdft02.jpg"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置坐标系的比例plt.figure(figsize=(a,b))</span></span><br><span class="line">plt.figure(figsize=(<span class="number">5</span>,<span class="number">9</span>))   <span class="comment"># 放置在绘图的plot方法之前</span></span><br><span class="line">plt.plot(x,y)</span><br></pre></td></tr></table></figure>




<pre><code>[&lt;matplotlib.lines.Line2D at 0x1d441beef98&gt;]
</code></pre>
<p><img src="https://wx2.sinaimg.cn/mw1024/006nxkHvly1gqwv7ajs7xj308s0egglo.jpg"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置图例legend()</span></span><br><span class="line">plt.plot(x,y,label=<span class="string">&#x27;x,y&#x27;</span>)</span><br><span class="line">plt.plot(x+<span class="number">1</span>,y-<span class="number">2</span>,label=<span class="string">&#x27;x+1,y-2&#x27;</span>)</span><br><span class="line">plt.legend()    <span class="comment"># 图例生效</span></span><br></pre></td></tr></table></figure>




<pre><code>&lt;matplotlib.legend.Legend at 0x1d441c6f780&gt;
</code></pre>
<p><img src="https://wx3.sinaimg.cn/mw1024/006nxkHvly1gqwv7ajyhrj30a206wdfu.jpg"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置轴的标识</span></span><br><span class="line">plt.plot(x,y)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;temp&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;dist&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;dist&amp;temp&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>Text(0.5, 1.0, &#39;dist&amp;temp&#39;)
</code></pre>
<p><img src="https://wx2.sinaimg.cn/mw1024/006nxkHvly1gqwv7ajvjvj30aq07qwei.jpg"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 图例保存</span></span><br><span class="line">fig = plt.figure()  <span class="comment"># 该对象的创建一定要放置在plot绘图之前</span></span><br><span class="line">plt.plot(x,y,label=<span class="string">&#x27;x,y&#x27;</span>)</span><br><span class="line">fig.savefig(<span class="string">&#x27;./123.png&#x27;</span>)</span><br></pre></td></tr></table></figure>


<p><img src="https://wx3.sinaimg.cn/mw1024/006nxkHvly1gqwv7altruj30ac06waa1.jpg"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 曲线的样式和风格资料很多，相关参数设置可自行查询按需更改</span></span><br><span class="line">plt.plot(x,y,c=<span class="string">&#x27;red&#x27;</span>,alpha=<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&lt;matplotlib.lines.Line2D at 0x1d441dc6eb8&gt;]
</code></pre>
<p><img src="https://wx4.sinaimg.cn/mw1024/006nxkHvly1gqwv7an46bj30ac06w0so.jpg"></p>
<h2 id="柱状图：plt-bar"><a href="#柱状图：plt-bar" class="headerlink" title="柱状图：plt.bar()"></a>柱状图：plt.bar()</h2><ul>
<li>参数：第一个参数是索引。第二个参数是数据值。第三个参数是条形的宽度</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.bar(x,y)</span><br></pre></td></tr></table></figure>




<pre><code>&lt;BarContainer object of 5 artists&gt;
</code></pre>
<p><img src="https://wx3.sinaimg.cn/mw1024/006nxkHvly1gqwv7ap9zxj30a206w3yb.jpg"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.barh(x,y)</span><br></pre></td></tr></table></figure>




<pre><code>&lt;BarContainer object of 5 artists&gt;
</code></pre>
<p><img src="https://wx2.sinaimg.cn/mw690/006nxkHvly1gqwv7ky9fhj30a206w0sj.jpg"></p>
<h2 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h2><ul>
<li>是一个特殊的柱状图，又叫做密度图</li>
<li>plt.hist()的参数<ul>
<li>bins<br>可以是一个bin数量的整数值，也可以是表示bin的一个序列。默认值为10</li>
<li>normed<br>如果值为True，直方图的值将进行归一化处理，形成概率密度，默认值为False</li>
<li>color<br>指定直方图的颜色。可以是单一颜色值或颜色的序列。如果指定了多个数据集合,例如DataFrame对象，颜色序列将会设置为相同的顺序。如果未指定，将会使用一个默认的线条颜色</li>
<li>orientation<br>通过设置orientation为horizontal创建水平直方图。默认值为vertical</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>]</span><br><span class="line">plt.hist(data,bins=<span class="number">20</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(array([1., 0., 2., 0., 3., 0., 1., 0., 1., 0., 0., 1., 0., 6., 0., 1., 0.,
        1., 0., 1.]),
 array([0.  , 0.45, 0.9 , 1.35, 1.8 , 2.25, 2.7 , 3.15, 3.6 , 4.05, 4.5 ,
        4.95, 5.4 , 5.85, 6.3 , 6.75, 7.2 , 7.65, 8.1 , 8.55, 9.  ]),
 &lt;a list of 20 Patch objects&gt;)
</code></pre>
<p><img src="https://wx4.sinaimg.cn/mw690/006nxkHvly1gqwv7kxaxzj30a206wt8i.jpg"></p>
<h2 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h2><ul>
<li>pie()，饼图也只有一个参数x</li>
<li>饼图适合展示各部分占总体的比例，条形图适合比较各部分的大小</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr=[<span class="number">11</span>,<span class="number">22</span>,<span class="number">31</span>,<span class="number">15</span>]</span><br><span class="line">plt.pie(arr)</span><br></pre></td></tr></table></figure>




<pre><code>([&lt;matplotlib.patches.Wedge at 0x1d441a7bb00&gt;,
  &lt;matplotlib.patches.Wedge at 0x1d441aefef0&gt;,
  &lt;matplotlib.patches.Wedge at 0x1d441aef8d0&gt;,
  &lt;matplotlib.patches.Wedge at 0x1d441abbdd8&gt;],
 [Text(0.9964244374501308, 0.46598105160209097, &#39;&#39;),
  Text(-0.19579764419425466, 1.0824339622018426, &#39;&#39;),
  Text(-0.830021124093439, -0.7218482759961848, &#39;&#39;),
  Text(0.9100343885615038, -0.617929940717789, &#39;&#39;)])
</code></pre>
<p><img src="https://wx1.sinaimg.cn/mw690/006nxkHvly1gqwv7kxnp0j306f06f746.jpg"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr=[<span class="number">0.2</span>,<span class="number">0.3</span>,<span class="number">0.1</span>]</span><br><span class="line">plt.pie(arr)</span><br></pre></td></tr></table></figure>




<pre><code>([&lt;matplotlib.patches.Wedge at 0x1d441b6fdd8&gt;,
  &lt;matplotlib.patches.Wedge at 0x1d441a72630&gt;,
  &lt;matplotlib.patches.Wedge at 0x1d441c0e5c0&gt;],
 [Text(0.8899186877588753, 0.6465637858537406, &#39;&#39;),
  Text(-0.64656382751384, 0.8899186574910392, &#39;&#39;),
  Text(-1.0461621345079049, -0.3399187966586502, &#39;&#39;)])
</code></pre>
<p><img src="https://wx1.sinaimg.cn/mw690/006nxkHvly1gqwv7ky8nyj306f06fweb.jpg"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr=[<span class="number">11</span>,<span class="number">22</span>,<span class="number">31</span>,<span class="number">15</span>]</span><br><span class="line">plt.pie(arr,labels=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])</span><br></pre></td></tr></table></figure>




<pre><code>([&lt;matplotlib.patches.Wedge at 0x1d441d3a4a8&gt;,
  &lt;matplotlib.patches.Wedge at 0x1d441cd02e8&gt;,
  &lt;matplotlib.patches.Wedge at 0x1d441d24748&gt;,
  &lt;matplotlib.patches.Wedge at 0x1d441d24b00&gt;],
 [Text(0.9964244374501308, 0.46598105160209097, &#39;a&#39;),
  Text(-0.19579764419425466, 1.0824339622018426, &#39;b&#39;),
  Text(-0.830021124093439, -0.7218482759961848, &#39;c&#39;),
  Text(0.9100343885615038, -0.617929940717789, &#39;d&#39;)])
</code></pre>
<p><img src="https://wx3.sinaimg.cn/mw690/006nxkHvly1gqwv7kykdxj306f06fgli.jpg"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr=[<span class="number">11</span>,<span class="number">22</span>,<span class="number">31</span>,<span class="number">15</span>]</span><br><span class="line">plt.pie(arr,labels=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>],labeldistance=<span class="number">0.3</span>)</span><br></pre></td></tr></table></figure>




<pre><code>([&lt;matplotlib.patches.Wedge at 0x1d441e3ebe0&gt;,
  &lt;matplotlib.patches.Wedge at 0x1d441f0a588&gt;,
  &lt;matplotlib.patches.Wedge at 0x1d441f0aa90&gt;,
  &lt;matplotlib.patches.Wedge at 0x1d441e782e8&gt;],
 [Text(0.2717521193045811, 0.1270857413460248, &#39;a&#39;),
  Text(-0.05339935750752399, 0.29520926241868434, &#39;b&#39;),
  Text(-0.2263693974800288, -0.1968677116353231, &#39;c&#39;),
  Text(0.24819119688041008, -0.16852634746848788, &#39;d&#39;)])
</code></pre>
<p><img src="https://wx3.sinaimg.cn/mw690/006nxkHvly1gqwv7ky77nj306f06fq2u.jpg"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr=[<span class="number">11</span>,<span class="number">22</span>,<span class="number">31</span>,<span class="number">15</span>]</span><br><span class="line">plt.pie(arr,labels=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>],labeldistance=<span class="number">0.3</span>,autopct=<span class="string">&#x27;%.6f%%&#x27;</span>)</span><br></pre></td></tr></table></figure>




<pre><code>([&lt;matplotlib.patches.Wedge at 0x1d44201f908&gt;,
  &lt;matplotlib.patches.Wedge at 0x1d44202f0b8&gt;,
  &lt;matplotlib.patches.Wedge at 0x1d44202f7f0&gt;,
  &lt;matplotlib.patches.Wedge at 0x1d44202ff28&gt;],
 [Text(0.2717521193045811, 0.1270857413460248, &#39;a&#39;),
  Text(-0.05339935750752399, 0.29520926241868434, &#39;b&#39;),
  Text(-0.2263693974800288, -0.1968677116353231, &#39;c&#39;),
  Text(0.24819119688041008, -0.16852634746848788, &#39;d&#39;)],
 [Text(0.5435042386091622, 0.2541714826920496, &#39;13.924050%&#39;),
  Text(-0.10679871501504798, 0.5904185248373687, &#39;27.848101%&#39;),
  Text(-0.4527387949600576, -0.3937354232706462, &#39;39.240506%&#39;),
  Text(0.49638239376082016, -0.33705269493697576, &#39;18.987341%&#39;)])
</code></pre>
<p><img src="https://wx2.sinaimg.cn/mw690/006nxkHvly1gqwv7l5ghxj306f06faa3.jpg"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr=[<span class="number">11</span>,<span class="number">22</span>,<span class="number">31</span>,<span class="number">15</span>]</span><br><span class="line">plt.pie(arr,labels=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>],labeldistance=<span class="number">0.3</span>,shadow=<span class="literal">True</span>,explode=[<span class="number">0.2</span>,<span class="number">0.3</span>,<span class="number">0.2</span>,<span class="number">0.4</span>])</span><br></pre></td></tr></table></figure>




<pre><code>([&lt;matplotlib.patches.Wedge at 0x1d44207b278&gt;,
  &lt;matplotlib.patches.Wedge at 0x1d44207ba58&gt;,
  &lt;matplotlib.patches.Wedge at 0x1d442089240&gt;,
  &lt;matplotlib.patches.Wedge at 0x1d4420899e8&gt;],
 [Text(0.4529201988409685, 0.21180956891004132, &#39;a&#39;),
  Text(-0.10679871501504798, 0.5904185248373687, &#39;b&#39;),
  Text(-0.37728232913338133, -0.32811285272553853, &#39;c&#39;),
  Text(0.579112792720957, -0.3932281440931384, &#39;d&#39;)])
</code></pre>
<p><img src="https://wx1.sinaimg.cn/mw690/006nxkHvly1gqwv7l0dqhj306m06k0ss.jpg"></p>
<h2 id="散点图scatter"><a href="#散点图scatter" class="headerlink" title="散点图scatter()"></a>散点图scatter()</h2><ul>
<li>因变量随自变量而变化的大致趋势</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.array([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>])</span><br><span class="line">y = x ** <span class="number">2</span> - <span class="number">3</span></span><br><span class="line">plt.scatter(x,y)</span><br></pre></td></tr></table></figure>




<pre><code>&lt;matplotlib.collections.PathCollection at 0x1d4420c7ba8&gt;
</code></pre>
<p><img src="https://wx1.sinaimg.cn/mw690/006nxkHvly1gqwv7l16z4j30a806wmx0.jpg"></p>
]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>人口分析案例</title>
    <url>/2021/05/25/test_5/</url>
    <content><![CDATA[<h1 id="人口分析案例"><a href="#人口分析案例" class="headerlink" title="人口分析案例"></a>人口分析案例</h1><ul>
<li>需求：<ul>
<li>导入文件，查看原始数据</li>
<li>将人口数据和各州的简称数据进行合并</li>
<li>将合并的数据中重复的abbreviation列进行删除</li>
<li>查看存在缺失数据的列</li>
<li>找到有哪些state/region使得state的值为NaN，进行去重操作</li>
<li>为找到的这些state/region的state项补上正确的值，从而去除掉state这一列的所有NaN</li>
<li>合并各州面积数据areas</li>
<li>我们会发现area(sq.mi)这一列有缺失数据，找出是哪些行</li>
<li>去除含有缺失数据的行</li>
<li>找出2010年的全民人口数据</li>
<li>计算各州的人口密度</li>
<li>排序，并找出人口密度最高的州</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> DataFrame</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入文件，查看原始数据</span></span><br><span class="line">abb = pd.read_csv(<span class="string">&#x27;data\\state-abbrevs.csv&#x27;</span>)    <span class="comment"># state表示州的全称，abbreviation表示州的简称</span></span><br><span class="line"><span class="built_in">print</span>(abb.head())</span><br><span class="line">area = pd.read_csv(<span class="string">&#x27;data\\state-areas.csv&#x27;</span>) <span class="comment"># state州全称，area(sq.mi)州面积</span></span><br><span class="line"><span class="built_in">print</span>(area.head())</span><br><span class="line">pop = pd.read_csv(<span class="string">&#x27;data\\state-population.csv&#x27;</span>)    <span class="comment"># state/region简称，population人口数量</span></span><br><span class="line"><span class="built_in">print</span>(pop.head())</span><br><span class="line"><span class="comment"># 将人口数据和各州的简称数据进行合并</span></span><br><span class="line">abb_pop = pd.merge(abb,pop,left_on=<span class="string">&#x27;abbreviation&#x27;</span>,right_on=<span class="string">&#x27;state/region&#x27;</span>,how=<span class="string">&#x27;outer&#x27;</span>) <span class="comment"># 默认是内连接inner,为了保证数据完整性此处指定outer</span></span><br><span class="line"><span class="built_in">print</span>(abb_pop.head())</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<pre><code>        state abbreviation
0     Alabama           AL
1      Alaska           AK
2     Arizona           AZ
3    Arkansas           AR
4  California           CA
        state  area (sq. mi)
0     Alabama          52423
1      Alaska         656425
2     Arizona         114006
3    Arkansas          53182
4  California         163707
  state/region     ages  year  population
0           AL  under18  2012   1117489.0
1           AL    total  2012   4817528.0
2           AL  under18  2010   1130966.0
3           AL    total  2010   4785570.0
4           AL  under18  2011   1125763.0
     state abbreviation state/region     ages  year  population
0  Alabama           AL           AL  under18  2012   1117489.0
1  Alabama           AL           AL    total  2012   4817528.0
2  Alabama           AL           AL  under18  2010   1130966.0
3  Alabama           AL           AL    total  2010   4785570.0
4  Alabama           AL           AL  under18  2011   1125763.0
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将合并的数据中重复的abbreviation列进行删除</span></span><br><span class="line">abb_pop.drop(labels=<span class="string">&#x27;abbreviation&#x27;</span>,axis=<span class="number">1</span>,inplace=<span class="literal">True</span>) <span class="comment"># inplace=True将编辑的数据映射入原始数据,故不需要再次使用‘abb_pop=’来重新赋值</span></span><br><span class="line"><span class="built_in">print</span>(abb_pop.head())</span><br><span class="line"><span class="comment"># 查看存在缺失数据的列</span></span><br><span class="line"><span class="built_in">print</span>(abb_pop.isnull().<span class="built_in">any</span>(axis=<span class="number">0</span>)) <span class="comment"># 存在空值的列为True</span></span><br><span class="line"><span class="built_in">print</span>(abb_pop.info())   <span class="comment"># 返回数据基本信息，从数据数量看出哪些列存在空值</span></span><br></pre></td></tr></table></figure>

<pre><code>     state state/region     ages  year  population
0  Alabama           AL  under18  2012   1117489.0
1  Alabama           AL    total  2012   4817528.0
2  Alabama           AL  under18  2010   1130966.0
3  Alabama           AL    total  2010   4785570.0
4  Alabama           AL  under18  2011   1125763.0
state            True
state/region    False
ages            False
year            False
population       True
dtype: bool
&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
Int64Index: 2544 entries, 0 to 2543
Data columns (total 5 columns):
 #   Column        Non-Null Count  Dtype  
---  ------        --------------  -----  
 0   state         2448 non-null   object 
 1   state/region  2544 non-null   object 
 2   ages          2544 non-null   object 
 3   year          2544 non-null   int64  
 4   population    2524 non-null   float64
dtypes: float64(1), int64(1), object(3)
memory usage: 119.2+ KB
None
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 找到有哪些state/region使得state的值为NaN，进行去重操作</span></span><br><span class="line"><span class="built_in">print</span>(abb_pop.loc[abb_pop[<span class="string">&#x27;state&#x27;</span>].isnull()][<span class="string">&#x27;state/region&#x27;</span>].unique())  <span class="comment"># series的unique方法按顺序返回出现唯一一次的内容</span></span><br><span class="line"><span class="comment"># 为找到的这些state/region的state项补上正确的值，从而去除掉state这一列的所有NaN</span></span><br><span class="line"><span class="comment"># 此处不能使用fillna填充，因为不是使用临近值和固定值填充；使用元素赋值的方式进行填充</span></span><br><span class="line"><span class="comment"># 1.先给USA的全称对应的空值进行批量赋值，首先找到USA对应的行数据。</span></span><br><span class="line"><span class="built_in">print</span>(abb_pop.loc[abb_pop[<span class="string">&#x27;state/region&#x27;</span>] == <span class="string">&#x27;USA&#x27;</span>])</span><br></pre></td></tr></table></figure>

<pre><code>[&#39;PR&#39; &#39;USA&#39;]
     state state/region     ages  year   population
2496   NaN          USA  under18  1990   64218512.0
2497   NaN          USA    total  1990  249622814.0
2498   NaN          USA    total  1991  252980942.0
2499   NaN          USA  under18  1991   65313018.0
2500   NaN          USA  under18  1992   66509177.0
2501   NaN          USA    total  1992  256514231.0
2502   NaN          USA    total  1993  259918595.0
2503   NaN          USA  under18  1993   67594938.0
2504   NaN          USA  under18  1994   68640936.0
2505   NaN          USA    total  1994  263125826.0
2506   NaN          USA  under18  1995   69473140.0
2507   NaN          USA  under18  1996   70233512.0
2508   NaN          USA    total  1995  266278403.0
2509   NaN          USA    total  1996  269394291.0
2510   NaN          USA    total  1997  272646932.0
2511   NaN          USA  under18  1997   70920738.0
2512   NaN          USA  under18  1998   71431406.0
2513   NaN          USA    total  1998  275854116.0
2514   NaN          USA  under18  1999   71946051.0
2515   NaN          USA    total  2000  282162411.0
2516   NaN          USA  under18  2000   72376189.0
2517   NaN          USA    total  1999  279040181.0
2518   NaN          USA    total  2001  284968955.0
2519   NaN          USA  under18  2001   72671175.0
2520   NaN          USA    total  2002  287625193.0
2521   NaN          USA  under18  2002   72936457.0
2522   NaN          USA    total  2003  290107933.0
2523   NaN          USA  under18  2003   73100758.0
2524   NaN          USA    total  2004  292805298.0
2525   NaN          USA  under18  2004   73297735.0
2526   NaN          USA    total  2005  295516599.0
2527   NaN          USA  under18  2005   73523669.0
2528   NaN          USA    total  2006  298379912.0
2529   NaN          USA  under18  2006   73757714.0
2530   NaN          USA    total  2007  301231207.0
2531   NaN          USA  under18  2007   74019405.0
2532   NaN          USA    total  2008  304093966.0
2533   NaN          USA  under18  2008   74104602.0
2534   NaN          USA  under18  2013   73585872.0
2535   NaN          USA    total  2013  316128839.0
2536   NaN          USA    total  2009  306771529.0
2537   NaN          USA  under18  2009   74134167.0
2538   NaN          USA  under18  2010   74119556.0
2539   NaN          USA    total  2010  309326295.0
2540   NaN          USA  under18  2011   73902222.0
2541   NaN          USA    total  2011  311582564.0
2542   NaN          USA  under18  2012   73708179.0
2543   NaN          USA    total  2012  313873685.0
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 2.获取USA全称为空的数据对应的行索引</span></span><br><span class="line">indexs = abb_pop.loc[abb_pop[<span class="string">&#x27;state/region&#x27;</span>] == <span class="string">&#x27;USA&#x27;</span>].index</span><br><span class="line"><span class="built_in">print</span>(indexs)</span><br><span class="line">abb_pop.loc[indexs,<span class="string">&#x27;state&#x27;</span>] = <span class="string">&#x27;United States&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(abb_pop.loc[abb_pop[<span class="string">&#x27;state&#x27;</span>].isnull()][<span class="string">&#x27;state/region&#x27;</span>].unique())  <span class="comment"># 此处只剩PR</span></span><br><span class="line"><span class="comment"># 对于PR来说过程与USA相同</span></span><br><span class="line">indexs = abb_pop.loc[abb_pop[<span class="string">&#x27;state/region&#x27;</span>] == <span class="string">&#x27;PR&#x27;</span>].index</span><br><span class="line">abb_pop.loc[indexs,<span class="string">&#x27;state&#x27;</span>] = <span class="string">&#x27;Puerto Rico&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(abb_pop.loc[abb_pop[<span class="string">&#x27;state&#x27;</span>].isnull()][<span class="string">&#x27;state/region&#x27;</span>].unique())  <span class="comment"># 此处没有空值了</span></span><br></pre></td></tr></table></figure>

<pre><code>Int64Index([2496, 2497, 2498, 2499, 2500, 2501, 2502, 2503, 2504, 2505, 2506,
            2507, 2508, 2509, 2510, 2511, 2512, 2513, 2514, 2515, 2516, 2517,
            2518, 2519, 2520, 2521, 2522, 2523, 2524, 2525, 2526, 2527, 2528,
            2529, 2530, 2531, 2532, 2533, 2534, 2535, 2536, 2537, 2538, 2539,
            2540, 2541, 2542, 2543],
           dtype=&#39;int64&#39;)
[&#39;PR&#39;]
[]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 合并各州面积数据areas</span></span><br><span class="line">abb_pop_area = pd.merge(abb_pop,area,how=<span class="string">&#x27;outer&#x27;</span>)</span><br><span class="line"><span class="comment"># 我们会发现area(sq.mi)这一列有缺失数据，找出是哪些行</span></span><br><span class="line">abb_pop_area.loc[abb_pop_area[<span class="string">&#x27;area (sq. mi)&#x27;</span>].isnull()]    <span class="comment"># 空对应的行数据</span></span><br><span class="line">indexs = abb_pop_area.loc[abb_pop_area[<span class="string">&#x27;area (sq. mi)&#x27;</span>].isnull()].index</span><br><span class="line"><span class="comment"># 去除含有缺失数据的行</span></span><br><span class="line">abb_pop_area.drop(labels=indexs,axis=<span class="number">0</span>,inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>state</th>
      <th>state/region</th>
      <th>ages</th>
      <th>year</th>
      <th>population</th>
      <th>area (sq. mi)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2496</th>
      <td>United States</td>
      <td>USA</td>
      <td>under18</td>
      <td>1990</td>
      <td>64218512.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2497</th>
      <td>United States</td>
      <td>USA</td>
      <td>total</td>
      <td>1990</td>
      <td>249622814.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2498</th>
      <td>United States</td>
      <td>USA</td>
      <td>total</td>
      <td>1991</td>
      <td>252980942.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2499</th>
      <td>United States</td>
      <td>USA</td>
      <td>under18</td>
      <td>1991</td>
      <td>65313018.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2500</th>
      <td>United States</td>
      <td>USA</td>
      <td>under18</td>
      <td>1992</td>
      <td>66509177.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2501</th>
      <td>United States</td>
      <td>USA</td>
      <td>total</td>
      <td>1992</td>
      <td>256514231.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2502</th>
      <td>United States</td>
      <td>USA</td>
      <td>total</td>
      <td>1993</td>
      <td>259918595.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2503</th>
      <td>United States</td>
      <td>USA</td>
      <td>under18</td>
      <td>1993</td>
      <td>67594938.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2504</th>
      <td>United States</td>
      <td>USA</td>
      <td>under18</td>
      <td>1994</td>
      <td>68640936.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2505</th>
      <td>United States</td>
      <td>USA</td>
      <td>total</td>
      <td>1994</td>
      <td>263125826.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2506</th>
      <td>United States</td>
      <td>USA</td>
      <td>under18</td>
      <td>1995</td>
      <td>69473140.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2507</th>
      <td>United States</td>
      <td>USA</td>
      <td>under18</td>
      <td>1996</td>
      <td>70233512.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2508</th>
      <td>United States</td>
      <td>USA</td>
      <td>total</td>
      <td>1995</td>
      <td>266278403.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2509</th>
      <td>United States</td>
      <td>USA</td>
      <td>total</td>
      <td>1996</td>
      <td>269394291.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2510</th>
      <td>United States</td>
      <td>USA</td>
      <td>total</td>
      <td>1997</td>
      <td>272646932.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2511</th>
      <td>United States</td>
      <td>USA</td>
      <td>under18</td>
      <td>1997</td>
      <td>70920738.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2512</th>
      <td>United States</td>
      <td>USA</td>
      <td>under18</td>
      <td>1998</td>
      <td>71431406.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2513</th>
      <td>United States</td>
      <td>USA</td>
      <td>total</td>
      <td>1998</td>
      <td>275854116.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2514</th>
      <td>United States</td>
      <td>USA</td>
      <td>under18</td>
      <td>1999</td>
      <td>71946051.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2515</th>
      <td>United States</td>
      <td>USA</td>
      <td>total</td>
      <td>2000</td>
      <td>282162411.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2516</th>
      <td>United States</td>
      <td>USA</td>
      <td>under18</td>
      <td>2000</td>
      <td>72376189.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2517</th>
      <td>United States</td>
      <td>USA</td>
      <td>total</td>
      <td>1999</td>
      <td>279040181.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2518</th>
      <td>United States</td>
      <td>USA</td>
      <td>total</td>
      <td>2001</td>
      <td>284968955.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2519</th>
      <td>United States</td>
      <td>USA</td>
      <td>under18</td>
      <td>2001</td>
      <td>72671175.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2520</th>
      <td>United States</td>
      <td>USA</td>
      <td>total</td>
      <td>2002</td>
      <td>287625193.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2521</th>
      <td>United States</td>
      <td>USA</td>
      <td>under18</td>
      <td>2002</td>
      <td>72936457.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2522</th>
      <td>United States</td>
      <td>USA</td>
      <td>total</td>
      <td>2003</td>
      <td>290107933.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2523</th>
      <td>United States</td>
      <td>USA</td>
      <td>under18</td>
      <td>2003</td>
      <td>73100758.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2524</th>
      <td>United States</td>
      <td>USA</td>
      <td>total</td>
      <td>2004</td>
      <td>292805298.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2525</th>
      <td>United States</td>
      <td>USA</td>
      <td>under18</td>
      <td>2004</td>
      <td>73297735.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2526</th>
      <td>United States</td>
      <td>USA</td>
      <td>total</td>
      <td>2005</td>
      <td>295516599.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2527</th>
      <td>United States</td>
      <td>USA</td>
      <td>under18</td>
      <td>2005</td>
      <td>73523669.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2528</th>
      <td>United States</td>
      <td>USA</td>
      <td>total</td>
      <td>2006</td>
      <td>298379912.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2529</th>
      <td>United States</td>
      <td>USA</td>
      <td>under18</td>
      <td>2006</td>
      <td>73757714.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2530</th>
      <td>United States</td>
      <td>USA</td>
      <td>total</td>
      <td>2007</td>
      <td>301231207.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2531</th>
      <td>United States</td>
      <td>USA</td>
      <td>under18</td>
      <td>2007</td>
      <td>74019405.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2532</th>
      <td>United States</td>
      <td>USA</td>
      <td>total</td>
      <td>2008</td>
      <td>304093966.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2533</th>
      <td>United States</td>
      <td>USA</td>
      <td>under18</td>
      <td>2008</td>
      <td>74104602.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2534</th>
      <td>United States</td>
      <td>USA</td>
      <td>under18</td>
      <td>2013</td>
      <td>73585872.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2535</th>
      <td>United States</td>
      <td>USA</td>
      <td>total</td>
      <td>2013</td>
      <td>316128839.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2536</th>
      <td>United States</td>
      <td>USA</td>
      <td>total</td>
      <td>2009</td>
      <td>306771529.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2537</th>
      <td>United States</td>
      <td>USA</td>
      <td>under18</td>
      <td>2009</td>
      <td>74134167.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2538</th>
      <td>United States</td>
      <td>USA</td>
      <td>under18</td>
      <td>2010</td>
      <td>74119556.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2539</th>
      <td>United States</td>
      <td>USA</td>
      <td>total</td>
      <td>2010</td>
      <td>309326295.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2540</th>
      <td>United States</td>
      <td>USA</td>
      <td>under18</td>
      <td>2011</td>
      <td>73902222.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2541</th>
      <td>United States</td>
      <td>USA</td>
      <td>total</td>
      <td>2011</td>
      <td>311582564.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2542</th>
      <td>United States</td>
      <td>USA</td>
      <td>under18</td>
      <td>2012</td>
      <td>73708179.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2543</th>
      <td>United States</td>
      <td>USA</td>
      <td>total</td>
      <td>2012</td>
      <td>313873685.0</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 找出2010年的全民人口数据(基于df做条件查询)</span></span><br><span class="line"><span class="built_in">print</span>(abb_pop_area.query(<span class="string">&#x27;ages == &quot;total&quot; &amp; year == 2010&#x27;</span>))</span><br><span class="line"><span class="comment"># 计算各州的人口密度(人口/面积)</span></span><br><span class="line">abb_pop_area[<span class="string">&#x27;density of population&#x27;</span>] = abb_pop_area[<span class="string">&#x27;population&#x27;</span>] / abb_pop_area[<span class="string">&#x27;area (sq. mi)&#x27;</span>]</span><br><span class="line">abb_pop_area.head()</span><br><span class="line"><span class="comment"># 排序，并找出人口密度最高的州</span></span><br><span class="line">abb_pop_area.sort_values(by=<span class="string">&#x27;density of population&#x27;</span>,axis=<span class="number">0</span>,ascending=<span class="literal">False</span>).iloc[<span class="number">0</span>][<span class="string">&#x27;state&#x27;</span>]    <span class="comment"># ascending是否升序排序，默认升序为True，降序则为False。</span></span><br></pre></td></tr></table></figure>

<pre><code>                     state state/region   ages  year   population  \
3                  Alabama           AL  total  2010    4785570.0   
91                  Alaska           AK  total  2010     713868.0   
101                Arizona           AZ  total  2010    6408790.0   
189               Arkansas           AR  total  2010    2922280.0   
197             California           CA  total  2010   37333601.0   
283               Colorado           CO  total  2010    5048196.0   
293            Connecticut           CT  total  2010    3579210.0   
379               Delaware           DE  total  2010     899711.0   
389   District of Columbia           DC  total  2010     605125.0   
475                Florida           FL  total  2010   18846054.0   
485                Georgia           GA  total  2010    9713248.0   
570                 Hawaii           HI  total  2010    1363731.0   
581                  Idaho           ID  total  2010    1570718.0   
666               Illinois           IL  total  2010   12839695.0   
677                Indiana           IN  total  2010    6489965.0   
762                   Iowa           IA  total  2010    3050314.0   
773                 Kansas           KS  total  2010    2858910.0   
858               Kentucky           KY  total  2010    4347698.0   
869              Louisiana           LA  total  2010    4545392.0   
954                  Maine           ME  total  2010    1327366.0   
965                Montana           MT  total  2010     990527.0   
1050              Nebraska           NE  total  2010    1829838.0   
1061                Nevada           NV  total  2010    2703230.0   
1146         New Hampshire           NH  total  2010    1316614.0   
1157            New Jersey           NJ  total  2010    8802707.0   
1242            New Mexico           NM  total  2010    2064982.0   
1253              New York           NY  total  2010   19398228.0   
1338        North Carolina           NC  total  2010    9559533.0   
1349          North Dakota           ND  total  2010     674344.0   
1434                  Ohio           OH  total  2010   11545435.0   
1445              Oklahoma           OK  total  2010    3759263.0   
1530                Oregon           OR  total  2010    3837208.0   
1541              Maryland           MD  total  2010    5787193.0   
1626         Massachusetts           MA  total  2010    6563263.0   
1637              Michigan           MI  total  2010    9876149.0   
1722             Minnesota           MN  total  2010    5310337.0   
1733           Mississippi           MS  total  2010    2970047.0   
1818              Missouri           MO  total  2010    5996063.0   
1829          Pennsylvania           PA  total  2010   12710472.0   
1914          Rhode Island           RI  total  2010    1052669.0   
1925        South Carolina           SC  total  2010    4636361.0   
2010          South Dakota           SD  total  2010     816211.0   
2021             Tennessee           TN  total  2010    6356683.0   
2106                 Texas           TX  total  2010   25245178.0   
2117                  Utah           UT  total  2010    2774424.0   
2202               Vermont           VT  total  2010     625793.0   
2213              Virginia           VA  total  2010    8024417.0   
2298            Washington           WA  total  2010    6742256.0   
2309         West Virginia           WV  total  2010    1854146.0   
2394             Wisconsin           WI  total  2010    5689060.0   
2405               Wyoming           WY  total  2010     564222.0   
2490           Puerto Rico           PR  total  2010    3721208.0   
2539         United States          USA  total  2010  309326295.0   

      area (sq. mi)         midu  density of population  
3           52423.0    91.287603              91.287603  
91         656425.0     1.087509               1.087509  
101        114006.0    56.214497              56.214497  
189         53182.0    54.948667              54.948667  
197        163707.0   228.051342             228.051342  
283        104100.0    48.493718              48.493718  
293          5544.0   645.600649             645.600649  
379          1954.0   460.445752             460.445752  
389            68.0  8898.897059            8898.897059  
475         65758.0   286.597129             286.597129  
485         59441.0   163.409902             163.409902  
570         10932.0   124.746707             124.746707  
581         83574.0    18.794338              18.794338  
666         57918.0   221.687472             221.687472  
677         36420.0   178.197831             178.197831  
762         56276.0    54.202751              54.202751  
773         82282.0    34.745266              34.745266  
858         40411.0   107.586994             107.586994  
869         51843.0    87.676099              87.676099  
954         35387.0    37.509990              37.509990  
965        147046.0     6.736171               6.736171  
1050        77358.0    23.654153              23.654153  
1061       110567.0    24.448796              24.448796  
1146         9351.0   140.799273             140.799273  
1157         8722.0  1009.253268            1009.253268  
1242       121593.0    16.982737              16.982737  
1253        54475.0   356.094135             356.094135  
1338        53821.0   177.617157             177.617157  
1349        70704.0     9.537565               9.537565  
1434        44828.0   257.549634             257.549634  
1445        69903.0    53.778278              53.778278  
1530        98386.0    39.001565              39.001565  
1541        12407.0   466.445797             466.445797  
1626        10555.0   621.815538             621.815538  
1637        96810.0   102.015794             102.015794  
1722        86943.0    61.078373              61.078373  
1733        48434.0    61.321530              61.321530  
1818        69709.0    86.015622              86.015622  
1829        46058.0   275.966651             275.966651  
1914         1545.0   681.339159             681.339159  
1925        32007.0   144.854594             144.854594  
2010        77121.0    10.583512              10.583512  
2021        42146.0   150.825298             150.825298  
2106       268601.0    93.987655              93.987655  
2117        84904.0    32.677188              32.677188  
2202         9615.0    65.085075              65.085075  
2213        42769.0   187.622273             187.622273  
2298        71303.0    94.557817              94.557817  
2309        24231.0    76.519582              76.519582  
2394        65503.0    86.851900              86.851900  
2405        97818.0     5.768079               5.768079  
2490         3515.0  1058.665149            1058.665149  
2539            NaN          NaN                    NaN  





&#39;District of Columbia&#39;
</code></pre>
<hr>
<p>本文提及的数据集下载地址：<br>链接：<a href="https://pan.baidu.com/s/1lhAiSXBw47MK9QdqwA05Lg">https://pan.baidu.com/s/1lhAiSXBw47MK9QdqwA05Lg</a><br>提取码：1111 </p>
<hr>
]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>2012美国大选献金项目数据分析案例</title>
    <url>/2021/05/27/test_7/</url>
    <content><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ul>
<li>加载数据</li>
<li>查看数据的基本信息</li>
<li>指定数据截取，将如下字段的数据进行提取，其他数据舍弃<ul>
<li>cand_nm ：候选人姓名</li>
<li>contbr_nm ： 捐赠人姓名</li>
<li>contbr_st ：捐赠人所在州</li>
<li>contbr_employer ： 捐赠人所在公司</li>
<li>contbr_occupation ： 捐赠人职业</li>
<li>contb_receipt_amt ：捐赠数额（美元）</li>
<li>contb_receipt_dt ： 捐款的日期</li>
</ul>
</li>
<li>对新数据进行总览,查看是否存在缺失数据</li>
<li>用统计学指标快速描述数值型属性的概要</li>
<li>空值处理，可能因为忘记填写或者保密等等原因，相关字段出现了空值，将其填充为NOT PROVIDE</li>
<li>异常值处理，将捐款金额&lt;=0的数据删除</li>
<li>新建一列为各个候选人所在党派party</li>
<li>查看party这一列中有哪些不同的元素</li>
<li>统计party列中各个元素出现次数</li>
<li>查看各个党派收到的政治献金总数contb_receipt_amt</li>
<li>查看具体每天各个党派收到的政治献金总数contb_receipt_amt</li>
<li>将表中日期格式转换为’yyyy-mm-dd’</li>
<li>查看老兵(捐献者职业)DISABLED VETERAN主要支持谁</li>
</ul>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;./data/usa_election.txt&#x27;</span>)</span><br><span class="line">df</span><br></pre></td></tr></table></figure>

<pre><code>C:\Users\86156\.conda\envs\DL\lib\site-packages\IPython\core\interactiveshell.py:2714: DtypeWarning: Columns (6) have mixed types.Specify dtype option on import or set low_memory=False.
  interactivity=interactivity, compiler=compiler, result=result)
</code></pre>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>cmte_id</th>
      <th>cand_id</th>
      <th>cand_nm</th>
      <th>contbr_nm</th>
      <th>contbr_city</th>
      <th>contbr_st</th>
      <th>contbr_zip</th>
      <th>contbr_employer</th>
      <th>contbr_occupation</th>
      <th>contb_receipt_amt</th>
      <th>contb_receipt_dt</th>
      <th>receipt_desc</th>
      <th>memo_cd</th>
      <th>memo_text</th>
      <th>form_tp</th>
      <th>file_num</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>C00410118</td>
      <td>P20002978</td>
      <td>Bachmann, Michelle</td>
      <td>HARVEY, WILLIAM</td>
      <td>MOBILE</td>
      <td>AL</td>
      <td>3.6601e+08</td>
      <td>RETIRED</td>
      <td>RETIRED</td>
      <td>250.0</td>
      <td>20-JUN-11</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>SA17A</td>
      <td>736166</td>
    </tr>
    <tr>
      <th>1</th>
      <td>C00410118</td>
      <td>P20002978</td>
      <td>Bachmann, Michelle</td>
      <td>HARVEY, WILLIAM</td>
      <td>MOBILE</td>
      <td>AL</td>
      <td>3.6601e+08</td>
      <td>RETIRED</td>
      <td>RETIRED</td>
      <td>50.0</td>
      <td>23-JUN-11</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>SA17A</td>
      <td>736166</td>
    </tr>
    <tr>
      <th>2</th>
      <td>C00410118</td>
      <td>P20002978</td>
      <td>Bachmann, Michelle</td>
      <td>SMITH, LANIER</td>
      <td>LANETT</td>
      <td>AL</td>
      <td>3.68633e+08</td>
      <td>INFORMATION REQUESTED</td>
      <td>INFORMATION REQUESTED</td>
      <td>250.0</td>
      <td>05-JUL-11</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>SA17A</td>
      <td>749073</td>
    </tr>
    <tr>
      <th>3</th>
      <td>C00410118</td>
      <td>P20002978</td>
      <td>Bachmann, Michelle</td>
      <td>BLEVINS, DARONDA</td>
      <td>PIGGOTT</td>
      <td>AR</td>
      <td>7.24548e+08</td>
      <td>NONE</td>
      <td>RETIRED</td>
      <td>250.0</td>
      <td>01-AUG-11</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>SA17A</td>
      <td>749073</td>
    </tr>
    <tr>
      <th>4</th>
      <td>C00410118</td>
      <td>P20002978</td>
      <td>Bachmann, Michelle</td>
      <td>WARDENBURG, HAROLD</td>
      <td>HOT SPRINGS NATION</td>
      <td>AR</td>
      <td>7.19016e+08</td>
      <td>NONE</td>
      <td>RETIRED</td>
      <td>300.0</td>
      <td>20-JUN-11</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>SA17A</td>
      <td>736166</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>536036</th>
      <td>C00500587</td>
      <td>P20003281</td>
      <td>Perry, Rick</td>
      <td>ANDERSON, MARILEE MRS.</td>
      <td>INFO REQUESTED</td>
      <td>XX</td>
      <td>99999</td>
      <td>INFORMATION REQUESTED PER BEST EFFORTS</td>
      <td>INFORMATION REQUESTED PER BEST EFFORTS</td>
      <td>2500.0</td>
      <td>31-AUG-11</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>SA17A</td>
      <td>751678</td>
    </tr>
    <tr>
      <th>536037</th>
      <td>C00500587</td>
      <td>P20003281</td>
      <td>Perry, Rick</td>
      <td>TOLBERT, DARYL MR.</td>
      <td>INFO REQUESTED</td>
      <td>XX</td>
      <td>99999</td>
      <td>T.A.C.C.</td>
      <td>LONGWALL MAINTENANCE FOREMAN</td>
      <td>500.0</td>
      <td>30-SEP-11</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>SA17A</td>
      <td>751678</td>
    </tr>
    <tr>
      <th>536038</th>
      <td>C00500587</td>
      <td>P20003281</td>
      <td>Perry, Rick</td>
      <td>GRANE, BRYAN F. MR.</td>
      <td>INFO REQUESTED</td>
      <td>XX</td>
      <td>99999</td>
      <td>INFORMATION REQUESTED PER BEST EFFORTS</td>
      <td>INFORMATION REQUESTED PER BEST EFFORTS</td>
      <td>500.0</td>
      <td>29-SEP-11</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>SA17A</td>
      <td>751678</td>
    </tr>
    <tr>
      <th>536039</th>
      <td>C00500587</td>
      <td>P20003281</td>
      <td>Perry, Rick</td>
      <td>DUFFY, DAVID A. MR.</td>
      <td>INFO REQUESTED</td>
      <td>XX</td>
      <td>99999</td>
      <td>DUFFY EQUIPMENT COMPANY INC.</td>
      <td>BUSINESS OWNER</td>
      <td>2500.0</td>
      <td>30-SEP-11</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>SA17A</td>
      <td>751678</td>
    </tr>
    <tr>
      <th>536040</th>
      <td>C00500587</td>
      <td>P20003281</td>
      <td>Perry, Rick</td>
      <td>GORMAN, CHRIS D. MR.</td>
      <td>INFO REQUESTED</td>
      <td>XX</td>
      <td>99999</td>
      <td>INFORMATION REQUESTED PER BEST EFFORTS</td>
      <td>INFORMATION REQUESTED PER BEST EFFORTS</td>
      <td>5000.0</td>
      <td>29-SEP-11</td>
      <td>REATTRIBUTION / REDESIGNATION REQUESTED (AUTOM...</td>
      <td>NaN</td>
      <td>REATTRIBUTION / REDESIGNATION REQUESTED (AUTOM...</td>
      <td>SA17A</td>
      <td>751678</td>
    </tr>
  </tbody>
</table>
<p>536041 rows × 16 columns</p>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定数据截取</span></span><br><span class="line">df[<span class="string">&#x27;cand_nm&#x27;</span>]</span><br></pre></td></tr></table></figure>




<pre><code>0         Bachmann, Michelle
1         Bachmann, Michelle
2         Bachmann, Michelle
3         Bachmann, Michelle
4         Bachmann, Michelle
                 ...        
536036           Perry, Rick
536037           Perry, Rick
536038           Perry, Rick
536039           Perry, Rick
536040           Perry, Rick
Name: cand_nm, Length: 536041, dtype: object
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看数据的基本信息，是否存在缺失数据</span></span><br><span class="line">df.info()   <span class="comment"># 可以看到并非所有列都是536041，即这些列有空值</span></span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
RangeIndex: 536041 entries, 0 to 536040
Data columns (total 16 columns):
 #   Column             Non-Null Count   Dtype  
---  ------             --------------   -----  
 0   cmte_id            536041 non-null  object 
 1   cand_id            536041 non-null  object 
 2   cand_nm            536041 non-null  object 
 3   contbr_nm          536041 non-null  object 
 4   contbr_city        536026 non-null  object 
 5   contbr_st          536040 non-null  object 
 6   contbr_zip         535973 non-null  object 
 7   contbr_employer    525088 non-null  object 
 8   contbr_occupation  530520 non-null  object 
 9   contb_receipt_amt  536041 non-null  float64
 10  contb_receipt_dt   536041 non-null  object 
 11  receipt_desc       8479 non-null    object 
 12  memo_cd            49718 non-null   object 
 13  memo_text          52740 non-null   object 
 14  form_tp            536041 non-null  object 
 15  file_num           536041 non-null  int64  
dtypes: float64(1), int64(1), object(14)
memory usage: 65.4+ MB
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用统计学指标快速描述数值型属性的概要</span></span><br><span class="line">df.describe()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>contb_receipt_amt</th>
      <th>file_num</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>5.360410e+05</td>
      <td>536041.000000</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>3.750373e+02</td>
      <td>761472.107800</td>
    </tr>
    <tr>
      <th>std</th>
      <td>3.564436e+03</td>
      <td>5148.893508</td>
    </tr>
    <tr>
      <th>min</th>
      <td>-3.080000e+04</td>
      <td>723511.000000</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>5.000000e+01</td>
      <td>756218.000000</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>1.000000e+02</td>
      <td>763233.000000</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>2.500000e+02</td>
      <td>763621.000000</td>
    </tr>
    <tr>
      <th>max</th>
      <td>1.944042e+06</td>
      <td>767394.000000</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 空值处理。可能因为忘记填写或者保密等等原因，相关字段出现了空值，将其填充为NOT PROVIDE</span></span><br><span class="line">df.fillna(value=<span class="string">&#x27;NOT PROVIDE&#x27;</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">df.info()   <span class="comment"># 可以观察到已经没有空值</span></span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
RangeIndex: 536041 entries, 0 to 536040
Data columns (total 16 columns):
 #   Column             Non-Null Count   Dtype  
---  ------             --------------   -----  
 0   cmte_id            536041 non-null  object 
 1   cand_id            536041 non-null  object 
 2   cand_nm            536041 non-null  object 
 3   contbr_nm          536041 non-null  object 
 4   contbr_city        536041 non-null  object 
 5   contbr_st          536041 non-null  object 
 6   contbr_zip         536041 non-null  object 
 7   contbr_employer    536041 non-null  object 
 8   contbr_occupation  536041 non-null  object 
 9   contb_receipt_amt  536041 non-null  float64
 10  contb_receipt_dt   536041 non-null  object 
 11  receipt_desc       536041 non-null  object 
 12  memo_cd            536041 non-null  object 
 13  memo_text          536041 non-null  object 
 14  form_tp            536041 non-null  object 
 15  file_num           536041 non-null  int64  
dtypes: float64(1), int64(1), object(14)
memory usage: 65.4+ MB
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 异常值处理，将捐款金额&lt;=0的数据删除</span></span><br><span class="line">df[<span class="string">&#x27;contb_receipt_amt&#x27;</span>] &lt;= <span class="number">0</span> <span class="comment">#判断哪些值为小于等于0</span></span><br><span class="line">df.loc[df[<span class="string">&#x27;contb_receipt_amt&#x27;</span>] &lt;= <span class="number">0</span>]    <span class="comment"># 获得捐赠金额小于等于0的行数据</span></span><br><span class="line">drop_indexs = df.loc[df[<span class="string">&#x27;contb_receipt_amt&#x27;</span>] &lt;= <span class="number">0</span>].index    <span class="comment"># 获取相应数据行索引</span></span><br><span class="line">df.drop(labels=drop_indexs,axis=<span class="number">0</span>,inplace=<span class="literal">True</span>) <span class="comment"># 此处加入drop和dropna的区别，dropna针对空值进行处理，与any连用存在空值即删相应行列，与all连用全是空值才删相应行列</span></span><br><span class="line">df</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>cmte_id</th>
      <th>cand_id</th>
      <th>cand_nm</th>
      <th>contbr_nm</th>
      <th>contbr_city</th>
      <th>contbr_st</th>
      <th>contbr_zip</th>
      <th>contbr_employer</th>
      <th>contbr_occupation</th>
      <th>contb_receipt_amt</th>
      <th>contb_receipt_dt</th>
      <th>receipt_desc</th>
      <th>memo_cd</th>
      <th>memo_text</th>
      <th>form_tp</th>
      <th>file_num</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>C00410118</td>
      <td>P20002978</td>
      <td>Bachmann, Michelle</td>
      <td>HARVEY, WILLIAM</td>
      <td>MOBILE</td>
      <td>AL</td>
      <td>3.6601e+08</td>
      <td>RETIRED</td>
      <td>RETIRED</td>
      <td>250.0</td>
      <td>20-JUN-11</td>
      <td>NOT PROVIDE</td>
      <td>NOT PROVIDE</td>
      <td>NOT PROVIDE</td>
      <td>SA17A</td>
      <td>736166</td>
    </tr>
    <tr>
      <th>1</th>
      <td>C00410118</td>
      <td>P20002978</td>
      <td>Bachmann, Michelle</td>
      <td>HARVEY, WILLIAM</td>
      <td>MOBILE</td>
      <td>AL</td>
      <td>3.6601e+08</td>
      <td>RETIRED</td>
      <td>RETIRED</td>
      <td>50.0</td>
      <td>23-JUN-11</td>
      <td>NOT PROVIDE</td>
      <td>NOT PROVIDE</td>
      <td>NOT PROVIDE</td>
      <td>SA17A</td>
      <td>736166</td>
    </tr>
    <tr>
      <th>2</th>
      <td>C00410118</td>
      <td>P20002978</td>
      <td>Bachmann, Michelle</td>
      <td>SMITH, LANIER</td>
      <td>LANETT</td>
      <td>AL</td>
      <td>3.68633e+08</td>
      <td>INFORMATION REQUESTED</td>
      <td>INFORMATION REQUESTED</td>
      <td>250.0</td>
      <td>05-JUL-11</td>
      <td>NOT PROVIDE</td>
      <td>NOT PROVIDE</td>
      <td>NOT PROVIDE</td>
      <td>SA17A</td>
      <td>749073</td>
    </tr>
    <tr>
      <th>3</th>
      <td>C00410118</td>
      <td>P20002978</td>
      <td>Bachmann, Michelle</td>
      <td>BLEVINS, DARONDA</td>
      <td>PIGGOTT</td>
      <td>AR</td>
      <td>7.24548e+08</td>
      <td>NONE</td>
      <td>RETIRED</td>
      <td>250.0</td>
      <td>01-AUG-11</td>
      <td>NOT PROVIDE</td>
      <td>NOT PROVIDE</td>
      <td>NOT PROVIDE</td>
      <td>SA17A</td>
      <td>749073</td>
    </tr>
    <tr>
      <th>4</th>
      <td>C00410118</td>
      <td>P20002978</td>
      <td>Bachmann, Michelle</td>
      <td>WARDENBURG, HAROLD</td>
      <td>HOT SPRINGS NATION</td>
      <td>AR</td>
      <td>7.19016e+08</td>
      <td>NONE</td>
      <td>RETIRED</td>
      <td>300.0</td>
      <td>20-JUN-11</td>
      <td>NOT PROVIDE</td>
      <td>NOT PROVIDE</td>
      <td>NOT PROVIDE</td>
      <td>SA17A</td>
      <td>736166</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>536036</th>
      <td>C00500587</td>
      <td>P20003281</td>
      <td>Perry, Rick</td>
      <td>ANDERSON, MARILEE MRS.</td>
      <td>INFO REQUESTED</td>
      <td>XX</td>
      <td>99999</td>
      <td>INFORMATION REQUESTED PER BEST EFFORTS</td>
      <td>INFORMATION REQUESTED PER BEST EFFORTS</td>
      <td>2500.0</td>
      <td>31-AUG-11</td>
      <td>NOT PROVIDE</td>
      <td>NOT PROVIDE</td>
      <td>NOT PROVIDE</td>
      <td>SA17A</td>
      <td>751678</td>
    </tr>
    <tr>
      <th>536037</th>
      <td>C00500587</td>
      <td>P20003281</td>
      <td>Perry, Rick</td>
      <td>TOLBERT, DARYL MR.</td>
      <td>INFO REQUESTED</td>
      <td>XX</td>
      <td>99999</td>
      <td>T.A.C.C.</td>
      <td>LONGWALL MAINTENANCE FOREMAN</td>
      <td>500.0</td>
      <td>30-SEP-11</td>
      <td>NOT PROVIDE</td>
      <td>NOT PROVIDE</td>
      <td>NOT PROVIDE</td>
      <td>SA17A</td>
      <td>751678</td>
    </tr>
    <tr>
      <th>536038</th>
      <td>C00500587</td>
      <td>P20003281</td>
      <td>Perry, Rick</td>
      <td>GRANE, BRYAN F. MR.</td>
      <td>INFO REQUESTED</td>
      <td>XX</td>
      <td>99999</td>
      <td>INFORMATION REQUESTED PER BEST EFFORTS</td>
      <td>INFORMATION REQUESTED PER BEST EFFORTS</td>
      <td>500.0</td>
      <td>29-SEP-11</td>
      <td>NOT PROVIDE</td>
      <td>NOT PROVIDE</td>
      <td>NOT PROVIDE</td>
      <td>SA17A</td>
      <td>751678</td>
    </tr>
    <tr>
      <th>536039</th>
      <td>C00500587</td>
      <td>P20003281</td>
      <td>Perry, Rick</td>
      <td>DUFFY, DAVID A. MR.</td>
      <td>INFO REQUESTED</td>
      <td>XX</td>
      <td>99999</td>
      <td>DUFFY EQUIPMENT COMPANY INC.</td>
      <td>BUSINESS OWNER</td>
      <td>2500.0</td>
      <td>30-SEP-11</td>
      <td>NOT PROVIDE</td>
      <td>NOT PROVIDE</td>
      <td>NOT PROVIDE</td>
      <td>SA17A</td>
      <td>751678</td>
    </tr>
    <tr>
      <th>536040</th>
      <td>C00500587</td>
      <td>P20003281</td>
      <td>Perry, Rick</td>
      <td>GORMAN, CHRIS D. MR.</td>
      <td>INFO REQUESTED</td>
      <td>XX</td>
      <td>99999</td>
      <td>INFORMATION REQUESTED PER BEST EFFORTS</td>
      <td>INFORMATION REQUESTED PER BEST EFFORTS</td>
      <td>5000.0</td>
      <td>29-SEP-11</td>
      <td>REATTRIBUTION / REDESIGNATION REQUESTED (AUTOM...</td>
      <td>NOT PROVIDE</td>
      <td>REATTRIBUTION / REDESIGNATION REQUESTED (AUTOM...</td>
      <td>SA17A</td>
      <td>751678</td>
    </tr>
  </tbody>
</table>
<p>530314 rows × 16 columns</p>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建一列为各个候选人所在党派party</span></span><br><span class="line">parties = &#123;</span><br><span class="line">  <span class="string">&#x27;Bachmann, Michelle&#x27;</span>: <span class="string">&#x27;Republican&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Romney, Mitt&#x27;</span>: <span class="string">&#x27;Republican&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Obama, Barack&#x27;</span>: <span class="string">&#x27;Democrat&#x27;</span>,</span><br><span class="line">  <span class="string">&quot;Roemer, Charles E. &#x27;Buddy&#x27; III&quot;</span>: <span class="string">&#x27;Reform&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Pawlenty, Timothy&#x27;</span>: <span class="string">&#x27;Republican&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Johnson, Gary Earl&#x27;</span>: <span class="string">&#x27;Libertarian&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Paul, Ron&#x27;</span>: <span class="string">&#x27;Republican&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Santorum, Rick&#x27;</span>: <span class="string">&#x27;Republican&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Cain, Herman&#x27;</span>: <span class="string">&#x27;Republican&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Gingrich, Newt&#x27;</span>: <span class="string">&#x27;Republican&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;McCotter, Thaddeus G&#x27;</span>: <span class="string">&#x27;Republican&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Huntsman, Jon&#x27;</span>: <span class="string">&#x27;Republican&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Perry, Rick&#x27;</span>: <span class="string">&#x27;Republican&#x27;</span>           </span><br><span class="line"> &#125;  <span class="comment"># 此处利用字典新建了相应候选人对应的党派信息</span></span><br><span class="line">df[<span class="string">&#x27;cand_nm&#x27;</span>].<span class="built_in">map</span>(parties)  <span class="comment"># 此处需要映射</span></span><br><span class="line">df[<span class="string">&#x27;party&#x27;</span>] = df[<span class="string">&#x27;cand_nm&#x27;</span>].<span class="built_in">map</span>(parties)   <span class="comment"># 将映射结果加入列表新建的party列</span></span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>cmte_id</th>
      <th>cand_id</th>
      <th>cand_nm</th>
      <th>contbr_nm</th>
      <th>contbr_city</th>
      <th>contbr_st</th>
      <th>contbr_zip</th>
      <th>contbr_employer</th>
      <th>contbr_occupation</th>
      <th>contb_receipt_amt</th>
      <th>contb_receipt_dt</th>
      <th>receipt_desc</th>
      <th>memo_cd</th>
      <th>memo_text</th>
      <th>form_tp</th>
      <th>file_num</th>
      <th>party</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>C00410118</td>
      <td>P20002978</td>
      <td>Bachmann, Michelle</td>
      <td>HARVEY, WILLIAM</td>
      <td>MOBILE</td>
      <td>AL</td>
      <td>3.6601e+08</td>
      <td>RETIRED</td>
      <td>RETIRED</td>
      <td>250.0</td>
      <td>20-JUN-11</td>
      <td>NOT PROVIDE</td>
      <td>NOT PROVIDE</td>
      <td>NOT PROVIDE</td>
      <td>SA17A</td>
      <td>736166</td>
      <td>Republican</td>
    </tr>
    <tr>
      <th>1</th>
      <td>C00410118</td>
      <td>P20002978</td>
      <td>Bachmann, Michelle</td>
      <td>HARVEY, WILLIAM</td>
      <td>MOBILE</td>
      <td>AL</td>
      <td>3.6601e+08</td>
      <td>RETIRED</td>
      <td>RETIRED</td>
      <td>50.0</td>
      <td>23-JUN-11</td>
      <td>NOT PROVIDE</td>
      <td>NOT PROVIDE</td>
      <td>NOT PROVIDE</td>
      <td>SA17A</td>
      <td>736166</td>
      <td>Republican</td>
    </tr>
    <tr>
      <th>2</th>
      <td>C00410118</td>
      <td>P20002978</td>
      <td>Bachmann, Michelle</td>
      <td>SMITH, LANIER</td>
      <td>LANETT</td>
      <td>AL</td>
      <td>3.68633e+08</td>
      <td>INFORMATION REQUESTED</td>
      <td>INFORMATION REQUESTED</td>
      <td>250.0</td>
      <td>05-JUL-11</td>
      <td>NOT PROVIDE</td>
      <td>NOT PROVIDE</td>
      <td>NOT PROVIDE</td>
      <td>SA17A</td>
      <td>749073</td>
      <td>Republican</td>
    </tr>
    <tr>
      <th>3</th>
      <td>C00410118</td>
      <td>P20002978</td>
      <td>Bachmann, Michelle</td>
      <td>BLEVINS, DARONDA</td>
      <td>PIGGOTT</td>
      <td>AR</td>
      <td>7.24548e+08</td>
      <td>NONE</td>
      <td>RETIRED</td>
      <td>250.0</td>
      <td>01-AUG-11</td>
      <td>NOT PROVIDE</td>
      <td>NOT PROVIDE</td>
      <td>NOT PROVIDE</td>
      <td>SA17A</td>
      <td>749073</td>
      <td>Republican</td>
    </tr>
    <tr>
      <th>4</th>
      <td>C00410118</td>
      <td>P20002978</td>
      <td>Bachmann, Michelle</td>
      <td>WARDENBURG, HAROLD</td>
      <td>HOT SPRINGS NATION</td>
      <td>AR</td>
      <td>7.19016e+08</td>
      <td>NONE</td>
      <td>RETIRED</td>
      <td>300.0</td>
      <td>20-JUN-11</td>
      <td>NOT PROVIDE</td>
      <td>NOT PROVIDE</td>
      <td>NOT PROVIDE</td>
      <td>SA17A</td>
      <td>736166</td>
      <td>Republican</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看party这一列中有哪些不同的元素</span></span><br><span class="line">df[<span class="string">&#x27;party&#x27;</span>].unique()    <span class="comment"># unique以列表形式返回Series中出现的数据有哪些，即不重复数据直接返回，重复相同数据只返回一个</span></span><br></pre></td></tr></table></figure>




<pre><code>array([&#39;Republican&#39;, &#39;Democrat&#39;, &#39;Reform&#39;, &#39;Libertarian&#39;], dtype=object)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 统计party列中各个元素出现次数</span></span><br><span class="line">df[<span class="string">&#x27;party&#x27;</span>].value_counts()</span><br></pre></td></tr></table></figure>




<pre><code>Democrat       289999
Republican     234300
Reform           5313
Libertarian       702
Name: party, dtype: int64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看各个党派收到的政治献金总数contb_receipt_amt</span></span><br><span class="line">df.groupby(<span class="string">&#x27;party&#x27;</span>)[<span class="string">&#x27;contb_receipt_amt&#x27;</span>].<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure>




<pre><code>party
Democrat       8.259441e+07
Libertarian    4.132769e+05
Reform         3.429658e+05
Republican     1.251181e+08
Name: contb_receipt_amt, dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看具体每天各个党派收到的政治献金总数contb_receipt_amt</span></span><br><span class="line">df.groupby([<span class="string">&#x27;contb_receipt_dt&#x27;</span>,<span class="string">&#x27;party&#x27;</span>])[<span class="string">&#x27;contb_receipt_amt&#x27;</span>].<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure>




<pre><code>contb_receipt_dt  party      
01-APR-11         Reform             50.00
                  Republican      12635.00
01-AUG-11         Democrat       182198.00
                  Libertarian      1000.00
                  Reform           1847.00
                                   ...    
31-MAY-11         Republican     313839.80
31-OCT-11         Democrat       216971.87
                  Libertarian      4250.00
                  Reform           3205.00
                  Republican     751542.36
Name: contb_receipt_amt, Length: 1183, dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将表中日期格式转换为&#x27;yyyy-mm-dd&#x27;</span></span><br><span class="line">months = &#123;<span class="string">&#x27;JAN&#x27;</span> : <span class="number">1</span>, <span class="string">&#x27;FEB&#x27;</span> : <span class="number">2</span>, <span class="string">&#x27;MAR&#x27;</span> : <span class="number">3</span>, <span class="string">&#x27;APR&#x27;</span> : <span class="number">4</span>, <span class="string">&#x27;MAY&#x27;</span> : <span class="number">5</span>, <span class="string">&#x27;JUN&#x27;</span> : <span class="number">6</span>,</span><br><span class="line">          <span class="string">&#x27;JUL&#x27;</span> : <span class="number">7</span>, <span class="string">&#x27;AUG&#x27;</span> : <span class="number">8</span>, <span class="string">&#x27;SEP&#x27;</span> : <span class="number">9</span>, <span class="string">&#x27;OCT&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;NOV&#x27;</span>: <span class="number">11</span>, <span class="string">&#x27;DEC&#x27;</span> : <span class="number">12</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transformDate</span>(<span class="params">d</span>):</span></span><br><span class="line">    day,month,year = d.split(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">    month = months[month]   <span class="comment"># 字典取值，将英文形式的月份转换为数字形式的月份</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;20&#x27;</span>+year+<span class="string">&#x27;-&#x27;</span>+<span class="built_in">str</span>(month)+<span class="string">&#x27;-&#x27;</span>+day</span><br><span class="line">df[<span class="string">&#x27;contb_receipt_dt&#x27;</span>] = df[<span class="string">&#x27;contb_receipt_dt&#x27;</span>].<span class="built_in">map</span>(transformDate)</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>cmte_id</th>
      <th>cand_id</th>
      <th>cand_nm</th>
      <th>contbr_nm</th>
      <th>contbr_city</th>
      <th>contbr_st</th>
      <th>contbr_zip</th>
      <th>contbr_employer</th>
      <th>contbr_occupation</th>
      <th>contb_receipt_amt</th>
      <th>contb_receipt_dt</th>
      <th>receipt_desc</th>
      <th>memo_cd</th>
      <th>memo_text</th>
      <th>form_tp</th>
      <th>file_num</th>
      <th>party</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>C00410118</td>
      <td>P20002978</td>
      <td>Bachmann, Michelle</td>
      <td>HARVEY, WILLIAM</td>
      <td>MOBILE</td>
      <td>AL</td>
      <td>3.6601e+08</td>
      <td>RETIRED</td>
      <td>RETIRED</td>
      <td>250.0</td>
      <td>2011-6-20</td>
      <td>NOT PROVIDE</td>
      <td>NOT PROVIDE</td>
      <td>NOT PROVIDE</td>
      <td>SA17A</td>
      <td>736166</td>
      <td>Republican</td>
    </tr>
    <tr>
      <th>1</th>
      <td>C00410118</td>
      <td>P20002978</td>
      <td>Bachmann, Michelle</td>
      <td>HARVEY, WILLIAM</td>
      <td>MOBILE</td>
      <td>AL</td>
      <td>3.6601e+08</td>
      <td>RETIRED</td>
      <td>RETIRED</td>
      <td>50.0</td>
      <td>2011-6-23</td>
      <td>NOT PROVIDE</td>
      <td>NOT PROVIDE</td>
      <td>NOT PROVIDE</td>
      <td>SA17A</td>
      <td>736166</td>
      <td>Republican</td>
    </tr>
    <tr>
      <th>2</th>
      <td>C00410118</td>
      <td>P20002978</td>
      <td>Bachmann, Michelle</td>
      <td>SMITH, LANIER</td>
      <td>LANETT</td>
      <td>AL</td>
      <td>3.68633e+08</td>
      <td>INFORMATION REQUESTED</td>
      <td>INFORMATION REQUESTED</td>
      <td>250.0</td>
      <td>2011-7-05</td>
      <td>NOT PROVIDE</td>
      <td>NOT PROVIDE</td>
      <td>NOT PROVIDE</td>
      <td>SA17A</td>
      <td>749073</td>
      <td>Republican</td>
    </tr>
    <tr>
      <th>3</th>
      <td>C00410118</td>
      <td>P20002978</td>
      <td>Bachmann, Michelle</td>
      <td>BLEVINS, DARONDA</td>
      <td>PIGGOTT</td>
      <td>AR</td>
      <td>7.24548e+08</td>
      <td>NONE</td>
      <td>RETIRED</td>
      <td>250.0</td>
      <td>2011-8-01</td>
      <td>NOT PROVIDE</td>
      <td>NOT PROVIDE</td>
      <td>NOT PROVIDE</td>
      <td>SA17A</td>
      <td>749073</td>
      <td>Republican</td>
    </tr>
    <tr>
      <th>4</th>
      <td>C00410118</td>
      <td>P20002978</td>
      <td>Bachmann, Michelle</td>
      <td>WARDENBURG, HAROLD</td>
      <td>HOT SPRINGS NATION</td>
      <td>AR</td>
      <td>7.19016e+08</td>
      <td>NONE</td>
      <td>RETIRED</td>
      <td>300.0</td>
      <td>2011-6-20</td>
      <td>NOT PROVIDE</td>
      <td>NOT PROVIDE</td>
      <td>NOT PROVIDE</td>
      <td>SA17A</td>
      <td>736166</td>
      <td>Republican</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看老兵(捐献者职业)DISABLED VETERAN主要支持谁，给谁捐赠的钱越多表示越支持谁</span></span><br><span class="line">df[<span class="string">&#x27;contbr_occupation&#x27;</span>] == <span class="string">&#x27;DISABLED VETERAN&#x27;</span>    <span class="comment"># 找到职业中老兵数据</span></span><br><span class="line">df_old = df.loc[df[<span class="string">&#x27;contbr_occupation&#x27;</span>] == <span class="string">&#x27;DISABLED VETERAN&#x27;</span>]    <span class="comment"># 取出</span></span><br><span class="line">df_old.groupby(<span class="string">&#x27;cand_nm&#x27;</span>)[<span class="string">&#x27;contb_receipt_amt&#x27;</span>].<span class="built_in">sum</span>()    <span class="comment"># 按候选人分组，对金额求和</span></span><br></pre></td></tr></table></figure>




<pre><code>cand_nm
Cain, Herman       300.00
Obama, Barack     4205.00
Paul, Ron         2425.49
Santorum, Rick     250.00
Name: contb_receipt_amt, dtype: float64
</code></pre>
<hr>
<p>本文提及的数据集下载地址：<br>链接：<a href="https://pan.baidu.com/s/1lhAiSXBw47MK9QdqwA05Lg">https://pan.baidu.com/s/1lhAiSXBw47MK9QdqwA05Lg</a><br>提取码：1111 </p>
<hr>
]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Pandas中的一些高级操作</title>
    <url>/2021/05/25/test_6/</url>
    <content><![CDATA[<h1 id="Pandas中的一些高级操作"><a href="#Pandas中的一些高级操作" class="headerlink" title="Pandas中的一些高级操作"></a>Pandas中的一些高级操作</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> DataFrame</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="替换操作"><a href="#替换操作" class="headerlink" title="替换操作"></a>替换操作</h2><ul>
<li>替换操作可以同步作用于Series和DataFrame中</li>
<li>单值替换<ul>
<li>普通替换：替换所有符合要求的元素：to_replace=15,value=’e’</li>
<li>按列指定单值替换：to_replace={列标签：替换值},value=’value’</li>
</ul>
</li>
<li>多值替换<ul>
<li>列表替换：to_replace=[],value=[]</li>
<li>字典替换（推荐）：to_replace={to_replace:value,to_replace:value}</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = DataFrame(data=np.random.randint(<span class="number">0</span>,<span class="number">100</span>,size=(<span class="number">5</span>,<span class="number">6</span>)))</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure>

<pre><code>    0   1   2   3   4   5
0  15  45   9   1   2  48
1  47  74  68  90  84   4
2  41  30  14  26  22  27
3   4  64  46  20   8  63
4  48  80  95  58   0  90
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.replace(to_replace=<span class="number">2</span>,value=<span class="string">&#x27;Two&#x27;</span>)    <span class="comment"># 对指定元素进行替换</span></span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
      <th>4</th>
      <th>5</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>15</td>
      <td>45</td>
      <td>9</td>
      <td>1</td>
      <td>Two</td>
      <td>48</td>
    </tr>
    <tr>
      <th>1</th>
      <td>47</td>
      <td>74</td>
      <td>68</td>
      <td>90</td>
      <td>84</td>
      <td>4</td>
    </tr>
    <tr>
      <th>2</th>
      <td>41</td>
      <td>30</td>
      <td>14</td>
      <td>26</td>
      <td>22</td>
      <td>27</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>64</td>
      <td>46</td>
      <td>20</td>
      <td>8</td>
      <td>63</td>
    </tr>
    <tr>
      <th>4</th>
      <td>48</td>
      <td>80</td>
      <td>95</td>
      <td>58</td>
      <td>0</td>
      <td>90</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.replace(to_replace=&#123;<span class="number">1</span>:<span class="string">&#x27;One&#x27;</span>&#125;)    <span class="comment"># 使用字典形式做替换</span></span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
      <th>4</th>
      <th>5</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>15</td>
      <td>45</td>
      <td>9</td>
      <td>One</td>
      <td>2</td>
      <td>48</td>
    </tr>
    <tr>
      <th>1</th>
      <td>47</td>
      <td>74</td>
      <td>68</td>
      <td>90</td>
      <td>84</td>
      <td>4</td>
    </tr>
    <tr>
      <th>2</th>
      <td>41</td>
      <td>30</td>
      <td>14</td>
      <td>26</td>
      <td>22</td>
      <td>27</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>64</td>
      <td>46</td>
      <td>20</td>
      <td>8</td>
      <td>63</td>
    </tr>
    <tr>
      <th>4</th>
      <td>48</td>
      <td>80</td>
      <td>95</td>
      <td>58</td>
      <td>0</td>
      <td>90</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将指定列的元素进行替换：to_replace=&#123;列索引：被替换的值&#125;,value=&#x27;value&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df.replace(to_replace=&#123;<span class="number">5</span>:<span class="number">4</span>&#125;,value=<span class="string">&#x27;Four&#x27;</span>))    <span class="comment"># 将第5列的4替换为‘Four’</span></span><br><span class="line">df.replace(to_replace=&#123;<span class="number">0</span>:<span class="number">4</span>&#125;,value=<span class="string">&#x27;Four&#x27;</span>)   <span class="comment"># 将第0列的4替换为‘Four’</span></span><br></pre></td></tr></table></figure>

<pre><code>    0   1   2   3   4     5
0  15  45   9   1   2    48
1  47  74  68  90  84  Four
2  41  30  14  26  22    27
3   4  64  46  20   8    63
4  48  80  95  58   0    90
</code></pre>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
      <th>4</th>
      <th>5</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>15</td>
      <td>45</td>
      <td>9</td>
      <td>1</td>
      <td>2</td>
      <td>48</td>
    </tr>
    <tr>
      <th>1</th>
      <td>47</td>
      <td>74</td>
      <td>68</td>
      <td>90</td>
      <td>84</td>
      <td>4</td>
    </tr>
    <tr>
      <th>2</th>
      <td>41</td>
      <td>30</td>
      <td>14</td>
      <td>26</td>
      <td>22</td>
      <td>27</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Four</td>
      <td>64</td>
      <td>46</td>
      <td>20</td>
      <td>8</td>
      <td>63</td>
    </tr>
    <tr>
      <th>4</th>
      <td>48</td>
      <td>80</td>
      <td>95</td>
      <td>58</td>
      <td>0</td>
      <td>90</td>
    </tr>
  </tbody>
</table>
</div>



<h2 id="映射操作"><a href="#映射操作" class="headerlink" title="映射操作"></a>映射操作</h2><ul>
<li>概念：创建一个映射关系列表，把values元素和一个特定的标签或者字符串绑定（给一个元素值提供不同的表现形式）</li>
<li>创建一个df，两列分别是姓名和薪资，然后给其名字起对应的英文名</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>:[<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;张三&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;salary&#x27;</span>:[<span class="number">15000</span>,<span class="number">20000</span>,<span class="number">15000</span>]</span><br><span class="line">&#125;</span><br><span class="line">df = DataFrame(data=dic)</span><br><span class="line">df</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>name</th>
      <th>salary</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>张三</td>
      <td>15000</td>
    </tr>
    <tr>
      <th>1</th>
      <td>李四</td>
      <td>20000</td>
    </tr>
    <tr>
      <th>2</th>
      <td>张三</td>
      <td>15000</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 映射关系表</span></span><br><span class="line">dic = &#123;</span><br><span class="line">    <span class="string">&#x27;张三&#x27;</span>:<span class="string">&#x27;Tom&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;李四&#x27;</span>:<span class="string">&#x27;Jack&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&#x27;name&#x27;</span>].<span class="built_in">map</span>(dic))  <span class="comment"># map()属于Series的映射函数只能通过Series去调</span></span><br><span class="line">df[<span class="string">&#x27;e_name&#x27;</span>] = df[<span class="string">&#x27;name&#x27;</span>].<span class="built_in">map</span>(dic)</span><br><span class="line">df</span><br></pre></td></tr></table></figure>

<pre><code>0     Tom
1    Jack
2     Tom
Name: name, dtype: object
</code></pre>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>name</th>
      <th>salary</th>
      <th>e_name</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>张三</td>
      <td>15000</td>
      <td>Tom</td>
    </tr>
    <tr>
      <th>1</th>
      <td>李四</td>
      <td>20000</td>
      <td>Jack</td>
    </tr>
    <tr>
      <th>2</th>
      <td>张三</td>
      <td>15000</td>
      <td>Tom</td>
    </tr>
  </tbody>
</table>
</div>



<h2 id="运算工具"><a href="#运算工具" class="headerlink" title="运算工具"></a>运算工具</h2><ul>
<li>超过3000部分的钱缴纳50%的税，计算每个人的税后薪资</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">after_sal</span>(<span class="params">s</span>):</span>   <span class="comment">#计算s对应的税后薪资</span></span><br><span class="line">    <span class="keyword">return</span> s - (s-<span class="number">3000</span>)*<span class="number">0.5</span></span><br><span class="line">df[<span class="string">&#x27;after_sal&#x27;</span>] = df[<span class="string">&#x27;salary&#x27;</span>].<span class="built_in">map</span>(after_sal) <span class="comment"># 可以将df[&#x27;salary&#x27;]这个Series中每一个元素（薪资）作为参数传递给s</span></span><br><span class="line">df</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>name</th>
      <th>salary</th>
      <th>e_name</th>
      <th>after_sal</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>张三</td>
      <td>15000</td>
      <td>Tom</td>
      <td>9000.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>李四</td>
      <td>20000</td>
      <td>Jack</td>
      <td>11500.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>张三</td>
      <td>15000</td>
      <td>Tom</td>
      <td>9000.0</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 排序实现的随机抽样</span></span><br><span class="line">- take()</span><br><span class="line">- np.random.permutation()</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = DataFrame(data=np.random.randint(<span class="number">0</span>,<span class="number">100</span>,size=(<span class="number">100</span>,<span class="number">3</span>)),columns=[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>])</span><br><span class="line">df</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>55</td>
      <td>52</td>
      <td>52</td>
    </tr>
    <tr>
      <th>1</th>
      <td>95</td>
      <td>33</td>
      <td>80</td>
    </tr>
    <tr>
      <th>2</th>
      <td>31</td>
      <td>72</td>
      <td>31</td>
    </tr>
    <tr>
      <th>3</th>
      <td>49</td>
      <td>79</td>
      <td>65</td>
    </tr>
    <tr>
      <th>4</th>
      <td>53</td>
      <td>88</td>
      <td>23</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>95</th>
      <td>38</td>
      <td>30</td>
      <td>99</td>
    </tr>
    <tr>
      <th>96</th>
      <td>83</td>
      <td>47</td>
      <td>98</td>
    </tr>
    <tr>
      <th>97</th>
      <td>61</td>
      <td>37</td>
      <td>37</td>
    </tr>
    <tr>
      <th>98</th>
      <td>51</td>
      <td>97</td>
      <td>48</td>
    </tr>
    <tr>
      <th>99</th>
      <td>61</td>
      <td>92</td>
      <td>7</td>
    </tr>
  </tbody>
</table>
<p>100 rows × 3 columns</p>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成乱序的随机序列</span></span><br><span class="line">np.random.permutation(<span class="number">10</span>)   <span class="comment"># 生成0-9的乱序随机序列</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将原始数据打乱</span></span><br><span class="line"><span class="built_in">print</span>(df.take([<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>],axis=<span class="number">1</span>))   <span class="comment"># take与drop类似，0表示行，1表示列。并且take不能使用显示索引，只能使用“0，1，2...”隐式索引</span></span><br><span class="line">df.take(np.random.permutation(<span class="number">3</span>),axis=<span class="number">1</span>)    <span class="comment"># 将np.random.permutation()函数引入，按列打乱</span></span><br></pre></td></tr></table></figure>

<pre><code>     C   A   B
0   52  55  52
1   80  95  33
2   31  31  72
3   65  49  79
4   23  53  88
..  ..  ..  ..
95  99  38  30
96  98  83  47
97  37  61  37
98  48  51  97
99   7  61  92

[100 rows x 3 columns]
</code></pre>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>C</th>
      <th>B</th>
      <th>A</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>52</td>
      <td>52</td>
      <td>55</td>
    </tr>
    <tr>
      <th>1</th>
      <td>80</td>
      <td>33</td>
      <td>95</td>
    </tr>
    <tr>
      <th>2</th>
      <td>31</td>
      <td>72</td>
      <td>31</td>
    </tr>
    <tr>
      <th>3</th>
      <td>65</td>
      <td>79</td>
      <td>49</td>
    </tr>
    <tr>
      <th>4</th>
      <td>23</td>
      <td>88</td>
      <td>53</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>95</th>
      <td>99</td>
      <td>30</td>
      <td>38</td>
    </tr>
    <tr>
      <th>96</th>
      <td>98</td>
      <td>47</td>
      <td>83</td>
    </tr>
    <tr>
      <th>97</th>
      <td>37</td>
      <td>37</td>
      <td>61</td>
    </tr>
    <tr>
      <th>98</th>
      <td>48</td>
      <td>97</td>
      <td>51</td>
    </tr>
    <tr>
      <th>99</th>
      <td>7</td>
      <td>92</td>
      <td>61</td>
    </tr>
  </tbody>
</table>
<p>100 rows × 3 columns</p>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.take(np.random.permutation(<span class="number">3</span>),axis=<span class="number">1</span>).take(np.random.permutation(<span class="number">100</span>),axis=<span class="number">0</span>)    <span class="comment"># 行列全部打乱</span></span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>C</th>
      <th>A</th>
      <th>B</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>25</th>
      <td>54</td>
      <td>23</td>
      <td>65</td>
    </tr>
    <tr>
      <th>78</th>
      <td>56</td>
      <td>89</td>
      <td>46</td>
    </tr>
    <tr>
      <th>13</th>
      <td>19</td>
      <td>83</td>
      <td>61</td>
    </tr>
    <tr>
      <th>21</th>
      <td>46</td>
      <td>25</td>
      <td>65</td>
    </tr>
    <tr>
      <th>68</th>
      <td>5</td>
      <td>41</td>
      <td>2</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>62</th>
      <td>4</td>
      <td>84</td>
      <td>77</td>
    </tr>
    <tr>
      <th>98</th>
      <td>48</td>
      <td>51</td>
      <td>97</td>
    </tr>
    <tr>
      <th>28</th>
      <td>92</td>
      <td>78</td>
      <td>51</td>
    </tr>
    <tr>
      <th>43</th>
      <td>60</td>
      <td>67</td>
      <td>41</td>
    </tr>
    <tr>
      <th>19</th>
      <td>90</td>
      <td>45</td>
      <td>90</td>
    </tr>
  </tbody>
</table>
<p>100 rows × 3 columns</p>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.take(np.random.permutation(<span class="number">3</span>),axis=<span class="number">1</span>).take(np.random.permutation(<span class="number">100</span>),axis=<span class="number">0</span>)[<span class="number">0</span>:<span class="number">50</span>]  <span class="comment"># 取前50行</span></span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>B</th>
      <th>C</th>
      <th>A</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>5</th>
      <td>97</td>
      <td>33</td>
      <td>69</td>
    </tr>
    <tr>
      <th>7</th>
      <td>38</td>
      <td>89</td>
      <td>26</td>
    </tr>
    <tr>
      <th>54</th>
      <td>86</td>
      <td>75</td>
      <td>18</td>
    </tr>
    <tr>
      <th>2</th>
      <td>72</td>
      <td>31</td>
      <td>31</td>
    </tr>
    <tr>
      <th>34</th>
      <td>95</td>
      <td>95</td>
      <td>12</td>
    </tr>
    <tr>
      <th>72</th>
      <td>85</td>
      <td>25</td>
      <td>0</td>
    </tr>
    <tr>
      <th>80</th>
      <td>1</td>
      <td>82</td>
      <td>11</td>
    </tr>
    <tr>
      <th>28</th>
      <td>51</td>
      <td>92</td>
      <td>78</td>
    </tr>
    <tr>
      <th>61</th>
      <td>58</td>
      <td>88</td>
      <td>54</td>
    </tr>
    <tr>
      <th>16</th>
      <td>8</td>
      <td>83</td>
      <td>6</td>
    </tr>
    <tr>
      <th>96</th>
      <td>47</td>
      <td>98</td>
      <td>83</td>
    </tr>
    <tr>
      <th>62</th>
      <td>77</td>
      <td>4</td>
      <td>84</td>
    </tr>
    <tr>
      <th>19</th>
      <td>90</td>
      <td>90</td>
      <td>45</td>
    </tr>
    <tr>
      <th>3</th>
      <td>79</td>
      <td>65</td>
      <td>49</td>
    </tr>
    <tr>
      <th>26</th>
      <td>56</td>
      <td>77</td>
      <td>80</td>
    </tr>
    <tr>
      <th>70</th>
      <td>99</td>
      <td>9</td>
      <td>47</td>
    </tr>
    <tr>
      <th>99</th>
      <td>92</td>
      <td>7</td>
      <td>61</td>
    </tr>
    <tr>
      <th>53</th>
      <td>79</td>
      <td>75</td>
      <td>50</td>
    </tr>
    <tr>
      <th>12</th>
      <td>9</td>
      <td>15</td>
      <td>82</td>
    </tr>
    <tr>
      <th>4</th>
      <td>88</td>
      <td>23</td>
      <td>53</td>
    </tr>
    <tr>
      <th>65</th>
      <td>63</td>
      <td>43</td>
      <td>3</td>
    </tr>
    <tr>
      <th>40</th>
      <td>40</td>
      <td>31</td>
      <td>91</td>
    </tr>
    <tr>
      <th>52</th>
      <td>65</td>
      <td>64</td>
      <td>28</td>
    </tr>
    <tr>
      <th>98</th>
      <td>97</td>
      <td>48</td>
      <td>51</td>
    </tr>
    <tr>
      <th>94</th>
      <td>50</td>
      <td>62</td>
      <td>2</td>
    </tr>
    <tr>
      <th>89</th>
      <td>33</td>
      <td>23</td>
      <td>86</td>
    </tr>
    <tr>
      <th>32</th>
      <td>17</td>
      <td>79</td>
      <td>78</td>
    </tr>
    <tr>
      <th>57</th>
      <td>39</td>
      <td>64</td>
      <td>62</td>
    </tr>
    <tr>
      <th>59</th>
      <td>78</td>
      <td>39</td>
      <td>10</td>
    </tr>
    <tr>
      <th>30</th>
      <td>21</td>
      <td>17</td>
      <td>14</td>
    </tr>
    <tr>
      <th>93</th>
      <td>13</td>
      <td>57</td>
      <td>43</td>
    </tr>
    <tr>
      <th>71</th>
      <td>48</td>
      <td>33</td>
      <td>87</td>
    </tr>
    <tr>
      <th>74</th>
      <td>20</td>
      <td>66</td>
      <td>49</td>
    </tr>
    <tr>
      <th>47</th>
      <td>16</td>
      <td>90</td>
      <td>64</td>
    </tr>
    <tr>
      <th>43</th>
      <td>41</td>
      <td>60</td>
      <td>67</td>
    </tr>
    <tr>
      <th>81</th>
      <td>28</td>
      <td>36</td>
      <td>59</td>
    </tr>
    <tr>
      <th>91</th>
      <td>74</td>
      <td>81</td>
      <td>76</td>
    </tr>
    <tr>
      <th>87</th>
      <td>51</td>
      <td>54</td>
      <td>68</td>
    </tr>
    <tr>
      <th>41</th>
      <td>6</td>
      <td>20</td>
      <td>19</td>
    </tr>
    <tr>
      <th>63</th>
      <td>97</td>
      <td>56</td>
      <td>13</td>
    </tr>
    <tr>
      <th>29</th>
      <td>12</td>
      <td>87</td>
      <td>69</td>
    </tr>
    <tr>
      <th>42</th>
      <td>18</td>
      <td>90</td>
      <td>3</td>
    </tr>
    <tr>
      <th>75</th>
      <td>23</td>
      <td>53</td>
      <td>37</td>
    </tr>
    <tr>
      <th>69</th>
      <td>56</td>
      <td>82</td>
      <td>61</td>
    </tr>
    <tr>
      <th>58</th>
      <td>23</td>
      <td>61</td>
      <td>73</td>
    </tr>
    <tr>
      <th>85</th>
      <td>48</td>
      <td>99</td>
      <td>33</td>
    </tr>
    <tr>
      <th>55</th>
      <td>64</td>
      <td>14</td>
      <td>24</td>
    </tr>
    <tr>
      <th>39</th>
      <td>64</td>
      <td>75</td>
      <td>53</td>
    </tr>
    <tr>
      <th>48</th>
      <td>3</td>
      <td>86</td>
      <td>83</td>
    </tr>
    <tr>
      <th>92</th>
      <td>96</td>
      <td>45</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
</div>



<h2 id="数据的分类处理"><a href="#数据的分类处理" class="headerlink" title="数据的分类处理"></a>数据的分类处理</h2><ul>
<li>数据分类处理的核心：<ul>
<li>groupby()函数</li>
<li>groups属性查看分组情况</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = DataFrame(&#123;<span class="string">&#x27;item&#x27;</span>:[<span class="string">&#x27;Apple&#x27;</span>,<span class="string">&#x27;Banana&#x27;</span>,<span class="string">&#x27;Orange&#x27;</span>,<span class="string">&#x27;Banana&#x27;</span>,<span class="string">&#x27;Orange&#x27;</span>,<span class="string">&#x27;Apple&#x27;</span>],</span><br><span class="line">                <span class="string">&#x27;price&#x27;</span>:[<span class="number">4</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2.5</span>,<span class="number">4</span>,<span class="number">2</span>],</span><br><span class="line">                <span class="string">&#x27;color&#x27;</span>:[<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;yellow&#x27;</span>,<span class="string">&#x27;yellow&#x27;</span>,<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;green&#x27;</span>],</span><br><span class="line">                <span class="string">&#x27;weight&#x27;</span>:[<span class="number">12</span>,<span class="number">20</span>,<span class="number">50</span>,<span class="number">30</span>,<span class="number">20</span>,<span class="number">44</span>]</span><br><span class="line">&#125;)</span><br><span class="line">df</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>item</th>
      <th>price</th>
      <th>color</th>
      <th>weight</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Apple</td>
      <td>4.0</td>
      <td>red</td>
      <td>12</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Banana</td>
      <td>3.0</td>
      <td>yellow</td>
      <td>20</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Orange</td>
      <td>3.0</td>
      <td>yellow</td>
      <td>50</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Banana</td>
      <td>2.5</td>
      <td>green</td>
      <td>30</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Orange</td>
      <td>4.0</td>
      <td>green</td>
      <td>20</td>
    </tr>
    <tr>
      <th>5</th>
      <td>Apple</td>
      <td>2.0</td>
      <td>green</td>
      <td>44</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 水果的种类进行分析</span></span><br><span class="line">df.groupby(by=<span class="string">&#x27;item&#x27;</span>)   <span class="comment"># 三个分组情况在该对象当中</span></span><br></pre></td></tr></table></figure>




<pre><code>&lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x000001DBA1507E48&gt;
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看详细的分组情况</span></span><br><span class="line">df.groupby(by=<span class="string">&#x27;item&#x27;</span>).groups</span><br></pre></td></tr></table></figure>




<pre><code>&#123;&#39;Apple&#39;: [0, 5], &#39;Banana&#39;: [1, 3], &#39;Orange&#39;: [2, 4]&#125;
</code></pre>
<ul>
<li>分组聚合</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计算出每一种水果的平均价格</span></span><br><span class="line"><span class="built_in">print</span>(df.groupby(<span class="string">&#x27;item&#x27;</span>).mean())    <span class="comment"># 对所有数值型数据取了平均</span></span><br><span class="line">df.groupby(<span class="string">&#x27;item&#x27;</span>)[<span class="string">&#x27;price&#x27;</span>].mean()  <span class="comment"># 只选择价钱做平均</span></span><br></pre></td></tr></table></figure>

<pre><code>        price  weight
item                 
Apple    3.00      28
Banana   2.75      25
Orange   3.50      35





item
Apple     3.00
Banana    2.75
Orange    3.50
Name: price, dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计算每种颜色对应水果的平均重量</span></span><br><span class="line">df.groupby(<span class="string">&#x27;color&#x27;</span>)[<span class="string">&#x27;weight&#x27;</span>].mean()</span><br></pre></td></tr></table></figure>




<pre><code>color
green     31.333333
red       12.000000
yellow    35.000000
Name: weight, dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = df.groupby(<span class="string">&#x27;color&#x27;</span>)[<span class="string">&#x27;weight&#x27;</span>].mean().to_dict()</span><br><span class="line"><span class="comment"># 将计算出的平均重量汇总到源数据</span></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&#x27;color&#x27;</span>].<span class="built_in">map</span>(dic))    <span class="comment"># 此处使用映射将所有颜色对应的数值填充满</span></span><br><span class="line">df[<span class="string">&#x27;mean_w&#x27;</span>] = df[<span class="string">&#x27;color&#x27;</span>].<span class="built_in">map</span>(dic)</span><br><span class="line">df</span><br></pre></td></tr></table></figure>

<pre><code>0    12.000000
1    35.000000
2    35.000000
3    31.333333
4    31.333333
5    31.333333
Name: color, dtype: float64
</code></pre>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>item</th>
      <th>price</th>
      <th>color</th>
      <th>weight</th>
      <th>mean_w</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Apple</td>
      <td>4.0</td>
      <td>red</td>
      <td>12</td>
      <td>12.000000</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Banana</td>
      <td>3.0</td>
      <td>yellow</td>
      <td>20</td>
      <td>35.000000</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Orange</td>
      <td>3.0</td>
      <td>yellow</td>
      <td>50</td>
      <td>35.000000</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Banana</td>
      <td>2.5</td>
      <td>green</td>
      <td>30</td>
      <td>31.333333</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Orange</td>
      <td>4.0</td>
      <td>green</td>
      <td>20</td>
      <td>31.333333</td>
    </tr>
    <tr>
      <th>5</th>
      <td>Apple</td>
      <td>2.0</td>
      <td>green</td>
      <td>44</td>
      <td>31.333333</td>
    </tr>
  </tbody>
</table>
</div>



<h2 id="高级数据聚合"><a href="#高级数据聚合" class="headerlink" title="高级数据聚合"></a>高级数据聚合</h2><ul>
<li>使用groupby()分组后，也可以使用transform和apply提供自定义函数实现更多的运算</li>
<li>df.groupby(‘item’)[‘price’].sum() &lt;==&gt; df.groupby(‘item’)[‘price’].apply(sum)</li>
<li>transform和apply都会进行运算，在transform或者apply中传入函数即可</li>
<li>transform和apply也可以传入一个lambda表达式</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_mean</span>(<span class="params">s</span>):</span></span><br><span class="line">    m_sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        m_sum += i</span><br><span class="line">    <span class="keyword">return</span> m_sum / <span class="built_in">len</span>(s)</span><br><span class="line">df.groupby(<span class="string">&#x27;item&#x27;</span>)[<span class="string">&#x27;price&#x27;</span>].transform(my_mean)  <span class="comment"># transform返回的经过映射的结果</span></span><br></pre></td></tr></table></figure>




<pre><code>0    3.00
1    2.75
2    3.50
3    2.75
4    3.50
5    3.00
Name: price, dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.groupby(<span class="string">&#x27;item&#x27;</span>)[<span class="string">&#x27;price&#x27;</span>].apply(my_mean)  <span class="comment"># apply返回的没有经过映射</span></span><br></pre></td></tr></table></figure>




<pre><code>item
Apple     3.00
Banana    2.75
Orange    3.50
Name: price, dtype: float64
</code></pre>
<h2 id="数据加载"><a href="#数据加载" class="headerlink" title="数据加载"></a>数据加载</h2><ul>
<li>读取type-.txt文件数据</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&#x27;./data/type-.txt&#x27;</span>)</span><br><span class="line">df  <span class="comment"># 可以看到此处将文件内容当成了索引</span></span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>你好-我好-他也好</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>也许-大概-有可能</td>
    </tr>
    <tr>
      <th>1</th>
      <td>然而-未必-不见得</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&#x27;./data/type-.txt&#x27;</span>,header=<span class="literal">None</span>)</span><br><span class="line"><span class="built_in">print</span>(df)  <span class="comment"># 通过header=None读取文件没有索引</span></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;./data/type-.txt&#x27;</span>,header=<span class="literal">None</span>,sep=<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">df  <span class="comment"># sep为指定分隔符，借此将数据拆分</span></span><br></pre></td></tr></table></figure>

<pre><code>           0
0  你好-我好-他也好
1  也许-大概-有可能
2  然而-未必-不见得
</code></pre>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>你好</td>
      <td>我好</td>
      <td>他也好</td>
    </tr>
    <tr>
      <th>1</th>
      <td>也许</td>
      <td>大概</td>
      <td>有可能</td>
    </tr>
    <tr>
      <th>2</th>
      <td>然而</td>
      <td>未必</td>
      <td>不见得</td>
    </tr>
  </tbody>
</table>
</div>



<ul>
<li>读取数据库中的数据</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 连接数据库，获取连接对象</span></span><br><span class="line"><span class="keyword">import</span> sqlite3 <span class="keyword">as</span> sqlite3</span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;./data/weather_2012.sqlite&#x27;</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 读取库表中的数据值</span></span><br><span class="line">sql_df = pd.read_sql(<span class="string">&#x27;select * from weather_2012&#x27;</span>, conn)</span><br><span class="line">sql_df</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>index</th>
      <th>Date/Time</th>
      <th>Temp (C)</th>
      <th>Dew Point Temp (C)</th>
      <th>Rel Hum (%)</th>
      <th>Wind Spd (km/h)</th>
      <th>Visibility (km)</th>
      <th>Stn Press (kPa)</th>
      <th>Weather</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0.0</td>
      <td>2012-01-01 00:00:00</td>
      <td>-1.8</td>
      <td>-3.9</td>
      <td>86.0</td>
      <td>4.0</td>
      <td>8.0</td>
      <td>101.24</td>
      <td>Fog</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1.0</td>
      <td>2012-01-01 01:00:00</td>
      <td>-1.8</td>
      <td>-3.7</td>
      <td>87.0</td>
      <td>4.0</td>
      <td>8.0</td>
      <td>101.24</td>
      <td>Fog</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2.0</td>
      <td>2012-01-01 02:00:00</td>
      <td>-1.8</td>
      <td>-3.4</td>
      <td>89.0</td>
      <td>7.0</td>
      <td>4.0</td>
      <td>101.26</td>
      <td>Freezing Drizzle,Fog</td>
    </tr>
    <tr>
      <th>3</th>
      <td>3.0</td>
      <td>2012-01-01 03:00:00</td>
      <td>-1.5</td>
      <td>-3.2</td>
      <td>88.0</td>
      <td>6.0</td>
      <td>4.0</td>
      <td>101.27</td>
      <td>Freezing Drizzle,Fog</td>
    </tr>
    <tr>
      <th>4</th>
      <td>4.0</td>
      <td>2012-01-01 04:00:00</td>
      <td>-1.5</td>
      <td>-3.3</td>
      <td>88.0</td>
      <td>7.0</td>
      <td>4.8</td>
      <td>101.23</td>
      <td>Fog</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>8781</th>
      <td>8781.0</td>
      <td>2012-12-31 21:00:00</td>
      <td>-0.5</td>
      <td>-1.5</td>
      <td>93.0</td>
      <td>28.0</td>
      <td>4.8</td>
      <td>99.95</td>
      <td>Snow</td>
    </tr>
    <tr>
      <th>8782</th>
      <td>8782.0</td>
      <td>2012-12-31 22:00:00</td>
      <td>-0.2</td>
      <td>-1.8</td>
      <td>89.0</td>
      <td>28.0</td>
      <td>9.7</td>
      <td>99.91</td>
      <td>Snow</td>
    </tr>
    <tr>
      <th>8783</th>
      <td>8783.0</td>
      <td>2012-12-31 23:00:00</td>
      <td>0.0</td>
      <td>-2.1</td>
      <td>86.0</td>
      <td>30.0</td>
      <td>11.3</td>
      <td>99.89</td>
      <td>Snow</td>
    </tr>
    <tr>
      <th>8784</th>
      <td>NaN</td>
      <td>None</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Fog</td>
    </tr>
    <tr>
      <th>8785</th>
      <td>NaN</td>
      <td>None</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Fog</td>
    </tr>
  </tbody>
</table>
<p>8786 rows × 9 columns</p>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将一个df中的数据值写入存储到db</span></span><br><span class="line">df.to_sql(<span class="string">&#x27;sql_data666&#x27;</span>, conn)</span><br><span class="line">sql_df = pd.read_sql(<span class="string">&#x27;select * from sql_data666&#x27;</span>, conn)</span><br><span class="line">sql_df  <span class="comment"># 写入数据库后进行读取，读取成功</span></span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>index</th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0</td>
      <td>你好</td>
      <td>我好</td>
      <td>他也好</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>也许</td>
      <td>大概</td>
      <td>有可能</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2</td>
      <td>然而</td>
      <td>未必</td>
      <td>不见得</td>
    </tr>
  </tbody>
</table>
</div>



<h2 id="透视表"><a href="#透视表" class="headerlink" title="透视表"></a>透视表</h2><ul>
<li>透视表是一种可以对数据动态排布并且分类汇总的表格格式。或许大多数人都在Excel使用过数据透视表，也体会到它的强大功能，而在pandas中它被称作pivot_table。</li>
<li>透视表的优点：<ul>
<li>灵活性高，可以随意定制你的分析计算要求</li>
<li>脉络清晰易于理解数据</li>
<li>操作性强，报表神器</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&#x27;./data/透视表-篮球赛.csv&#x27;</span>,encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">df</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>对手</th>
      <th>胜负</th>
      <th>主客场</th>
      <th>命中</th>
      <th>投篮数</th>
      <th>投篮命中率</th>
      <th>3分命中率</th>
      <th>篮板</th>
      <th>助攻</th>
      <th>得分</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>勇士</td>
      <td>胜</td>
      <td>客</td>
      <td>10</td>
      <td>23</td>
      <td>0.435</td>
      <td>0.444</td>
      <td>6</td>
      <td>11</td>
      <td>27</td>
    </tr>
    <tr>
      <th>1</th>
      <td>国王</td>
      <td>胜</td>
      <td>客</td>
      <td>8</td>
      <td>21</td>
      <td>0.381</td>
      <td>0.286</td>
      <td>3</td>
      <td>9</td>
      <td>27</td>
    </tr>
    <tr>
      <th>2</th>
      <td>小牛</td>
      <td>胜</td>
      <td>主</td>
      <td>10</td>
      <td>19</td>
      <td>0.526</td>
      <td>0.462</td>
      <td>3</td>
      <td>7</td>
      <td>29</td>
    </tr>
    <tr>
      <th>3</th>
      <td>灰熊</td>
      <td>负</td>
      <td>主</td>
      <td>8</td>
      <td>20</td>
      <td>0.400</td>
      <td>0.250</td>
      <td>5</td>
      <td>8</td>
      <td>22</td>
    </tr>
    <tr>
      <th>4</th>
      <td>76人</td>
      <td>胜</td>
      <td>客</td>
      <td>10</td>
      <td>20</td>
      <td>0.500</td>
      <td>0.250</td>
      <td>3</td>
      <td>13</td>
      <td>27</td>
    </tr>
    <tr>
      <th>5</th>
      <td>黄蜂</td>
      <td>胜</td>
      <td>客</td>
      <td>8</td>
      <td>18</td>
      <td>0.444</td>
      <td>0.400</td>
      <td>10</td>
      <td>11</td>
      <td>27</td>
    </tr>
    <tr>
      <th>6</th>
      <td>灰熊</td>
      <td>负</td>
      <td>客</td>
      <td>6</td>
      <td>19</td>
      <td>0.316</td>
      <td>0.222</td>
      <td>4</td>
      <td>8</td>
      <td>20</td>
    </tr>
    <tr>
      <th>7</th>
      <td>76人</td>
      <td>负</td>
      <td>主</td>
      <td>8</td>
      <td>21</td>
      <td>0.381</td>
      <td>0.429</td>
      <td>4</td>
      <td>7</td>
      <td>29</td>
    </tr>
    <tr>
      <th>8</th>
      <td>尼克斯</td>
      <td>胜</td>
      <td>客</td>
      <td>9</td>
      <td>23</td>
      <td>0.391</td>
      <td>0.353</td>
      <td>5</td>
      <td>9</td>
      <td>31</td>
    </tr>
    <tr>
      <th>9</th>
      <td>老鹰</td>
      <td>胜</td>
      <td>客</td>
      <td>8</td>
      <td>15</td>
      <td>0.533</td>
      <td>0.545</td>
      <td>3</td>
      <td>11</td>
      <td>29</td>
    </tr>
    <tr>
      <th>10</th>
      <td>爵士</td>
      <td>胜</td>
      <td>主</td>
      <td>19</td>
      <td>25</td>
      <td>0.760</td>
      <td>0.875</td>
      <td>2</td>
      <td>13</td>
      <td>56</td>
    </tr>
    <tr>
      <th>11</th>
      <td>骑士</td>
      <td>胜</td>
      <td>主</td>
      <td>8</td>
      <td>21</td>
      <td>0.381</td>
      <td>0.429</td>
      <td>11</td>
      <td>13</td>
      <td>35</td>
    </tr>
    <tr>
      <th>12</th>
      <td>灰熊</td>
      <td>胜</td>
      <td>主</td>
      <td>11</td>
      <td>25</td>
      <td>0.440</td>
      <td>0.429</td>
      <td>4</td>
      <td>8</td>
      <td>38</td>
    </tr>
    <tr>
      <th>13</th>
      <td>步行者</td>
      <td>胜</td>
      <td>客</td>
      <td>9</td>
      <td>21</td>
      <td>0.429</td>
      <td>0.250</td>
      <td>5</td>
      <td>15</td>
      <td>26</td>
    </tr>
    <tr>
      <th>14</th>
      <td>猛龙</td>
      <td>负</td>
      <td>主</td>
      <td>8</td>
      <td>25</td>
      <td>0.320</td>
      <td>0.273</td>
      <td>6</td>
      <td>11</td>
      <td>38</td>
    </tr>
    <tr>
      <th>15</th>
      <td>太阳</td>
      <td>胜</td>
      <td>客</td>
      <td>12</td>
      <td>22</td>
      <td>0.545</td>
      <td>0.545</td>
      <td>2</td>
      <td>7</td>
      <td>48</td>
    </tr>
    <tr>
      <th>16</th>
      <td>灰熊</td>
      <td>胜</td>
      <td>客</td>
      <td>9</td>
      <td>20</td>
      <td>0.450</td>
      <td>0.500</td>
      <td>5</td>
      <td>7</td>
      <td>29</td>
    </tr>
    <tr>
      <th>17</th>
      <td>掘金</td>
      <td>胜</td>
      <td>主</td>
      <td>6</td>
      <td>16</td>
      <td>0.375</td>
      <td>0.143</td>
      <td>8</td>
      <td>9</td>
      <td>21</td>
    </tr>
    <tr>
      <th>18</th>
      <td>尼克斯</td>
      <td>胜</td>
      <td>主</td>
      <td>12</td>
      <td>27</td>
      <td>0.444</td>
      <td>0.385</td>
      <td>2</td>
      <td>10</td>
      <td>37</td>
    </tr>
    <tr>
      <th>19</th>
      <td>篮网</td>
      <td>胜</td>
      <td>主</td>
      <td>13</td>
      <td>20</td>
      <td>0.650</td>
      <td>0.615</td>
      <td>10</td>
      <td>8</td>
      <td>37</td>
    </tr>
    <tr>
      <th>20</th>
      <td>步行者</td>
      <td>胜</td>
      <td>主</td>
      <td>8</td>
      <td>22</td>
      <td>0.364</td>
      <td>0.333</td>
      <td>8</td>
      <td>10</td>
      <td>29</td>
    </tr>
    <tr>
      <th>21</th>
      <td>湖人</td>
      <td>胜</td>
      <td>客</td>
      <td>13</td>
      <td>22</td>
      <td>0.591</td>
      <td>0.444</td>
      <td>4</td>
      <td>9</td>
      <td>36</td>
    </tr>
    <tr>
      <th>22</th>
      <td>爵士</td>
      <td>胜</td>
      <td>客</td>
      <td>8</td>
      <td>19</td>
      <td>0.421</td>
      <td>0.333</td>
      <td>5</td>
      <td>3</td>
      <td>29</td>
    </tr>
    <tr>
      <th>23</th>
      <td>开拓者</td>
      <td>胜</td>
      <td>客</td>
      <td>16</td>
      <td>29</td>
      <td>0.552</td>
      <td>0.571</td>
      <td>8</td>
      <td>3</td>
      <td>48</td>
    </tr>
    <tr>
      <th>24</th>
      <td>鹈鹕</td>
      <td>胜</td>
      <td>主</td>
      <td>8</td>
      <td>16</td>
      <td>0.500</td>
      <td>0.400</td>
      <td>1</td>
      <td>17</td>
      <td>26</td>
    </tr>
  </tbody>
</table>
</div>



<h3 id="pivot-table有四个最重要的参数index、values、columns、aggfunc"><a href="#pivot-table有四个最重要的参数index、values、columns、aggfunc" class="headerlink" title="pivot_table有四个最重要的参数index、values、columns、aggfunc"></a>pivot_table有四个最重要的参数index、values、columns、aggfunc</h3><ul>
<li>index参数：分类汇总的分类条件<ul>
<li>每个pivot_table必须拥有一个index。如果想查看哈登对阵每个队伍的得分则需要对每一个队进行分类并计算其各类得分的平均值</li>
</ul>
</li>
<li>想看哈登对阵同一对手在不同主客场下的数据，分类条件为对手和主客场</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.pivot_table(index=[<span class="string">&#x27;对手&#x27;</span>,<span class="string">&#x27;主客场&#x27;</span>])</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th></th>
      <th>3分命中率</th>
      <th>助攻</th>
      <th>命中</th>
      <th>得分</th>
      <th>投篮命中率</th>
      <th>投篮数</th>
      <th>篮板</th>
    </tr>
    <tr>
      <th>对手</th>
      <th>主客场</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th rowspan="2" valign="top">76人</th>
      <th>主</th>
      <td>0.4290</td>
      <td>7.0</td>
      <td>8.0</td>
      <td>29.0</td>
      <td>0.381</td>
      <td>21.0</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>客</th>
      <td>0.2500</td>
      <td>13.0</td>
      <td>10.0</td>
      <td>27.0</td>
      <td>0.500</td>
      <td>20.0</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th>勇士</th>
      <th>客</th>
      <td>0.4440</td>
      <td>11.0</td>
      <td>10.0</td>
      <td>27.0</td>
      <td>0.435</td>
      <td>23.0</td>
      <td>6.0</td>
    </tr>
    <tr>
      <th>国王</th>
      <th>客</th>
      <td>0.2860</td>
      <td>9.0</td>
      <td>8.0</td>
      <td>27.0</td>
      <td>0.381</td>
      <td>21.0</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th>太阳</th>
      <th>客</th>
      <td>0.5450</td>
      <td>7.0</td>
      <td>12.0</td>
      <td>48.0</td>
      <td>0.545</td>
      <td>22.0</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>小牛</th>
      <th>主</th>
      <td>0.4620</td>
      <td>7.0</td>
      <td>10.0</td>
      <td>29.0</td>
      <td>0.526</td>
      <td>19.0</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">尼克斯</th>
      <th>主</th>
      <td>0.3850</td>
      <td>10.0</td>
      <td>12.0</td>
      <td>37.0</td>
      <td>0.444</td>
      <td>27.0</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>客</th>
      <td>0.3530</td>
      <td>9.0</td>
      <td>9.0</td>
      <td>31.0</td>
      <td>0.391</td>
      <td>23.0</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>开拓者</th>
      <th>客</th>
      <td>0.5710</td>
      <td>3.0</td>
      <td>16.0</td>
      <td>48.0</td>
      <td>0.552</td>
      <td>29.0</td>
      <td>8.0</td>
    </tr>
    <tr>
      <th>掘金</th>
      <th>主</th>
      <td>0.1430</td>
      <td>9.0</td>
      <td>6.0</td>
      <td>21.0</td>
      <td>0.375</td>
      <td>16.0</td>
      <td>8.0</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">步行者</th>
      <th>主</th>
      <td>0.3330</td>
      <td>10.0</td>
      <td>8.0</td>
      <td>29.0</td>
      <td>0.364</td>
      <td>22.0</td>
      <td>8.0</td>
    </tr>
    <tr>
      <th>客</th>
      <td>0.2500</td>
      <td>15.0</td>
      <td>9.0</td>
      <td>26.0</td>
      <td>0.429</td>
      <td>21.0</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>湖人</th>
      <th>客</th>
      <td>0.4440</td>
      <td>9.0</td>
      <td>13.0</td>
      <td>36.0</td>
      <td>0.591</td>
      <td>22.0</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">灰熊</th>
      <th>主</th>
      <td>0.3395</td>
      <td>8.0</td>
      <td>9.5</td>
      <td>30.0</td>
      <td>0.420</td>
      <td>22.5</td>
      <td>4.5</td>
    </tr>
    <tr>
      <th>客</th>
      <td>0.3610</td>
      <td>7.5</td>
      <td>7.5</td>
      <td>24.5</td>
      <td>0.383</td>
      <td>19.5</td>
      <td>4.5</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">爵士</th>
      <th>主</th>
      <td>0.8750</td>
      <td>13.0</td>
      <td>19.0</td>
      <td>56.0</td>
      <td>0.760</td>
      <td>25.0</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>客</th>
      <td>0.3330</td>
      <td>3.0</td>
      <td>8.0</td>
      <td>29.0</td>
      <td>0.421</td>
      <td>19.0</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>猛龙</th>
      <th>主</th>
      <td>0.2730</td>
      <td>11.0</td>
      <td>8.0</td>
      <td>38.0</td>
      <td>0.320</td>
      <td>25.0</td>
      <td>6.0</td>
    </tr>
    <tr>
      <th>篮网</th>
      <th>主</th>
      <td>0.6150</td>
      <td>8.0</td>
      <td>13.0</td>
      <td>37.0</td>
      <td>0.650</td>
      <td>20.0</td>
      <td>10.0</td>
    </tr>
    <tr>
      <th>老鹰</th>
      <th>客</th>
      <td>0.5450</td>
      <td>11.0</td>
      <td>8.0</td>
      <td>29.0</td>
      <td>0.533</td>
      <td>15.0</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th>骑士</th>
      <th>主</th>
      <td>0.4290</td>
      <td>13.0</td>
      <td>8.0</td>
      <td>35.0</td>
      <td>0.381</td>
      <td>21.0</td>
      <td>11.0</td>
    </tr>
    <tr>
      <th>鹈鹕</th>
      <th>主</th>
      <td>0.4000</td>
      <td>17.0</td>
      <td>8.0</td>
      <td>26.0</td>
      <td>0.500</td>
      <td>16.0</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>黄蜂</th>
      <th>客</th>
      <td>0.4000</td>
      <td>11.0</td>
      <td>8.0</td>
      <td>27.0</td>
      <td>0.444</td>
      <td>18.0</td>
      <td>10.0</td>
    </tr>
  </tbody>
</table>
</div>



<ul>
<li>values参数：需要对计算的数据进行筛选<ul>
<li>如果我们只需要哈登在主客场和不同胜负情况下的得分、篮板与助攻三项数据：</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.pivot_table(index=[<span class="string">&#x27;主客场&#x27;</span>,<span class="string">&#x27;胜负&#x27;</span>],values=[<span class="string">&#x27;得分&#x27;</span>,<span class="string">&#x27;篮板&#x27;</span>,<span class="string">&#x27;助攻&#x27;</span>])</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th></th>
      <th>助攻</th>
      <th>得分</th>
      <th>篮板</th>
    </tr>
    <tr>
      <th>主客场</th>
      <th>胜负</th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th rowspan="2" valign="top">主</th>
      <th>胜</th>
      <td>10.555556</td>
      <td>34.222222</td>
      <td>5.444444</td>
    </tr>
    <tr>
      <th>负</th>
      <td>8.666667</td>
      <td>29.666667</td>
      <td>5.000000</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">客</th>
      <th>胜</th>
      <td>9.000000</td>
      <td>32.000000</td>
      <td>4.916667</td>
    </tr>
    <tr>
      <th>负</th>
      <td>8.000000</td>
      <td>20.000000</td>
      <td>4.000000</td>
    </tr>
  </tbody>
</table>
</div>



<ul>
<li>Aggfunc参数：设置我们对数据聚合时进行的函数操作<ul>
<li>当我们未设置aggfunc时，它默认aggfunc=’mean’计算均值。</li>
</ul>
</li>
<li>还想获得james harden在主客场和不同胜负情况下的总得分、总篮板、总助攻时：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.pivot_table(index=[<span class="string">&#x27;主客场&#x27;</span>,<span class="string">&#x27;胜负&#x27;</span>],values=[<span class="string">&#x27;得分&#x27;</span>,<span class="string">&#x27;篮板&#x27;</span>,<span class="string">&#x27;助攻&#x27;</span>],aggfunc=<span class="string">&#x27;sum&#x27;</span>)</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th></th>
      <th>助攻</th>
      <th>得分</th>
      <th>篮板</th>
    </tr>
    <tr>
      <th>主客场</th>
      <th>胜负</th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th rowspan="2" valign="top">主</th>
      <th>胜</th>
      <td>95</td>
      <td>308</td>
      <td>49</td>
    </tr>
    <tr>
      <th>负</th>
      <td>26</td>
      <td>89</td>
      <td>15</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">客</th>
      <th>胜</th>
      <td>108</td>
      <td>384</td>
      <td>59</td>
    </tr>
    <tr>
      <th>负</th>
      <td>8</td>
      <td>20</td>
      <td>4</td>
    </tr>
  </tbody>
</table>
</div>



<ul>
<li>Columns:可以设置列层次字段<ul>
<li>对values字段进行分类</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取所有队主客场的总得分</span></span><br><span class="line">df.pivot_table(index=[<span class="string">&#x27;主客场&#x27;</span>],values=[<span class="string">&#x27;得分&#x27;</span>],aggfunc=<span class="string">&#x27;sum&#x27;</span>)</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>得分</th>
    </tr>
    <tr>
      <th>主客场</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>主</th>
      <td>397</td>
    </tr>
    <tr>
      <th>客</th>
      <td>404</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取每个队主客场的总得分（在总得分的基础上又进行了对手的分类）</span></span><br><span class="line">df.pivot_table(index=[<span class="string">&#x27;主客场&#x27;</span>],values=[<span class="string">&#x27;得分&#x27;</span>],columns=<span class="string">&#x27;对手&#x27;</span>,aggfunc=<span class="string">&#x27;sum&#x27;</span>,fill_value=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead tr th &#123;
    text-align: left;
&#125;

.dataframe thead tr:last-of-type th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr>
      <th></th>
      <th colspan="18" halign="left">得分</th>
    </tr>
    <tr>
      <th>对手</th>
      <th>76人</th>
      <th>勇士</th>
      <th>国王</th>
      <th>太阳</th>
      <th>小牛</th>
      <th>尼克斯</th>
      <th>开拓者</th>
      <th>掘金</th>
      <th>步行者</th>
      <th>湖人</th>
      <th>灰熊</th>
      <th>爵士</th>
      <th>猛龙</th>
      <th>篮网</th>
      <th>老鹰</th>
      <th>骑士</th>
      <th>鹈鹕</th>
      <th>黄蜂</th>
    </tr>
    <tr>
      <th>主客场</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>主</th>
      <td>29</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>29</td>
      <td>37</td>
      <td>0</td>
      <td>21</td>
      <td>29</td>
      <td>0</td>
      <td>60</td>
      <td>56</td>
      <td>38</td>
      <td>37</td>
      <td>0</td>
      <td>35</td>
      <td>26</td>
      <td>0</td>
    </tr>
    <tr>
      <th>客</th>
      <td>27</td>
      <td>27</td>
      <td>27</td>
      <td>48</td>
      <td>0</td>
      <td>31</td>
      <td>48</td>
      <td>0</td>
      <td>26</td>
      <td>36</td>
      <td>49</td>
      <td>29</td>
      <td>0</td>
      <td>0</td>
      <td>29</td>
      <td>0</td>
      <td>0</td>
      <td>27</td>
    </tr>
  </tbody>
</table>
</div>



<h2 id="交叉表"><a href="#交叉表" class="headerlink" title="交叉表"></a>交叉表</h2><ul>
<li>是一种用于计算分组的特殊透视图，对数据进行汇总</li>
<li>pd.crosstab(index,columns)<ul>
<li>index:分组数据，交叉表的行索引</li>
<li>columns:交叉表的列索引</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = DataFrame(&#123;<span class="string">&#x27;sex&#x27;</span>:[<span class="string">&#x27;man&#x27;</span>,<span class="string">&#x27;man&#x27;</span>,<span class="string">&#x27;women&#x27;</span>,<span class="string">&#x27;women&#x27;</span>,<span class="string">&#x27;man&#x27;</span>,<span class="string">&#x27;women&#x27;</span>,<span class="string">&#x27;man&#x27;</span>,<span class="string">&#x27;women&#x27;</span>,<span class="string">&#x27;women&#x27;</span>],</span><br><span class="line">                <span class="string">&#x27;age&#x27;</span>:[<span class="number">15</span>,<span class="number">23</span>,<span class="number">25</span>,<span class="number">17</span>,<span class="number">35</span>,<span class="number">57</span>,<span class="number">24</span>,<span class="number">31</span>,<span class="number">22</span>],</span><br><span class="line">                <span class="string">&#x27;smoke&#x27;</span>:[<span class="literal">True</span>,<span class="literal">False</span>,<span class="literal">False</span>,<span class="literal">True</span>,<span class="literal">True</span>,<span class="literal">False</span>,<span class="literal">False</span>,<span class="literal">True</span>,<span class="literal">False</span>],</span><br><span class="line">                <span class="string">&#x27;height&#x27;</span>:[<span class="number">168</span>,<span class="number">179</span>,<span class="number">181</span>,<span class="number">166</span>,<span class="number">173</span>,<span class="number">178</span>,<span class="number">188</span>,<span class="number">190</span>,<span class="number">160</span>]</span><br><span class="line">&#125;)</span><br><span class="line">df</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>sex</th>
      <th>age</th>
      <th>smoke</th>
      <th>height</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>man</td>
      <td>15</td>
      <td>True</td>
      <td>168</td>
    </tr>
    <tr>
      <th>1</th>
      <td>man</td>
      <td>23</td>
      <td>False</td>
      <td>179</td>
    </tr>
    <tr>
      <th>2</th>
      <td>women</td>
      <td>25</td>
      <td>False</td>
      <td>181</td>
    </tr>
    <tr>
      <th>3</th>
      <td>women</td>
      <td>17</td>
      <td>True</td>
      <td>166</td>
    </tr>
    <tr>
      <th>4</th>
      <td>man</td>
      <td>35</td>
      <td>True</td>
      <td>173</td>
    </tr>
    <tr>
      <th>5</th>
      <td>women</td>
      <td>57</td>
      <td>False</td>
      <td>178</td>
    </tr>
    <tr>
      <th>6</th>
      <td>man</td>
      <td>24</td>
      <td>False</td>
      <td>188</td>
    </tr>
    <tr>
      <th>7</th>
      <td>women</td>
      <td>31</td>
      <td>True</td>
      <td>190</td>
    </tr>
    <tr>
      <th>8</th>
      <td>women</td>
      <td>22</td>
      <td>False</td>
      <td>160</td>
    </tr>
  </tbody>
</table>
</div>



<ul>
<li>求出各个性别抽烟的人数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.crosstab(df.smoke,df.sex)</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th>sex</th>
      <th>man</th>
      <th>women</th>
    </tr>
    <tr>
      <th>smoke</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>False</th>
      <td>2</td>
      <td>3</td>
    </tr>
    <tr>
      <th>True</th>
      <td>2</td>
      <td>2</td>
    </tr>
  </tbody>
</table>
</div>



<ul>
<li>求出各个年龄段抽烟人情况</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.crosstab(df.age,df.smoke)</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th>smoke</th>
      <th>False</th>
      <th>True</th>
    </tr>
    <tr>
      <th>age</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>15</th>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>17</th>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>22</th>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>23</th>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>24</th>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>25</th>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>31</th>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>35</th>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>57</th>
      <td>1</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
</div>



<hr>
<p>本文提及的数据集下载地址：<br>链接：<a href="https://pan.baidu.com/s/1lhAiSXBw47MK9QdqwA05Lg">https://pan.baidu.com/s/1lhAiSXBw47MK9QdqwA05Lg</a><br>提取码：1111 </p>
<hr>
]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>用户消费记录数据分析案例</title>
    <url>/2021/05/27/test_9/</url>
    <content><![CDATA[<h2 id="第一部分：数据类型处理"><a href="#第一部分：数据类型处理" class="headerlink" title="第一部分：数据类型处理"></a>第一部分：数据类型处理</h2><ul>
<li>数据加载<ul>
<li>字段含义：<ul>
<li>user_id:用户ID</li>
<li>order_dt:购买日期</li>
<li>order_product:购买产品的数量</li>
<li>order_amount:购买金额</li>
</ul>
</li>
</ul>
</li>
<li>观察数据<ul>
<li>查看数据的数据类型</li>
<li>数据中是否存储在缺失值</li>
<li>将order_dt转换成时间类型</li>
<li>查看数据的统计描述<ul>
<li>计算所有用户购买商品的平均数量</li>
<li>计算所有用户购买商品的平均花费</li>
</ul>
</li>
<li>在源数据中添加一列表示月份:astype(‘datetime64[M]‘)</li>
</ul>
</li>
</ul>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> DataFrame,Series</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#数据的加载</span></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;./data/CDNOW_master.txt&#x27;</span>,header=<span class="literal">None</span>,sep=<span class="string">&#x27;\s+&#x27;</span>,names=[<span class="string">&#x27;user_id&#x27;</span>,<span class="string">&#x27;order_dt&#x27;</span>,<span class="string">&#x27;order_product&#x27;</span>,<span class="string">&#x27;order_amount&#x27;</span>])</span><br><span class="line">df  <span class="comment"># 该数据没有列索引故header=None，原数据用空格分割数据需要拆分故seq=&#x27;\s+&#x27;(表示n个不同空格)，添加列索引names=[&#x27;......&#x27;]</span></span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>user_id</th>
      <th>order_dt</th>
      <th>order_product</th>
      <th>order_amount</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>19970101</td>
      <td>1</td>
      <td>11.77</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>19970112</td>
      <td>1</td>
      <td>12.00</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2</td>
      <td>19970112</td>
      <td>5</td>
      <td>77.00</td>
    </tr>
    <tr>
      <th>3</th>
      <td>3</td>
      <td>19970102</td>
      <td>2</td>
      <td>20.76</td>
    </tr>
    <tr>
      <th>4</th>
      <td>3</td>
      <td>19970330</td>
      <td>2</td>
      <td>20.76</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>69654</th>
      <td>23568</td>
      <td>19970405</td>
      <td>4</td>
      <td>83.74</td>
    </tr>
    <tr>
      <th>69655</th>
      <td>23568</td>
      <td>19970422</td>
      <td>1</td>
      <td>14.99</td>
    </tr>
    <tr>
      <th>69656</th>
      <td>23569</td>
      <td>19970325</td>
      <td>2</td>
      <td>25.74</td>
    </tr>
    <tr>
      <th>69657</th>
      <td>23570</td>
      <td>19970325</td>
      <td>3</td>
      <td>51.12</td>
    </tr>
    <tr>
      <th>69658</th>
      <td>23570</td>
      <td>19970326</td>
      <td>2</td>
      <td>42.96</td>
    </tr>
  </tbody>
</table>
<p>69659 rows × 4 columns</p>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.info()   <span class="comment"># 数据类型和缺失值尽收眼底，此处表格满编无空值</span></span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
RangeIndex: 69659 entries, 0 to 69658
Data columns (total 4 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   user_id        69659 non-null  int64  
 1   order_dt       69659 non-null  int64  
 2   order_product  69659 non-null  int64  
 3   order_amount   69659 non-null  float64
dtypes: float64(1), int64(3)
memory usage: 2.1 MB
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将order_dt转换成时间类型</span></span><br><span class="line">df[<span class="string">&#x27;order_dt&#x27;</span>] = pd.to_datetime(df[<span class="string">&#x27;order_dt&#x27;</span>],<span class="built_in">format</span>=<span class="string">&#x27;%Y%m%d&#x27;</span>)</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>user_id</th>
      <th>order_dt</th>
      <th>order_product</th>
      <th>order_amount</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>1997-01-01</td>
      <td>1</td>
      <td>11.77</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>1997-01-12</td>
      <td>1</td>
      <td>12.00</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2</td>
      <td>1997-01-12</td>
      <td>5</td>
      <td>77.00</td>
    </tr>
    <tr>
      <th>3</th>
      <td>3</td>
      <td>1997-01-02</td>
      <td>2</td>
      <td>20.76</td>
    </tr>
    <tr>
      <th>4</th>
      <td>3</td>
      <td>1997-03-30</td>
      <td>2</td>
      <td>20.76</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看数据统计描述</span></span><br><span class="line">df.describe()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>user_id</th>
      <th>order_product</th>
      <th>order_amount</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>69659.000000</td>
      <td>69659.000000</td>
      <td>69659.000000</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>11470.854592</td>
      <td>2.410040</td>
      <td>35.893648</td>
    </tr>
    <tr>
      <th>std</th>
      <td>6819.904848</td>
      <td>2.333924</td>
      <td>36.281942</td>
    </tr>
    <tr>
      <th>min</th>
      <td>1.000000</td>
      <td>1.000000</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>5506.000000</td>
      <td>1.000000</td>
      <td>14.490000</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>11410.000000</td>
      <td>2.000000</td>
      <td>25.980000</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>17273.000000</td>
      <td>3.000000</td>
      <td>43.700000</td>
    </tr>
    <tr>
      <th>max</th>
      <td>23570.000000</td>
      <td>99.000000</td>
      <td>1286.010000</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在源数据中添加一列表示月份:astype(&#x27;datetime64[M]&#x27;)</span></span><br><span class="line">df[<span class="string">&#x27;order_dt&#x27;</span>].astype(<span class="string">&#x27;datetime64[M]&#x27;</span>)  <span class="comment"># 基于order_dt取出其中的月份</span></span><br><span class="line">df[<span class="string">&#x27;month&#x27;</span>] = df[<span class="string">&#x27;order_dt&#x27;</span>].astype(<span class="string">&#x27;datetime64[M]&#x27;</span>)</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>user_id</th>
      <th>order_dt</th>
      <th>order_product</th>
      <th>order_amount</th>
      <th>month</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>1997-01-01</td>
      <td>1</td>
      <td>11.77</td>
      <td>1997-01-01</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>1997-01-12</td>
      <td>1</td>
      <td>12.00</td>
      <td>1997-01-01</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2</td>
      <td>1997-01-12</td>
      <td>5</td>
      <td>77.00</td>
      <td>1997-01-01</td>
    </tr>
    <tr>
      <th>3</th>
      <td>3</td>
      <td>1997-01-02</td>
      <td>2</td>
      <td>20.76</td>
      <td>1997-01-01</td>
    </tr>
    <tr>
      <th>4</th>
      <td>3</td>
      <td>1997-03-30</td>
      <td>2</td>
      <td>20.76</td>
      <td>1997-03-01</td>
    </tr>
  </tbody>
</table>
</div>



<h2 id="第二部分：按月数据分析"><a href="#第二部分：按月数据分析" class="headerlink" title="第二部分：按月数据分析"></a>第二部分：按月数据分析</h2><ul>
<li>用户每月花费的总金额<ul>
<li>绘制曲线图展示</li>
</ul>
</li>
<li>所有用户每月的产品购买量</li>
<li>所有用户每月的消费总次数</li>
<li>统计每月的消费人数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用户每月花费的总金额</span></span><br><span class="line">df.groupby(<span class="string">&#x27;month&#x27;</span>)[<span class="string">&#x27;order_amount&#x27;</span>].<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure>




<pre><code>month
1997-01-01    299060.17
1997-02-01    379590.03
1997-03-01    393155.27
1997-04-01    142824.49
1997-05-01    107933.30
1997-06-01    108395.87
1997-07-01    122078.88
1997-08-01     88367.69
1997-09-01     81948.80
1997-10-01     89780.77
1997-11-01    115448.64
1997-12-01     95577.35
1998-01-01     76756.78
1998-02-01     77096.96
1998-03-01    108970.15
1998-04-01     66231.52
1998-05-01     70989.66
1998-06-01     76109.30
Name: order_amount, dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 绘制曲线图展示    df.groupby(&#x27;month&#x27;)[&#x27;order_amount&#x27;].sum().plot()</span></span><br><span class="line">plt.plot(df.groupby(<span class="string">&#x27;month&#x27;</span>)[<span class="string">&#x27;order_amount&#x27;</span>].<span class="built_in">sum</span>())</span><br></pre></td></tr></table></figure>




<pre><code>[&lt;matplotlib.lines.Line2D at 0x16f5d926e48&gt;]
</code></pre>
<p><img src="https://wx4.sinaimg.cn/mw690/006nxkHvly1gqwvtgzkk4j30ay06w74c.jpg"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 所有用户每月的产品购买量</span></span><br><span class="line">df.groupby(<span class="string">&#x27;month&#x27;</span>)[<span class="string">&#x27;order_product&#x27;</span>].<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure>




<pre><code>month
1997-01-01    19416
1997-02-01    24921
1997-03-01    26159
1997-04-01     9729
1997-05-01     7275
1997-06-01     7301
1997-07-01     8131
1997-08-01     5851
1997-09-01     5729
1997-10-01     6203
1997-11-01     7812
1997-12-01     6418
1998-01-01     5278
1998-02-01     5340
1998-03-01     7431
1998-04-01     4697
1998-05-01     4903
1998-06-01     5287
Name: order_product, dtype: int64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 所有用户每月的消费总次数(原始数据中的一行数据表示一次消费记录)</span></span><br><span class="line">df.groupby(<span class="string">&#x27;month&#x27;</span>)[<span class="string">&#x27;user_id&#x27;</span>].count()</span><br></pre></td></tr></table></figure>




<pre><code>month
1997-01-01     8928
1997-02-01    11272
1997-03-01    11598
1997-04-01     3781
1997-05-01     2895
1997-06-01     3054
1997-07-01     2942
1997-08-01     2320
1997-09-01     2296
1997-10-01     2562
1997-11-01     2750
1997-12-01     2504
1998-01-01     2032
1998-02-01     2026
1998-03-01     2793
1998-04-01     1878
1998-05-01     1985
1998-06-01     2043
Name: user_id, dtype: int64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 统计每月的消费人数，可能同一天一个用户会消费多次</span></span><br><span class="line">df.groupby(<span class="string">&#x27;month&#x27;</span>)[<span class="string">&#x27;user_id&#x27;</span>].nunique()    <span class="comment"># nunique表示去重后的数据个数</span></span><br></pre></td></tr></table></figure>




<pre><code>month
1997-01-01    7846
1997-02-01    9633
1997-03-01    9524
1997-04-01    2822
1997-05-01    2214
1997-06-01    2339
1997-07-01    2180
1997-08-01    1772
1997-09-01    1739
1997-10-01    1839
1997-11-01    2028
1997-12-01    1864
1998-01-01    1537
1998-02-01    1551
1998-03-01    2060
1998-04-01    1437
1998-05-01    1488
1998-06-01    1506
Name: user_id, dtype: int64
</code></pre>
<h2 id="第三部分：用户个体消费数据分析"><a href="#第三部分：用户个体消费数据分析" class="headerlink" title="第三部分：用户个体消费数据分析"></a>第三部分：用户个体消费数据分析</h2><ul>
<li>用户消费总金额和消费总次数的统计描述</li>
<li>用户消费金额和消费产品数量的散点图</li>
<li>各个用户消费总金额的直方分布图(消费金额在1000之内的分布)</li>
<li>各个用户消费的总数量的直方分布图(消费商品的数量在100次之内的分布)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用户消费总金额和消费总次数的统计描述</span></span><br><span class="line">df.groupby(<span class="string">&#x27;user_id&#x27;</span>)[<span class="string">&#x27;order_amount&#x27;</span>].<span class="built_in">sum</span>() <span class="comment"># 每个用户消费的总金额</span></span><br></pre></td></tr></table></figure>




<pre><code>user_id
1         11.77
2         89.00
3        156.46
4        100.50
5        385.61
          ...  
23566     36.00
23567     20.97
23568    121.70
23569     25.74
23570     94.08
Name: order_amount, Length: 23570, dtype: float64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 每个用户消费的总次数</span></span><br><span class="line">df.groupby(<span class="string">&#x27;user_id&#x27;</span>).count()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>order_dt</th>
      <th>order_product</th>
      <th>order_amount</th>
      <th>month</th>
    </tr>
    <tr>
      <th>user_id</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>1</td>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2</td>
      <td>2</td>
      <td>2</td>
      <td>2</td>
    </tr>
    <tr>
      <th>3</th>
      <td>6</td>
      <td>6</td>
      <td>6</td>
      <td>6</td>
    </tr>
    <tr>
      <th>4</th>
      <td>4</td>
      <td>4</td>
      <td>4</td>
      <td>4</td>
    </tr>
    <tr>
      <th>5</th>
      <td>11</td>
      <td>11</td>
      <td>11</td>
      <td>11</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>23566</th>
      <td>1</td>
      <td>1</td>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>23567</th>
      <td>1</td>
      <td>1</td>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>23568</th>
      <td>3</td>
      <td>3</td>
      <td>3</td>
      <td>3</td>
    </tr>
    <tr>
      <th>23569</th>
      <td>1</td>
      <td>1</td>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>23570</th>
      <td>2</td>
      <td>2</td>
      <td>2</td>
      <td>2</td>
    </tr>
  </tbody>
</table>
<p>23570 rows × 4 columns</p>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用户消费金额和消费产品数量的散点图</span></span><br><span class="line">user_amount_sum = df.groupby(<span class="string">&#x27;user_id&#x27;</span>)[<span class="string">&#x27;order_amount&#x27;</span>].<span class="built_in">sum</span>()</span><br><span class="line">user_product_sum = df.groupby(<span class="string">&#x27;user_id&#x27;</span>)[<span class="string">&#x27;order_product&#x27;</span>].<span class="built_in">sum</span>()</span><br><span class="line">plt.scatter(user_product_sum,user_amount_sum)</span><br></pre></td></tr></table></figure>




<pre><code>&lt;matplotlib.collections.PathCollection at 0x16f5d83d6d8&gt;
</code></pre>
<p><img src="https://wx3.sinaimg.cn/mw690/006nxkHvly1gqwvtgzim1j30as06w3yf.jpg"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 各个用户消费总金额的直方分布图(消费金额在1000之内的分布)</span></span><br><span class="line">df.groupby(<span class="string">&#x27;user_id&#x27;</span>).<span class="built_in">sum</span>().query(<span class="string">&#x27;order_amount &lt;= 1000&#x27;</span>)[<span class="string">&#x27;order_amount&#x27;</span>]   <span class="comment"># 取相应的数据</span></span><br><span class="line">df.groupby(<span class="string">&#x27;user_id&#x27;</span>).<span class="built_in">sum</span>().query(<span class="string">&#x27;order_amount &lt;= 1000&#x27;</span>)[<span class="string">&#x27;order_amount&#x27;</span>].hist()    <span class="comment"># 作图</span></span><br></pre></td></tr></table></figure>




<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x16f5da9b240&gt;
</code></pre>
<p><img src="https://wx4.sinaimg.cn/mw690/006nxkHvly1gqwvtgzlf6j30as06wmx1.jpg"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 各个用户消费的总数量的直方分布图(消费商品的数量在100次之内的分布)</span></span><br><span class="line">df.groupby(<span class="string">&#x27;user_id&#x27;</span>).<span class="built_in">sum</span>().query(<span class="string">&#x27;order_product &lt;= 100&#x27;</span>)[<span class="string">&#x27;order_product&#x27;</span>].hist()</span><br></pre></td></tr></table></figure>




<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x16f5db37208&gt;
</code></pre>
<p><img src="https://wx1.sinaimg.cn/mw690/006nxkHvly1gqwvtgzpvfj30as06w746.jpg"></p>
<h2 id="第四部分：用户消费行为分析"><a href="#第四部分：用户消费行为分析" class="headerlink" title="第四部分：用户消费行为分析"></a>第四部分：用户消费行为分析</h2><ul>
<li>用户第一次消费的月份分布，和人数统计<ul>
<li>绘制线形图</li>
</ul>
</li>
<li>用户最后一次消费的时间分布，和人数统计<ul>
<li>绘制线形图</li>
</ul>
</li>
<li>新老客户的占比<ul>
<li>消费一次为新用户</li>
<li>消费多次为老用户<ul>
<li>分析出每一个用户的第一个消费和最后一次消费的时间<ul>
<li>agg([‘func1’,’func2’]):对分组后的结果进行指定聚合</li>
</ul>
</li>
<li>分析出新老客户的消费比例</li>
</ul>
</li>
</ul>
</li>
<li>用户分层<ul>
<li>分析得出每个用户的总购买量和总消费金额and最近一次消费的时间的表格rfm</li>
<li>RFM模型设计<ul>
<li>R表示客户最近一次交易时间的间隔。<ul>
<li>/np.timedelta64(1,’D’)：去除days</li>
</ul>
</li>
<li>F表示客户购买商品的总数量,F值越大，表示客户交易越频繁，反之则表示客户交易不够活跃。</li>
<li>M表示客户交易的金额。M值越大，表示客户价值越高，反之则表示客户价值越低。</li>
<li>将R，F，M作用到rfm表中</li>
</ul>
</li>
<li>根据价值分层，将用户分为：<ul>
<li>重要价值客户</li>
<li>重要保持客户</li>
<li>重要挽留客户</li>
<li>重要发展客户</li>
<li>一般价值客户</li>
<li>一般保持客户</li>
<li>一般挽留客户</li>
<li>一般发展客户<ul>
<li>使用已有的分层模型即可rfm_func</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用户第一次消费的月份分布，和人数统计</span></span><br><span class="line"><span class="comment"># 第一次消费的月份：每一个用户消费月份的最小值就是该用户第一次消费的月份</span></span><br><span class="line">df.groupby(<span class="string">&#x27;user_id&#x27;</span>)[<span class="string">&#x27;month&#x27;</span>].<span class="built_in">min</span>()</span><br></pre></td></tr></table></figure>




<pre><code>user_id
1       1997-01-01
2       1997-01-01
3       1997-01-01
4       1997-01-01
5       1997-01-01
           ...    
23566   1997-03-01
23567   1997-03-01
23568   1997-03-01
23569   1997-03-01
23570   1997-03-01
Name: month, Length: 23570, dtype: datetime64[ns]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.groupby(<span class="string">&#x27;user_id&#x27;</span>)[<span class="string">&#x27;month&#x27;</span>].<span class="built_in">min</span>().value_counts() <span class="comment"># 人数统计</span></span><br><span class="line">df.groupby(<span class="string">&#x27;user_id&#x27;</span>)[<span class="string">&#x27;month&#x27;</span>].<span class="built_in">min</span>().value_counts().plot()</span><br></pre></td></tr></table></figure>




<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x16f5ecd5c88&gt;
</code></pre>
<p><img src="https://wx4.sinaimg.cn/mw690/006nxkHvly1gqwvtgzj9mj30at073glo.jpg"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用户最后一次消费的时间分布，和人数统计</span></span><br><span class="line"><span class="comment"># 用户消费月份的最大值就是用户最后一次消费的月份</span></span><br><span class="line">df.groupby(<span class="string">&#x27;user_id&#x27;</span>)[<span class="string">&#x27;month&#x27;</span>].<span class="built_in">max</span>().value_counts().plot()</span><br></pre></td></tr></table></figure>




<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x16f5db224e0&gt;
</code></pre>
<p><img src="https://wx2.sinaimg.cn/mw690/006nxkHvly1gqwvtgzp2ej30al06u0sq.jpg"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新老客户的占比</span></span><br><span class="line"><span class="comment"># 消费一次为新用户，消费多次为老用户</span></span><br><span class="line"><span class="comment"># 如何获知用户是否为第一次消费？可以根据用户的消费时间进行判定？</span></span><br><span class="line">    <span class="comment"># 如果用户的第一次消费时间和最后一次消费时间一样，则该用户只消费了一次为新用户，否则为老用户</span></span><br><span class="line">new_old_user_df = df.groupby(<span class="string">&#x27;user_id&#x27;</span>)[<span class="string">&#x27;order_dt&#x27;</span>].agg([<span class="string">&#x27;min&#x27;</span>,<span class="string">&#x27;max&#x27;</span>])   <span class="comment"># agg对分组后的结果进行多种指定聚合</span></span><br><span class="line">new_old_user_df[<span class="string">&#x27;min&#x27;</span>] == new_old_user_df[<span class="string">&#x27;max&#x27;</span>] <span class="comment"># True新用户，False老用户</span></span><br><span class="line"><span class="comment"># 统计True和False的个数</span></span><br><span class="line">(new_old_user_df[<span class="string">&#x27;min&#x27;</span>] == new_old_user_df[<span class="string">&#x27;max&#x27;</span>]).value_counts()</span><br></pre></td></tr></table></figure>




<pre><code>True     12054
False    11516
dtype: int64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分析得出每个用户的总购买量和总消费金额and最近一次消费的时间的表格rfm</span></span><br><span class="line">rfm = df.pivot_table(index=<span class="string">&#x27;user_id&#x27;</span>,aggfunc=&#123;<span class="string">&#x27;order_product&#x27;</span>:<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;order_amount&#x27;</span>:<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;order_dt&#x27;</span>:<span class="string">&quot;max&quot;</span>&#125;)</span><br><span class="line">rfm</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>order_amount</th>
      <th>order_dt</th>
      <th>order_product</th>
    </tr>
    <tr>
      <th>user_id</th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1</th>
      <td>11.77</td>
      <td>1997-01-01</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>89.00</td>
      <td>1997-01-12</td>
      <td>6</td>
    </tr>
    <tr>
      <th>3</th>
      <td>156.46</td>
      <td>1998-05-28</td>
      <td>16</td>
    </tr>
    <tr>
      <th>4</th>
      <td>100.50</td>
      <td>1997-12-12</td>
      <td>7</td>
    </tr>
    <tr>
      <th>5</th>
      <td>385.61</td>
      <td>1998-01-03</td>
      <td>29</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>23566</th>
      <td>36.00</td>
      <td>1997-03-25</td>
      <td>2</td>
    </tr>
    <tr>
      <th>23567</th>
      <td>20.97</td>
      <td>1997-03-25</td>
      <td>1</td>
    </tr>
    <tr>
      <th>23568</th>
      <td>121.70</td>
      <td>1997-04-22</td>
      <td>6</td>
    </tr>
    <tr>
      <th>23569</th>
      <td>25.74</td>
      <td>1997-03-25</td>
      <td>2</td>
    </tr>
    <tr>
      <th>23570</th>
      <td>94.08</td>
      <td>1997-03-26</td>
      <td>5</td>
    </tr>
  </tbody>
</table>
<p>23570 rows × 3 columns</p>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># R表示客户最近一次交易时间的间隔</span></span><br><span class="line">max_dt = df[<span class="string">&#x27;order_dt&#x27;</span>].<span class="built_in">max</span>() <span class="comment"># 今天的日期</span></span><br><span class="line"><span class="comment"># 每一个用户最后一次交易的时间</span></span><br><span class="line">-(df.groupby(<span class="string">&#x27;user_id&#x27;</span>)[<span class="string">&#x27;order_dt&#x27;</span>].<span class="built_in">max</span>() - max_dt)</span><br><span class="line">rfm[<span class="string">&#x27;R&#x27;</span>] = -(df.groupby(<span class="string">&#x27;user_id&#x27;</span>)[<span class="string">&#x27;order_dt&#x27;</span>].<span class="built_in">max</span>() - max_dt)/np.timedelta64(<span class="number">1</span>,<span class="string">&#x27;D&#x27;</span>)    <span class="comment"># 将R列中的days单位去除掉</span></span><br><span class="line">rfm</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>order_amount</th>
      <th>order_dt</th>
      <th>order_product</th>
      <th>R</th>
    </tr>
    <tr>
      <th>user_id</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1</th>
      <td>11.77</td>
      <td>1997-01-01</td>
      <td>1</td>
      <td>545.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>89.00</td>
      <td>1997-01-12</td>
      <td>6</td>
      <td>534.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>156.46</td>
      <td>1998-05-28</td>
      <td>16</td>
      <td>33.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>100.50</td>
      <td>1997-12-12</td>
      <td>7</td>
      <td>200.0</td>
    </tr>
    <tr>
      <th>5</th>
      <td>385.61</td>
      <td>1998-01-03</td>
      <td>29</td>
      <td>178.0</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>23566</th>
      <td>36.00</td>
      <td>1997-03-25</td>
      <td>2</td>
      <td>462.0</td>
    </tr>
    <tr>
      <th>23567</th>
      <td>20.97</td>
      <td>1997-03-25</td>
      <td>1</td>
      <td>462.0</td>
    </tr>
    <tr>
      <th>23568</th>
      <td>121.70</td>
      <td>1997-04-22</td>
      <td>6</td>
      <td>434.0</td>
    </tr>
    <tr>
      <th>23569</th>
      <td>25.74</td>
      <td>1997-03-25</td>
      <td>2</td>
      <td>462.0</td>
    </tr>
    <tr>
      <th>23570</th>
      <td>94.08</td>
      <td>1997-03-26</td>
      <td>5</td>
      <td>461.0</td>
    </tr>
  </tbody>
</table>
<p>23570 rows × 4 columns</p>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rfm.drop(labels=<span class="string">&#x27;order_dt&#x27;</span>,axis=<span class="number">1</span>,inplace=<span class="literal">True</span>) <span class="comment"># 将日期删掉</span></span><br><span class="line">rfm.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>order_amount</th>
      <th>order_product</th>
      <th>R</th>
    </tr>
    <tr>
      <th>user_id</th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1</th>
      <td>11.77</td>
      <td>1</td>
      <td>545.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>89.00</td>
      <td>6</td>
      <td>534.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>156.46</td>
      <td>16</td>
      <td>33.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>100.50</td>
      <td>7</td>
      <td>200.0</td>
    </tr>
    <tr>
      <th>5</th>
      <td>385.61</td>
      <td>29</td>
      <td>178.0</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rfm.columns = [<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;R&#x27;</span>] <span class="comment"># 重置索引</span></span><br><span class="line">rfm.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>M</th>
      <th>F</th>
      <th>R</th>
    </tr>
    <tr>
      <th>user_id</th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1</th>
      <td>11.77</td>
      <td>1</td>
      <td>545.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>89.00</td>
      <td>6</td>
      <td>534.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>156.46</td>
      <td>16</td>
      <td>33.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>100.50</td>
      <td>7</td>
      <td>200.0</td>
    </tr>
    <tr>
      <th>5</th>
      <td>385.61</td>
      <td>29</td>
      <td>178.0</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rfm_func</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="comment"># 存储存储的是三个字符串形式的0或者1</span></span><br><span class="line">    level = x.<span class="built_in">map</span>(<span class="keyword">lambda</span> x :<span class="string">&#x27;1&#x27;</span> <span class="keyword">if</span> x &gt;= <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    label = level.R + level.F + level.M</span><br><span class="line">    d = &#123;</span><br><span class="line">        <span class="string">&#x27;111&#x27;</span>:<span class="string">&#x27;重要价值客户&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;011&#x27;</span>:<span class="string">&#x27;重要保持客户&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;101&#x27;</span>:<span class="string">&#x27;重要挽留客户&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;001&#x27;</span>:<span class="string">&#x27;重要发展客户&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;110&#x27;</span>:<span class="string">&#x27;一般价值客户&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;010&#x27;</span>:<span class="string">&#x27;一般保持客户&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;100&#x27;</span>:<span class="string">&#x27;一般挽留客户&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;000&#x27;</span>:<span class="string">&#x27;一般发展客户&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    result = d[label]</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"><span class="comment"># df.apply(func):可以对df中的行或者列进行某种（func）形式的运算</span></span><br><span class="line">rfm[<span class="string">&#x27;label&#x27;</span>] = rfm.apply(<span class="keyword">lambda</span> x : x - x.mean()).apply(rfm_func,axis = <span class="number">1</span>)</span><br><span class="line">rfm.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>M</th>
      <th>F</th>
      <th>R</th>
      <th>label</th>
    </tr>
    <tr>
      <th>user_id</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1</th>
      <td>11.77</td>
      <td>1</td>
      <td>545.0</td>
      <td>一般挽留客户</td>
    </tr>
    <tr>
      <th>2</th>
      <td>89.00</td>
      <td>6</td>
      <td>534.0</td>
      <td>一般挽留客户</td>
    </tr>
    <tr>
      <th>3</th>
      <td>156.46</td>
      <td>16</td>
      <td>33.0</td>
      <td>重要保持客户</td>
    </tr>
    <tr>
      <th>4</th>
      <td>100.50</td>
      <td>7</td>
      <td>200.0</td>
      <td>一般发展客户</td>
    </tr>
    <tr>
      <th>5</th>
      <td>385.61</td>
      <td>29</td>
      <td>178.0</td>
      <td>重要保持客户</td>
    </tr>
  </tbody>
</table>
</div>



<h2 id="第五部分：用户的生命周期"><a href="#第五部分：用户的生命周期" class="headerlink" title="第五部分：用户的生命周期"></a>第五部分：用户的生命周期</h2><ul>
<li>将用户划分为活跃用户和其他用户<ul>
<li>统计每个用户每个月的消费次数</li>
<li>统计每个用户每个月是否消费，消费记录为1否则记录为0<ul>
<li>知识点：DataFrame的apply和applymap的区别<ul>
<li>applymap:返回df</li>
<li>将函数做用于DataFrame中的所有元素(elements)</li>
<li>apply:返回Series</li>
<li>apply()将一个函数作用于DataFrame中的每个行或者列</li>
</ul>
</li>
</ul>
</li>
<li>将用户按照每一个月份分成：<ul>
<li>unreg:观望用户（前两月没买，第三个月才第一次买,则用户前两个月为观望用户）</li>
<li>unactive:首月购买后，后序月份没有购买则在没有购买的月份中该用户的为非活跃用户</li>
<li>new:当前月就进行首次购买的用户在当前月为新用户</li>
<li>active:连续月份购买的用户在这些月中为活跃用户</li>
<li>return:购买之后间隔n月再次购买的第一个月份为该月份的回头客</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 统计每个用户每个月的消费次数</span></span><br><span class="line">user_month_count_df = df.pivot_table(index=<span class="string">&#x27;user_id&#x27;</span>,values=<span class="string">&#x27;order_dt&#x27;</span>,aggfunc=<span class="string">&#x27;count&#x27;</span>,columns=<span class="string">&#x27;month&#x27;</span>).fillna(<span class="number">0</span>)</span><br><span class="line">user_month_count_df.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th>month</th>
      <th>1997-01-01</th>
      <th>1997-02-01</th>
      <th>1997-03-01</th>
      <th>1997-04-01</th>
      <th>1997-05-01</th>
      <th>1997-06-01</th>
      <th>1997-07-01</th>
      <th>1997-08-01</th>
      <th>1997-09-01</th>
      <th>1997-10-01</th>
      <th>1997-11-01</th>
      <th>1997-12-01</th>
      <th>1998-01-01</th>
      <th>1998-02-01</th>
      <th>1998-03-01</th>
      <th>1998-04-01</th>
      <th>1998-05-01</th>
      <th>1998-06-01</th>
    </tr>
    <tr>
      <th>user_id</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1</th>
      <td>1.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1.0</td>
      <td>0.0</td>
      <td>1.0</td>
      <td>1.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>2.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>1.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>1.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>1.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>5</th>
      <td>2.0</td>
      <td>1.0</td>
      <td>0.0</td>
      <td>1.0</td>
      <td>1.0</td>
      <td>1.0</td>
      <td>1.0</td>
      <td>0.0</td>
      <td>1.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>2.0</td>
      <td>1.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 统计每个用户每个月是否消费，消费记录为1否则记录为0</span></span><br><span class="line">df_purchase = user_month_count_df.applymap(<span class="keyword">lambda</span> x:<span class="number">1</span> <span class="keyword">if</span> x &gt;= <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span>)</span><br><span class="line">df_purchase.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th>month</th>
      <th>1997-01-01</th>
      <th>1997-02-01</th>
      <th>1997-03-01</th>
      <th>1997-04-01</th>
      <th>1997-05-01</th>
      <th>1997-06-01</th>
      <th>1997-07-01</th>
      <th>1997-08-01</th>
      <th>1997-09-01</th>
      <th>1997-10-01</th>
      <th>1997-11-01</th>
      <th>1997-12-01</th>
      <th>1998-01-01</th>
      <th>1998-02-01</th>
      <th>1998-03-01</th>
      <th>1998-04-01</th>
      <th>1998-05-01</th>
      <th>1998-06-01</th>
    </tr>
    <tr>
      <th>user_id</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1</td>
      <td>0</td>
      <td>1</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>5</th>
      <td>1</td>
      <td>1</td>
      <td>0</td>
      <td>1</td>
      <td>1</td>
      <td>1</td>
      <td>1</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将df_purchase中的原始数据0和1修改为new，unactive......,返回新的df叫做df_purchase_new</span></span><br><span class="line"><span class="comment"># 固定算法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">active_status</span>(<span class="params">data</span>):</span></span><br><span class="line">    status = [] <span class="comment"># 某个用户每一个月的活跃度</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18</span>):</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 若本月没有消费</span></span><br><span class="line">        <span class="keyword">if</span> data[i] == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(status) &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> status[i-<span class="number">1</span>] == <span class="string">&#x27;unreg&#x27;</span>:</span><br><span class="line">                    status.append(<span class="string">&#x27;unreg&#x27;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    status.append(<span class="string">&#x27;unactive&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                status.append(<span class="string">&#x27;unreg&#x27;</span>)</span><br><span class="line">                    </span><br><span class="line">        <span class="comment"># 若本月消费</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(status) == <span class="number">0</span>:</span><br><span class="line">                status.append(<span class="string">&#x27;new&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> status[i-<span class="number">1</span>] == <span class="string">&#x27;unactive&#x27;</span>:</span><br><span class="line">                    status.append(<span class="string">&#x27;return&#x27;</span>)</span><br><span class="line">                <span class="keyword">elif</span> status[i-<span class="number">1</span>] == <span class="string">&#x27;unreg&#x27;</span>:</span><br><span class="line">                    status.append(<span class="string">&#x27;new&#x27;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    status.append(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> status</span><br><span class="line"></span><br><span class="line">pivoted_status = df_purchase.apply(active_status,axis = <span class="number">1</span>) </span><br><span class="line">pivoted_status.head()</span><br></pre></td></tr></table></figure>




<pre><code>user_id
1    [new, unactive, unactive, unactive, unactive, ...
2    [new, unactive, unactive, unactive, unactive, ...
3    [new, unactive, return, active, unactive, unac...
4    [new, unactive, unactive, unactive, unactive, ...
5    [new, active, unactive, return, active, active...
dtype: object
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_purchase_new = DataFrame(data=pivoted_status.values.tolist(),index=df_purchase.index,columns=df_purchase.columns)</span><br><span class="line">df_purchase_new</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th>month</th>
      <th>1997-01-01</th>
      <th>1997-02-01</th>
      <th>1997-03-01</th>
      <th>1997-04-01</th>
      <th>1997-05-01</th>
      <th>1997-06-01</th>
      <th>1997-07-01</th>
      <th>1997-08-01</th>
      <th>1997-09-01</th>
      <th>1997-10-01</th>
      <th>1997-11-01</th>
      <th>1997-12-01</th>
      <th>1998-01-01</th>
      <th>1998-02-01</th>
      <th>1998-03-01</th>
      <th>1998-04-01</th>
      <th>1998-05-01</th>
      <th>1998-06-01</th>
    </tr>
    <tr>
      <th>user_id</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1</th>
      <td>new</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
    </tr>
    <tr>
      <th>2</th>
      <td>new</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
    </tr>
    <tr>
      <th>3</th>
      <td>new</td>
      <td>unactive</td>
      <td>return</td>
      <td>active</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>return</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>return</td>
      <td>unactive</td>
    </tr>
    <tr>
      <th>4</th>
      <td>new</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>return</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>return</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
    </tr>
    <tr>
      <th>5</th>
      <td>new</td>
      <td>active</td>
      <td>unactive</td>
      <td>return</td>
      <td>active</td>
      <td>active</td>
      <td>active</td>
      <td>unactive</td>
      <td>return</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>return</td>
      <td>active</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>23566</th>
      <td>unreg</td>
      <td>unreg</td>
      <td>new</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
    </tr>
    <tr>
      <th>23567</th>
      <td>unreg</td>
      <td>unreg</td>
      <td>new</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
    </tr>
    <tr>
      <th>23568</th>
      <td>unreg</td>
      <td>unreg</td>
      <td>new</td>
      <td>active</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
    </tr>
    <tr>
      <th>23569</th>
      <td>unreg</td>
      <td>unreg</td>
      <td>new</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
    </tr>
    <tr>
      <th>23570</th>
      <td>unreg</td>
      <td>unreg</td>
      <td>new</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
      <td>unactive</td>
    </tr>
  </tbody>
</table>
<p>23570 rows × 18 columns</p>
</div>



<ul>
<li>每月【不同活跃】用户的计数<ul>
<li>purchase_status_ct = df_purchase_new.apply(lambda x : pd.value_counts(x)).fillna(0)</li>
<li>转置进行最终结果的查看</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">purchase_status_ct = df_purchase_new.apply(<span class="keyword">lambda</span> x : pd.value_counts(x)).fillna(<span class="number">0</span>)</span><br><span class="line">purchase_status_ct</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th>month</th>
      <th>1997-01-01</th>
      <th>1997-02-01</th>
      <th>1997-03-01</th>
      <th>1997-04-01</th>
      <th>1997-05-01</th>
      <th>1997-06-01</th>
      <th>1997-07-01</th>
      <th>1997-08-01</th>
      <th>1997-09-01</th>
      <th>1997-10-01</th>
      <th>1997-11-01</th>
      <th>1997-12-01</th>
      <th>1998-01-01</th>
      <th>1998-02-01</th>
      <th>1998-03-01</th>
      <th>1998-04-01</th>
      <th>1998-05-01</th>
      <th>1998-06-01</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>active</th>
      <td>0.0</td>
      <td>1157.0</td>
      <td>1681.0</td>
      <td>1773.0</td>
      <td>852.0</td>
      <td>747.0</td>
      <td>746.0</td>
      <td>604.0</td>
      <td>528.0</td>
      <td>532.0</td>
      <td>624.0</td>
      <td>632.0</td>
      <td>512.0</td>
      <td>472.0</td>
      <td>571.0</td>
      <td>518.0</td>
      <td>459.0</td>
      <td>446.0</td>
    </tr>
    <tr>
      <th>new</th>
      <td>7846.0</td>
      <td>8476.0</td>
      <td>7248.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>return</th>
      <td>0.0</td>
      <td>0.0</td>
      <td>595.0</td>
      <td>1049.0</td>
      <td>1362.0</td>
      <td>1592.0</td>
      <td>1434.0</td>
      <td>1168.0</td>
      <td>1211.0</td>
      <td>1307.0</td>
      <td>1404.0</td>
      <td>1232.0</td>
      <td>1025.0</td>
      <td>1079.0</td>
      <td>1489.0</td>
      <td>919.0</td>
      <td>1029.0</td>
      <td>1060.0</td>
    </tr>
    <tr>
      <th>unactive</th>
      <td>0.0</td>
      <td>6689.0</td>
      <td>14046.0</td>
      <td>20748.0</td>
      <td>21356.0</td>
      <td>21231.0</td>
      <td>21390.0</td>
      <td>21798.0</td>
      <td>21831.0</td>
      <td>21731.0</td>
      <td>21542.0</td>
      <td>21706.0</td>
      <td>22033.0</td>
      <td>22019.0</td>
      <td>21510.0</td>
      <td>22133.0</td>
      <td>22082.0</td>
      <td>22064.0</td>
    </tr>
    <tr>
      <th>unreg</th>
      <td>15724.0</td>
      <td>7248.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">purchase_status_ct.T</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>active</th>
      <th>new</th>
      <th>return</th>
      <th>unactive</th>
      <th>unreg</th>
    </tr>
    <tr>
      <th>month</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1997-01-01</th>
      <td>0.0</td>
      <td>7846.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>15724.0</td>
    </tr>
    <tr>
      <th>1997-02-01</th>
      <td>1157.0</td>
      <td>8476.0</td>
      <td>0.0</td>
      <td>6689.0</td>
      <td>7248.0</td>
    </tr>
    <tr>
      <th>1997-03-01</th>
      <td>1681.0</td>
      <td>7248.0</td>
      <td>595.0</td>
      <td>14046.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>1997-04-01</th>
      <td>1773.0</td>
      <td>0.0</td>
      <td>1049.0</td>
      <td>20748.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>1997-05-01</th>
      <td>852.0</td>
      <td>0.0</td>
      <td>1362.0</td>
      <td>21356.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>1997-06-01</th>
      <td>747.0</td>
      <td>0.0</td>
      <td>1592.0</td>
      <td>21231.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>1997-07-01</th>
      <td>746.0</td>
      <td>0.0</td>
      <td>1434.0</td>
      <td>21390.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>1997-08-01</th>
      <td>604.0</td>
      <td>0.0</td>
      <td>1168.0</td>
      <td>21798.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>1997-09-01</th>
      <td>528.0</td>
      <td>0.0</td>
      <td>1211.0</td>
      <td>21831.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>1997-10-01</th>
      <td>532.0</td>
      <td>0.0</td>
      <td>1307.0</td>
      <td>21731.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>1997-11-01</th>
      <td>624.0</td>
      <td>0.0</td>
      <td>1404.0</td>
      <td>21542.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>1997-12-01</th>
      <td>632.0</td>
      <td>0.0</td>
      <td>1232.0</td>
      <td>21706.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>1998-01-01</th>
      <td>512.0</td>
      <td>0.0</td>
      <td>1025.0</td>
      <td>22033.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>1998-02-01</th>
      <td>472.0</td>
      <td>0.0</td>
      <td>1079.0</td>
      <td>22019.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>1998-03-01</th>
      <td>571.0</td>
      <td>0.0</td>
      <td>1489.0</td>
      <td>21510.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>1998-04-01</th>
      <td>518.0</td>
      <td>0.0</td>
      <td>919.0</td>
      <td>22133.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>1998-05-01</th>
      <td>459.0</td>
      <td>0.0</td>
      <td>1029.0</td>
      <td>22082.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>1998-06-01</th>
      <td>446.0</td>
      <td>0.0</td>
      <td>1060.0</td>
      <td>22064.0</td>
      <td>0.0</td>
    </tr>
  </tbody>
</table>
</div>



<hr>
<p>本文提及的数据集下载地址：<br>链接：<a href="https://pan.baidu.com/s/1lhAiSXBw47MK9QdqwA05Lg">https://pan.baidu.com/s/1lhAiSXBw47MK9QdqwA05Lg</a><br>提取码：1111 </p>
<hr>
]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
</search>

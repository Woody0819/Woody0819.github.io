<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Woody</title>
  
  
  <link href="http://woody0819.github.io/atom.xml" rel="self"/>
  
  <link href="http://woody0819.github.io/"/>
  <updated>2021-05-19T10:29:35.100Z</updated>
  <id>http://woody0819.github.io/</id>
  
  <author>
    <name>Woody</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>股票分析</title>
    <link href="http://woody0819.github.io/2021/05/19/test_1/"/>
    <id>http://woody0819.github.io/2021/05/19/test_1/</id>
    <published>2021-05-19T09:43:53.298Z</published>
    <updated>2021-05-19T10:29:35.100Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;需求：股票分析&quot;&gt;&lt;a href=&quot;#需求：股票分析&quot; class=&quot;headerlink&quot; title=&quot;需求：股票分析&quot;&gt;&lt;/a&gt;需求：股票分析&lt;/h1&gt;&lt;p&gt;1.使用tushare包获取某股票的历史行情数据&lt;br&gt;2.输出该股票所有收盘比开盘上涨3%以上的日期&lt;br&gt;3.输出该股票所有开盘比前日收盘跌幅超2%的日期&lt;br&gt;4.假如从2017年1月1日开始，每月第一个交易日买入1手股票，每年最后一个交易日卖出所有股票，迄今为止收益如何？&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; tushare &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; ts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; pd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;df = ts.get_k_data(code=&lt;span class=&quot;string&quot;&gt;&amp;#x27;600519&amp;#x27;&lt;/span&gt;,start=&lt;span class=&quot;string&quot;&gt;&amp;#x27;2015-01-01&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;df.to_csv(&lt;span class=&quot;string&quot;&gt;&amp;#x27;moutai.csv&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;df = pd.read_csv(&lt;span class=&quot;string&quot;&gt;&amp;#x27;moutai.csv&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;df.head()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;pre&gt;&lt;code&gt;本接口即将停止更新，请尽快使用Pro版接口：https://waditu.com/document/2
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th &amp;#123;
    vertical-align: top;
&amp;#125;

.dataframe thead th &amp;#123;
    text-align: right;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;
  &lt;thead&gt;
    &lt;tr style=&quot;text-align: right;&quot;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Unnamed: 0&lt;/th&gt;
      &lt;th&gt;date&lt;/th&gt;
      &lt;th&gt;open&lt;/th&gt;
      &lt;th&gt;close&lt;/th&gt;
      &lt;th&gt;high&lt;/th&gt;
      &lt;th&gt;low&lt;/th&gt;
      &lt;th&gt;volume&lt;/th&gt;
      &lt;th&gt;code&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;2015-01-05&lt;/td&gt;
      &lt;td&gt;161.056&lt;/td&gt;
      &lt;td&gt;172.013&lt;/td&gt;
      &lt;td&gt;173.474&lt;/td&gt;
      &lt;td&gt;160.266&lt;/td&gt;
      &lt;td&gt;94515.0&lt;/td&gt;
      &lt;td&gt;600519&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2015-01-06&lt;/td&gt;
      &lt;td&gt;169.872&lt;/td&gt;
      &lt;td&gt;168.029&lt;/td&gt;
      &lt;td&gt;172.047&lt;/td&gt;
      &lt;td&gt;166.492&lt;/td&gt;
      &lt;td&gt;55020.0&lt;/td&gt;
      &lt;td&gt;600519&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2015-01-07&lt;/td&gt;
      &lt;td&gt;166.509&lt;/td&gt;
      &lt;td&gt;163.876&lt;/td&gt;
      &lt;td&gt;169.448&lt;/td&gt;
      &lt;td&gt;161.370&lt;/td&gt;
      &lt;td&gt;54797.0&lt;/td&gt;
      &lt;td&gt;600519&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;2015-01-08&lt;/td&gt;
      &lt;td&gt;164.776&lt;/td&gt;
      &lt;td&gt;162.874&lt;/td&gt;
      &lt;td&gt;165.218&lt;/td&gt;
      &lt;td&gt;161.498&lt;/td&gt;
      &lt;td&gt;40525.0&lt;/td&gt;
      &lt;td&gt;600519&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;2015-01-09&lt;/td&gt;
      &lt;td&gt;161.719&lt;/td&gt;
      &lt;td&gt;161.642&lt;/td&gt;
      &lt;td&gt;166.280&lt;/td&gt;
      &lt;td&gt;161.472&lt;/td&gt;
      &lt;td&gt;53982.0&lt;/td&gt;
      &lt;td&gt;600519&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;




&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;df.drop(labels=&lt;span class=&quot;string&quot;&gt;&amp;#x27;Unnamed: 0&amp;#x27;&lt;/span&gt;,axis=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,inplace=&lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;# drop中axis与常规相反,1是垂直方向，0是水平方向&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;df.head()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="数据分析" scheme="http://woody0819.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
    <category term="学习笔记" scheme="http://woody0819.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>级联操作</title>
    <link href="http://woody0819.github.io/2021/05/19/test_4/"/>
    <id>http://woody0819.github.io/2021/05/19/test_4/</id>
    <published>2021-05-19T09:31:23.655Z</published>
    <updated>2021-05-19T10:30:26.520Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;级联操作&quot;&gt;&lt;a href=&quot;#级联操作&quot; class=&quot;headerlink&quot; title=&quot;级联操作&quot;&gt;&lt;/a&gt;级联操作&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;pd.concat,pd.append&lt;br&gt;pandas使用pd.concat函数，与np.concatenate函数类似，只是多了一些参数：&lt;br&gt;objs&lt;br&gt;axis&lt;br&gt;keys&lt;br&gt;join=’outer’/‘inner’：表示的是级联方式，outer会将所有的项进行级联（忽略匹配和不匹配），而inner只会将匹配的项级联在一起，不匹配的不级联&lt;br&gt;ignore_index=False&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; pd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; pandas &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; DataFrame&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;匹配级联&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;df1 = DataFrame(np.random.randint(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;,size=(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)),columns=[&lt;span class=&quot;string&quot;&gt;&amp;#x27;A&amp;#x27;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&amp;#x27;B&amp;#x27;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&amp;#x27;C&amp;#x27;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;df2 = DataFrame(np.random.randint(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;,size=(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)),columns=[&lt;span class=&quot;string&quot;&gt;&amp;#x27;A&amp;#x27;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&amp;#x27;D&amp;#x27;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&amp;#x27;C&amp;#x27;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(df1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(df2)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;pre&gt;&lt;code&gt;    A   B   C
0  79  32  25
1  25  25  37
2  10  83  72
3   0  48   3
4  59  31  86
    A   D   C
0  35  54  59
1   5   7  76
2  76  82  89
3  17  93  46
4  99  56   8
&lt;/code&gt;&lt;/pre&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(pd.concat((df1,df2),axis=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;))  &lt;span class=&quot;comment&quot;&gt;# 横向级联&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;pre&gt;&lt;code&gt;    A   B   C   A   D   C
0  79  32  25  35  54  59
1  25  25  37   5   7  76
2  10  83  72  76  82  89
3   0  48   3  17  93  46
4  59  31  86  99  56   8
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;不匹配级联&lt;ul&gt;
&lt;li&gt;不匹配级联指的是级联的维度索引不一致。例如纵向级联时列索引不一致，横向级联时行索引不一致&lt;/li&gt;
&lt;li&gt;有2中连接方式：&lt;ul&gt;
&lt;li&gt;外连接：补NAN（默认模式），如果想要保留数据的完整性必须使用outer(外连接)&lt;/li&gt;
&lt;li&gt;内连接：只连接匹配的项&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(pd.concat((df1,df2),axis=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;))  &lt;span class=&quot;comment&quot;&gt;# 纵向级联，出现不匹配级联&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(pd.concat((df1,df2),axis=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,join=&lt;span class=&quot;string&quot;&gt;&amp;#x27;inner&amp;#x27;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;pre&gt;&lt;code&gt;    A     B   C     D
0  79  32.0  25   NaN
1  25  25.0  37   NaN
2  10  83.0  72   NaN
3   0  48.0   3   NaN
4  59  31.0  86   NaN
0  35   NaN  59  54.0
1   5   NaN  76   7.0
2  76   NaN  89  82.0
3  17   NaN  46  93.0
4  99   NaN   8  56.0
    A   C
0  79  25
1  25  37
2  10  72
3   0   3
4  59  86
0  35  59
1   5  76
2  76  89
3  17  46
4  99   8
&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="数据分析" scheme="http://woody0819.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
    <category term="学习笔记" scheme="http://woody0819.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>处理丢失数据</title>
    <link href="http://woody0819.github.io/2021/05/19/test_3/"/>
    <id>http://woody0819.github.io/2021/05/19/test_3/</id>
    <published>2021-05-19T09:31:23.651Z</published>
    <updated>2021-05-19T10:30:16.400Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;处理丢失数据&quot;&gt;&lt;a href=&quot;#处理丢失数据&quot; class=&quot;headerlink&quot; title=&quot;处理丢失数据&quot;&gt;&lt;/a&gt;处理丢失数据&lt;/h1&gt;&lt;p&gt;1、原始数据中会存在缺失值（空值）&lt;br&gt;2、重复值&lt;br&gt;3、异常值  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有两种丢失数据  &lt;ul&gt;
&lt;li&gt;None  &lt;/li&gt;
&lt;li&gt;np.nan(NAN)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;两种丢失数据的区别&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;None&lt;/span&gt;))   &lt;span class=&quot;comment&quot;&gt;# None对象类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;(np.nan)) &lt;span class=&quot;comment&quot;&gt;# NAN浮点型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;class &amp;#39;NoneType&amp;#39;&amp;gt;
&amp;lt;class &amp;#39;float&amp;#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;为什么在数据分析中需要用到的是浮点类型的空而不是对象类型？  &lt;ul&gt;
&lt;li&gt;数据分析中会经常使用某些形式的运算来处理原始数据，如果原始数据中的空值为NAN形式，则不会干扰或者中断运算，NAN是可以参与运算的；  &lt;/li&gt;
&lt;li&gt;None是不可以参与运算的  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在pandas中如果遇到了None形式的空值则pandas会将其强转成NAN的形式。    &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(np.nan+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;# 输出结果仍为nan&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;None&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)   &lt;span class=&quot;comment&quot;&gt;# 会出现编译错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;pre&gt;&lt;code&gt;nan



---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&amp;lt;ipython-input-49-e38e0a464830&amp;gt; in &amp;lt;module&amp;gt;()
      1 print(np.nan+1) # 输出结果仍为nan
----&amp;gt; 2 print(None+1)   # 会出现编译错误


TypeError: unsupported operand type(s) for +: &amp;#39;NoneType&amp;#39; and &amp;#39;int&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;pandas处理空值操作&quot;&gt;&lt;a href=&quot;#pandas处理空值操作&quot; class=&quot;headerlink&quot; title=&quot;pandas处理空值操作&quot;&gt;&lt;/a&gt;pandas处理空值操作&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;isnull&lt;/li&gt;
&lt;li&gt;notnull&lt;/li&gt;
&lt;li&gt;any&lt;/li&gt;
&lt;li&gt;all&lt;/li&gt;
&lt;li&gt;dropna&lt;/li&gt;
&lt;li&gt;fillna</summary>
    
    
    
    <category term="数据分析" scheme="http://woody0819.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
    <category term="学习笔记" scheme="http://woody0819.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>双均线策略制定</title>
    <link href="http://woody0819.github.io/2021/05/19/test_2/"/>
    <id>http://woody0819.github.io/2021/05/19/test_2/</id>
    <published>2021-05-19T09:31:23.644Z</published>
    <updated>2021-05-19T10:27:38.797Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;需求：双均线策略制定&quot;&gt;&lt;a href=&quot;#需求：双均线策略制定&quot; class=&quot;headerlink&quot; title=&quot;需求：双均线策略制定&quot;&gt;&lt;/a&gt;需求：双均线策略制定&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;使用tushare包获取某股票的历史行情数据  &lt;/li&gt;
&lt;li&gt;计算该股票历史数据的5日均线和60日均线  &lt;ul&gt;
&lt;li&gt;什么是均线：  &lt;ul&gt;
&lt;li&gt;对于每一个交易日，都可以计算出前N天的移动平均值，然后把这些移动平均值连起来，成为一条线，就叫做N日移动平均线。移动平均线常用线有5天、10天、30天、60天、120天和240天的指标。  &lt;ul&gt;
&lt;li&gt;5天和10天的是短线操作的参照指标，称作日均线指标；  &lt;/li&gt;
&lt;li&gt;30天和60天的是中期均线指标，称作季均线指标；  &lt;/li&gt;
&lt;li&gt;120天和240天的是长期均线指标，称作年均线指标。  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;均线计算方法：MA=(C1+C2+C3+…+Cn)/N      C:某日收盘价；N:移动平均周期（天数）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; tushare &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; ts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; pd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;df = ts.get_k_data(code=&amp;#x27;600519&amp;#x27;,start=&amp;#x27;2015-01-01&amp;#x27;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;df.to_csv(&amp;#x27;moutai.csv&amp;#x27;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;df = pd.read_csv(&lt;span class=&quot;string&quot;&gt;&amp;#x27;moutai.csv&amp;#x27;&lt;/span&gt;).drop(labels=&lt;span class=&quot;string&quot;&gt;&amp;#x27;Unnamed: 0&amp;#x27;&lt;/span&gt;,axis=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;df[&lt;span class=&quot;string&quot;&gt;&amp;#x27;date&amp;#x27;&lt;/span&gt;] = pd.to_datetime(df[&lt;span class=&quot;string&quot;&gt;&amp;#x27;date&amp;#x27;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;df.set_index(&lt;span class=&quot;string&quot;&gt;&amp;#x27;date&amp;#x27;&lt;/span&gt;,inplace=&lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;df.head()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="数据分析" scheme="http://woody0819.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
    <category term="学习笔记" scheme="http://woody0819.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>人口分析案例</title>
    <link href="http://woody0819.github.io/2021/05/19/test_5/"/>
    <id>http://woody0819.github.io/2021/05/19/test_5/</id>
    <published>2021-05-19T09:25:23.838Z</published>
    <updated>2021-05-19T10:30:41.512Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;人口分析案例&quot;&gt;&lt;a href=&quot;#人口分析案例&quot; class=&quot;headerlink&quot; title=&quot;人口分析案例&quot;&gt;&lt;/a&gt;人口分析案例&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;需求：&lt;ul&gt;
&lt;li&gt;导入文件，查看原始数据&lt;/li&gt;
&lt;li&gt;将人口数据和各州的简称数据进行合并&lt;/li&gt;
&lt;li&gt;将合并的数据中重复的abbreviation列进行删除&lt;/li&gt;
&lt;li&gt;查看存在缺失数据的列&lt;/li&gt;
&lt;li&gt;找到有哪些state/region使得state的值为NaN，进行去重操作&lt;/li&gt;
&lt;li&gt;为找到的这些state/region的state项补上正确的值，从而去除掉state这一列的所有NaN&lt;/li&gt;
&lt;li&gt;合并各州面积数据areas&lt;/li&gt;
&lt;li&gt;我们会发现area(sq.mi)这一列有缺失数据，找出是哪些行&lt;/li&gt;
&lt;li&gt;去除含有缺失数据的行&lt;/li&gt;
&lt;li&gt;找出2010年的全民人口数据&lt;/li&gt;
&lt;li&gt;计算各州的人口密度&lt;/li&gt;
&lt;li&gt;排序，并找出人口密度最高的州&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; pd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; pandas &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; DataFrame&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 导入文件，查看原始数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;abb = pd.read_csv(&lt;span class=&quot;string&quot;&gt;&amp;#x27;data\\state-abbrevs.csv&amp;#x27;&lt;/span&gt;)    &lt;span class=&quot;comment&quot;&gt;# state表示州的全称，abbreviation表示州的简称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(abb.head())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;area = pd.read_csv(&lt;span class=&quot;string&quot;&gt;&amp;#x27;data\\state-areas.csv&amp;#x27;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;# state州全称，area(sq.mi)州面积&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(area.head())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pop = pd.read_csv(&lt;span class=&quot;string&quot;&gt;&amp;#x27;data\\state-population.csv&amp;#x27;&lt;/span&gt;)    &lt;span class=&quot;comment&quot;&gt;# state/region简称，population人口数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(pop.head())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 将人口数据和各州的简称数据进行合并&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;abb_pop = pd.merge(abb,pop,left_on=&lt;span class=&quot;string&quot;&gt;&amp;#x27;abbreviation&amp;#x27;&lt;/span&gt;,right_on=&lt;span class=&quot;string&quot;&gt;&amp;#x27;state/region&amp;#x27;&lt;/span&gt;,how=&lt;span class=&quot;string&quot;&gt;&amp;#x27;outer&amp;#x27;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;# 默认是内连接inner,为了保证数据完整性此处指定outer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(abb_pop.head())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;pre&gt;&lt;code&gt;        state abbreviation
0     Alabama           AL
1      Alaska           AK
2     Arizona           AZ
3    Arkansas           AR
4  California           CA
        state  area (sq. mi)
0     Alabama          52423
1      Alaska         656425
2     Arizona         114006
3    Arkansas          53182
4  California         163707
  state/region     ages  year  population
0           AL  under18  2012   1117489.0
1           AL    total  2012   4817528.0
2           AL  under18  2010   1130966.0
3           AL    total  2010   4785570.0
4           AL  under18  2011   1125763.0
     state abbreviation state/region     ages  year  population
0  Alabama           AL           AL  under18  2012   1117489.0
1  Alabama           AL           AL    total  2012   4817528.0
2  Alabama           AL           AL  under18  2010   1130966.0
3  Alabama           AL           AL    total  2010   4785570.0
4  Alabama           AL           AL  under18  2011   1125763.0
&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="数据分析" scheme="http://woody0819.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
    <category term="学习笔记" scheme="http://woody0819.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
